1
00:00:00,000 --> 00:00:01,680
in this full course you will learn the

2
00:00:01,680 --> 00:00:03,919
basics of python programming

3
00:00:03,919 --> 00:00:06,240
i'm beau carnes with freecodecamp.org

4
00:00:06,240 --> 00:00:07,839
i've previously created one of the most

5
00:00:07,839 --> 00:00:10,719
popular javascript courses on youtube

6
00:00:10,719 --> 00:00:13,120
and i've created many python tutorials

7
00:00:13,120 --> 00:00:15,280
now i've created this complete python

8
00:00:15,280 --> 00:00:17,359
course for beginners you don't need any

9
00:00:17,359 --> 00:00:19,039
previous programming experience to

10
00:00:19,039 --> 00:00:21,119
follow along and all you need to code in

11
00:00:21,119 --> 00:00:23,680
python is a web browser in this course i

12
00:00:23,680 --> 00:00:25,599
will teach you all the core aspects of

13
00:00:25,599 --> 00:00:27,840
the python programming language and i

14
00:00:27,840 --> 00:00:30,160
will simplify the more complex topics

15
00:00:30,160 --> 00:00:31,599
python is considered one of the most

16
00:00:31,599 --> 00:00:33,440
popular programming languages in the

17
00:00:33,440 --> 00:00:35,280
world and it's only growing in

18
00:00:35,280 --> 00:00:37,760
popularity python excels in a wide

19
00:00:37,760 --> 00:00:39,920
variety of scenarios such as shell

20
00:00:39,920 --> 00:00:42,320
scripting task automation and web

21
00:00:42,320 --> 00:00:44,399
development and it's also the language

22
00:00:44,399 --> 00:00:46,960
of choice for data analysis and machine

23
00:00:46,960 --> 00:00:49,280
learning but it can also adapt to create

24
00:00:49,280 --> 00:00:52,000
games and work with embedded devices

25
00:00:52,000 --> 00:00:54,000
we're going to jump right into it so you

26
00:00:54,000 --> 00:00:55,600
can start coding your first python

27
00:00:55,600 --> 00:00:58,079
program as soon as possible to get

28
00:00:58,079 --> 00:01:00,320
started quickly we'll use a replit which

29
00:01:00,320 --> 00:01:02,800
is an online ide that allows users to

30
00:01:02,800 --> 00:01:05,280
code and run programs in a variety of

31
00:01:05,280 --> 00:01:08,240
different languages all in a web browser

32
00:01:08,240 --> 00:01:09,600
and later i'll show you how to get

33
00:01:09,600 --> 00:01:11,840
python set up on your local operating

34
00:01:11,840 --> 00:01:14,479
system after the first project i'll go

35
00:01:14,479 --> 00:01:16,320
into more detail about each of the main

36
00:01:16,320 --> 00:01:18,560
features of python the section is

37
00:01:18,560 --> 00:01:20,799
comprehensive and detailed and in the

38
00:01:20,799 --> 00:01:22,560
final section you will use what you've

39
00:01:22,560 --> 00:01:24,640
been learning to code a blackjack game

40
00:01:24,640 --> 00:01:26,560
with me guiding you every step of the

41
00:01:26,560 --> 00:01:28,320
way throughout the course there will be

42
00:01:28,320 --> 00:01:30,079
a little repetition of some of the key

43
00:01:30,079 --> 00:01:32,320
python programming concepts to make sure

44
00:01:32,320 --> 00:01:33,759
you have a deep understanding of the

45
00:01:33,759 --> 00:01:36,799
language so let's get started we're

46
00:01:36,799 --> 00:01:38,799
going to start by creating a simple rock

47
00:01:38,799 --> 00:01:41,119
paper scissors game and we'll start by

48
00:01:41,119 --> 00:01:44,159
going to replit.com replied provided a

49
00:01:44,159 --> 00:01:46,320
grant that made this course possible and

50
00:01:46,320 --> 00:01:48,560
replie is going to make it super easy to

51
00:01:48,560 --> 00:01:50,720
get up and running really quickly so you

52
00:01:50,720 --> 00:01:53,439
can either sign up or log in

53
00:01:53,439 --> 00:01:54,799
and create an account i'm just going to

54
00:01:54,799 --> 00:01:56,880
use my google account

55
00:01:56,880 --> 00:01:59,920
okay now that you're logged into replit

56
00:01:59,920 --> 00:02:01,920
you can either just click the create

57
00:02:01,920 --> 00:02:04,240
button or this plus button over here to

58
00:02:04,240 --> 00:02:06,799
create a new replit and i'll make sure

59
00:02:06,799 --> 00:02:10,000
to create a python replit but you can

60
00:02:10,000 --> 00:02:12,000
see you can also select all sorts of

61
00:02:12,000 --> 00:02:14,080
different programming languages oh these

62
00:02:14,080 --> 00:02:15,840
are just the ones that start with the

63
00:02:15,840 --> 00:02:18,400
word python but so there's there's tons

64
00:02:18,400 --> 00:02:19,520
of different programming languages you

65
00:02:19,520 --> 00:02:21,599
can select but in this case we are just

66
00:02:21,599 --> 00:02:24,720
going to use python and then i'll click

67
00:02:24,720 --> 00:02:27,599
create reple

68
00:02:29,360 --> 00:02:31,760
okay so let me just kind of show off

69
00:02:31,760 --> 00:02:33,200
replica a little bit

70
00:02:33,200 --> 00:02:34,640
this is where we're going to create our

71
00:02:34,640 --> 00:02:36,640
python code i'm going to zoom in just a

72
00:02:36,640 --> 00:02:38,080
little bit so we're going to write the

73
00:02:38,080 --> 00:02:40,239
code right here and then we can see some

74
00:02:40,239 --> 00:02:42,800
output over on the right side and then

75
00:02:42,800 --> 00:02:44,720
you can create different files over on

76
00:02:44,720 --> 00:02:46,480
the left side here

77
00:02:46,480 --> 00:02:48,160
and then there's some other things like

78
00:02:48,160 --> 00:02:50,560
you can connect to version control

79
00:02:50,560 --> 00:02:51,360
and

80
00:02:51,360 --> 00:02:52,800
if you have environment variables we're

81
00:02:52,800 --> 00:02:54,239
not even going to be discussing those in

82
00:02:54,239 --> 00:02:56,319
this course there's a debugger you can

83
00:02:56,319 --> 00:02:58,000
connect to a database and just some

84
00:02:58,000 --> 00:03:00,000
other things but we're mainly going to

85
00:03:00,000 --> 00:03:02,640
just be using this main.pi program to

86
00:03:02,640 --> 00:03:04,560
write our program and we're going to see

87
00:03:04,560 --> 00:03:06,879
the results in the console so i'm just

88
00:03:06,879 --> 00:03:09,840
going to close this files window so

89
00:03:09,840 --> 00:03:11,519
it's a little bigger here

90
00:03:11,519 --> 00:03:13,200
i'm going to start off by showing you

91
00:03:13,200 --> 00:03:17,040
how to create a variable with python so

92
00:03:17,040 --> 00:03:19,599
this is a rock paper scissors game and

93
00:03:19,599 --> 00:03:21,440
there's going to be a players a player

94
00:03:21,440 --> 00:03:23,599
is going to have a choice and a computer

95
00:03:23,599 --> 00:03:25,760
is going to have a choice so i'm going

96
00:03:25,760 --> 00:03:29,440
to create a variable called player

97
00:03:29,440 --> 00:03:30,720
choice

98
00:03:30,720 --> 00:03:33,040
and i'm going to set that equal to

99
00:03:33,040 --> 00:03:34,000
rock

100
00:03:34,000 --> 00:03:36,640
so let's look at a few components about

101
00:03:36,640 --> 00:03:39,760
this this is the variable name player

102
00:03:39,760 --> 00:03:40,720
choice

103
00:03:40,720 --> 00:03:42,480
and you can see

104
00:03:42,480 --> 00:03:43,360
if you

105
00:03:43,360 --> 00:03:45,440
we use an underscore that's just kind of

106
00:03:45,440 --> 00:03:48,000
the convention for python to use an

107
00:03:48,000 --> 00:03:49,040
underscore if you're going to have a

108
00:03:49,040 --> 00:03:51,840
space in the variable name and we're

109
00:03:51,840 --> 00:03:53,599
going to assign it that's what this

110
00:03:53,599 --> 00:03:55,920
equal sign this is the assign operator

111
00:03:55,920 --> 00:03:58,000
and we're going to assign it to a string

112
00:03:58,000 --> 00:04:00,400
a string is just a word or a collection

113
00:04:00,400 --> 00:04:02,400
of characters like rock and we're going

114
00:04:02,400 --> 00:04:04,560
to put quotation marks around it now we

115
00:04:04,560 --> 00:04:06,879
could have also used a single quotes

116
00:04:06,879 --> 00:04:08,959
instead of double quotes as long as you

117
00:04:08,959 --> 00:04:10,879
use the same quote on each side that's

118
00:04:10,879 --> 00:04:13,519
what's important so we've now created a

119
00:04:13,519 --> 00:04:14,480
variable

120
00:04:14,480 --> 00:04:15,920
called

121
00:04:15,920 --> 00:04:18,560
playerchoice and assigned it to rock and

122
00:04:18,560 --> 00:04:20,560
now we can reference this variable later

123
00:04:20,560 --> 00:04:22,720
and whenever we reference the variable

124
00:04:22,720 --> 00:04:25,919
called playerchoice it's going to

125
00:04:25,919 --> 00:04:27,759
the code is going to automatically

126
00:04:27,759 --> 00:04:31,040
replace that player choice with rock

127
00:04:31,040 --> 00:04:33,759
so this is going to be a very

128
00:04:33,759 --> 00:04:36,080
interactive project i hope you're

129
00:04:36,080 --> 00:04:38,240
following along i hope you have already

130
00:04:38,240 --> 00:04:40,479
got replit loaded up like this now

131
00:04:40,479 --> 00:04:42,240
throughout this project i'm going to

132
00:04:42,240 --> 00:04:45,600
tell you what the next thing to do is

133
00:04:45,600 --> 00:04:48,960
and i want you to try doing it yourself

134
00:04:48,960 --> 00:04:52,080
before you watch what i'm going to do so

135
00:04:52,080 --> 00:04:53,840
periodically you'll want to pause the

136
00:04:53,840 --> 00:04:55,199
video

137
00:04:55,199 --> 00:04:57,040
based on and what i say you and try to

138
00:04:57,040 --> 00:04:58,720
implement what i say

139
00:04:58,720 --> 00:05:00,320
before you come back to the video and

140
00:05:00,320 --> 00:05:02,560
watch me implement it and see if you've

141
00:05:02,560 --> 00:05:05,199
implemented the the same way

142
00:05:05,199 --> 00:05:06,880
so i'm just going to zoom in one more

143
00:05:06,880 --> 00:05:08,639
time and

144
00:05:08,639 --> 00:05:10,960
this is the first thing i want you to do

145
00:05:10,960 --> 00:05:13,440
see if you can make another variable on

146
00:05:13,440 --> 00:05:14,960
the next line so you're going to press

147
00:05:14,960 --> 00:05:16,960
return or enter to go to the next line

148
00:05:16,960 --> 00:05:18,639
and this variable should be called

149
00:05:18,639 --> 00:05:21,360
computer choice and you should set it to

150
00:05:21,360 --> 00:05:22,400
equal

151
00:05:22,400 --> 00:05:24,320
paper

152
00:05:24,320 --> 00:05:25,759
okay so you can pause the video and see

153
00:05:25,759 --> 00:05:26,960
if you can make a variable called

154
00:05:26,960 --> 00:05:28,960
computer choice and set it to equal

155
00:05:28,960 --> 00:05:31,360
paper

156
00:05:31,440 --> 00:05:33,280
so here it's pretty simple here it's

157
00:05:33,280 --> 00:05:35,120
going to start simple but it's going to

158
00:05:35,120 --> 00:05:38,320
get harder as we go so computer choice

159
00:05:38,320 --> 00:05:40,000
equals

160
00:05:40,000 --> 00:05:42,560
paper okay so like i said it's starting

161
00:05:42,560 --> 00:05:43,840
simple but it's going to get more

162
00:05:43,840 --> 00:05:45,840
complex as we go along

163
00:05:45,840 --> 00:05:47,600
if you've done that you've now written

164
00:05:47,600 --> 00:05:49,360
your first line of python code in this

165
00:05:49,360 --> 00:05:50,560
course

166
00:05:50,560 --> 00:05:52,400
okay now i'm going to talk about

167
00:05:52,400 --> 00:05:53,680
functions

168
00:05:53,680 --> 00:05:56,400
a function is a set of code which only

169
00:05:56,400 --> 00:05:58,319
runs when it is called

170
00:05:58,319 --> 00:06:00,880
so i'm going to show you how to put this

171
00:06:00,880 --> 00:06:03,440
code into a function

172
00:06:03,440 --> 00:06:05,680
now one thing about python is that

173
00:06:05,680 --> 00:06:08,800
indentation is very important

174
00:06:08,800 --> 00:06:11,759
so after we create a we define the name

175
00:06:11,759 --> 00:06:14,000
of a function any line of code that's

176
00:06:14,000 --> 00:06:16,800
indented the same amount is considered

177
00:06:16,800 --> 00:06:18,800
within that function

178
00:06:18,800 --> 00:06:21,600
so i'm going to create a new line of

179
00:06:21,600 --> 00:06:24,880
code at the top and i'm going to call it

180
00:06:24,880 --> 00:06:26,400
get

181
00:06:26,400 --> 00:06:29,039
choices

182
00:06:31,360 --> 00:06:35,199
okay so we define the function with def

183
00:06:35,199 --> 00:06:37,440
and get choices and i'm going to select

184
00:06:37,440 --> 00:06:39,440
all these these two lines of code at the

185
00:06:39,440 --> 00:06:42,319
same time and just press the tab key and

186
00:06:42,319 --> 00:06:44,800
that's going to indent all these the

187
00:06:44,800 --> 00:06:46,479
same amount

188
00:06:46,479 --> 00:06:48,479
and you can see sometimes they'll be

189
00:06:48,479 --> 00:06:50,880
squiggly lines and if you hover over

190
00:06:50,880 --> 00:06:52,319
some of the squiggly lines it will tell

191
00:06:52,319 --> 00:06:54,160
you something in this case it just says

192
00:06:54,160 --> 00:06:56,160
the local variable called player choice

193
00:06:56,160 --> 00:06:59,360
is assigned to but never used that's not

194
00:06:59,360 --> 00:07:01,120
necessarily bad it's just it's just

195
00:07:01,120 --> 00:07:03,120
telling us that usually if you create a

196
00:07:03,120 --> 00:07:04,720
variable you're going to want to use it

197
00:07:04,720 --> 00:07:06,400
later well we are going to use it later

198
00:07:06,400 --> 00:07:08,479
we just haven't gotten to it yet so

199
00:07:08,479 --> 00:07:10,960
sometimes the squiggly lines will

200
00:07:10,960 --> 00:07:12,880
indicate there's some sort of error in

201
00:07:12,880 --> 00:07:13,840
the code

202
00:07:13,840 --> 00:07:16,240
usually i think it's the color red will

203
00:07:16,240 --> 00:07:17,919
indicate an error but if it's a

204
00:07:17,919 --> 00:07:19,840
different color it just may mean that

205
00:07:19,840 --> 00:07:21,680
there's something maybe not quite right

206
00:07:21,680 --> 00:07:22,880
but

207
00:07:22,880 --> 00:07:25,120
it's not really that big of a deal so if

208
00:07:25,120 --> 00:07:27,199
you have a variable that's assigned to

209
00:07:27,199 --> 00:07:29,280
but never used that's not going to stop

210
00:07:29,280 --> 00:07:30,400
your program

211
00:07:30,400 --> 00:07:32,639
but it's just saying that it's not this

212
00:07:32,639 --> 00:07:34,080
variable isn't really being used for

213
00:07:34,080 --> 00:07:36,240
anything yet but we will change that

214
00:07:36,240 --> 00:07:37,680
this function i'm going to show you how

215
00:07:37,680 --> 00:07:39,280
to call a function later but we're

216
00:07:39,280 --> 00:07:41,199
creating a function called getchoices

217
00:07:41,199 --> 00:07:45,280
that assigns these two variables and

218
00:07:45,280 --> 00:07:46,879
it's also i'm going to put another line

219
00:07:46,879 --> 00:07:49,520
at the very end here and it's a return

220
00:07:49,520 --> 00:07:51,599
statement

221
00:07:51,599 --> 00:07:55,039
and i'm going to return player

222
00:07:55,039 --> 00:07:56,160
choice

223
00:07:56,160 --> 00:07:58,319
this will indicate what's returned when

224
00:07:58,319 --> 00:08:00,319
this function is called so later we'll

225
00:08:00,319 --> 00:08:02,960
call this function get choices and it

226
00:08:02,960 --> 00:08:04,560
will return

227
00:08:04,560 --> 00:08:06,240
something it will return the player

228
00:08:06,240 --> 00:08:07,919
choice which is right here we'll turn in

229
00:08:07,919 --> 00:08:10,240
this case rock that we can use somewhere

230
00:08:10,240 --> 00:08:12,400
else in our code

231
00:08:12,400 --> 00:08:14,720
and i did just happen to put an extra

232
00:08:14,720 --> 00:08:16,080
line here

233
00:08:16,080 --> 00:08:18,240
that's just that's optional i put a

234
00:08:18,240 --> 00:08:20,560
blank line here just to kind of

235
00:08:20,560 --> 00:08:22,720
make things easy to kind of organize the

236
00:08:22,720 --> 00:08:24,879
code a little bit so

237
00:08:24,879 --> 00:08:26,240
different sometimes i'll just put an

238
00:08:26,240 --> 00:08:28,160
extra line between different sections of

239
00:08:28,160 --> 00:08:30,720
code and it just makes it easier to

240
00:08:30,720 --> 00:08:32,240
identify the different sections when

241
00:08:32,240 --> 00:08:33,839
you're looking at the code

242
00:08:33,839 --> 00:08:36,320
for the computer those extra lines don't

243
00:08:36,320 --> 00:08:39,039
mean anything the indentation though

244
00:08:39,039 --> 00:08:41,360
definitely does mean something

245
00:08:41,360 --> 00:08:43,679
so as long as every line of code is

246
00:08:43,679 --> 00:08:46,320
indented the same amount as the previous

247
00:08:46,320 --> 00:08:48,160
line of code then it's all within the

248
00:08:48,160 --> 00:08:49,680
same function

249
00:08:49,680 --> 00:08:51,600
okay so this is what i want you to do

250
00:08:51,600 --> 00:08:53,680
see if you can change the return

251
00:08:53,680 --> 00:08:55,760
statement so instead of returning player

252
00:08:55,760 --> 00:08:58,720
choice it's returning the computer

253
00:08:58,720 --> 00:09:01,120
choice

254
00:09:02,720 --> 00:09:04,399
so that's pretty simple

255
00:09:04,399 --> 00:09:06,399
it's now returning the computer choice

256
00:09:06,399 --> 00:09:07,680
here

257
00:09:07,680 --> 00:09:08,959
now i'm going to create another function

258
00:09:08,959 --> 00:09:11,200
down here this is just going to be an

259
00:09:11,200 --> 00:09:12,480
example function just so i can

260
00:09:12,480 --> 00:09:14,560
demonstrate something to you and then

261
00:09:14,560 --> 00:09:15,839
we'll delete it it's not going to be

262
00:09:15,839 --> 00:09:17,760
part of our rock paper scissors game but

263
00:09:17,760 --> 00:09:19,040
i'm going to create a new function

264
00:09:19,040 --> 00:09:20,959
called greeting

265
00:09:20,959 --> 00:09:23,519
and then i am going to add what it's

266
00:09:23,519 --> 00:09:25,440
going to do oh yeah put the semicolon

267
00:09:25,440 --> 00:09:27,680
you also know a colon so a function

268
00:09:27,680 --> 00:09:29,680
always has to have a colon at the end of

269
00:09:29,680 --> 00:09:33,040
how we define it so i'm going to return

270
00:09:33,040 --> 00:09:36,320
a string and it's just going to say hi

271
00:09:36,320 --> 00:09:38,000
and one thing you'll notice is that

272
00:09:38,000 --> 00:09:41,200
there's no you don't have to put any

273
00:09:41,200 --> 00:09:42,720
anything at the end of each line some

274
00:09:42,720 --> 00:09:45,040
programming languages such as javascript

275
00:09:45,040 --> 00:09:46,399
you're going to put a semicolon at the

276
00:09:46,399 --> 00:09:48,320
line at the end of the line

277
00:09:48,320 --> 00:09:50,160
but in python it doesn't matter you

278
00:09:50,160 --> 00:09:51,600
don't put anything at the end of each

279
00:09:51,600 --> 00:09:54,000
line so now i'm going to call the

280
00:09:54,000 --> 00:09:55,680
function to call the function i just

281
00:09:55,680 --> 00:09:58,160
type the name and i put the parentheses

282
00:09:58,160 --> 00:10:00,480
at the end so it's going to say so

283
00:10:00,480 --> 00:10:03,040
greeting is now going to call it's going

284
00:10:03,040 --> 00:10:04,640
to call this function and that's going

285
00:10:04,640 --> 00:10:06,480
to return the string hi

286
00:10:06,480 --> 00:10:08,079
now it's not going to do anything with

287
00:10:08,079 --> 00:10:10,560
the string because our program doesn't

288
00:10:10,560 --> 00:10:12,399
do anything with the string that's been

289
00:10:12,399 --> 00:10:14,399
returned it's not going to go into the

290
00:10:14,399 --> 00:10:16,959
console or anything but let's add

291
00:10:16,959 --> 00:10:20,079
additional code so we will

292
00:10:20,079 --> 00:10:23,760
make this string hi go on to the console

293
00:10:23,760 --> 00:10:26,880
first let me create a variable that

294
00:10:26,880 --> 00:10:28,880
takes what this greeting function

295
00:10:28,880 --> 00:10:32,320
returns so i'm going to type in response

296
00:10:32,320 --> 00:10:35,519
equals greeting so now we set the the

297
00:10:35,519 --> 00:10:37,519
what greeting is being returned to this

298
00:10:37,519 --> 00:10:40,160
variable called response and now i can

299
00:10:40,160 --> 00:10:42,800
use the print function

300
00:10:42,800 --> 00:10:45,440
and i can print the response and this

301
00:10:45,440 --> 00:10:48,079
will print it to the console so now i

302
00:10:48,079 --> 00:10:49,920
can we have this green button here this

303
00:10:49,920 --> 00:10:51,600
runs the program i'll click this green

304
00:10:51,600 --> 00:10:54,640
button here and now we can see it's high

305
00:10:54,640 --> 00:10:55,440
so

306
00:10:55,440 --> 00:10:57,920
this response is getting this high from

307
00:10:57,920 --> 00:10:59,760
here and then we're printing it right

308
00:10:59,760 --> 00:11:02,000
there okay i'm actually going to delete

309
00:11:02,000 --> 00:11:04,640
all of this

310
00:11:04,800 --> 00:11:07,519
and what i want you to try to do now is

311
00:11:07,519 --> 00:11:10,160
to call the get choices function and

312
00:11:10,160 --> 00:11:12,720
store the response in a variable called

313
00:11:12,720 --> 00:11:15,200
choices and then print the value of

314
00:11:15,200 --> 00:11:17,200
choices to the console

315
00:11:17,200 --> 00:11:18,720
so you can pause and try that really

316
00:11:18,720 --> 00:11:20,640
quick and then i'm going to show you how

317
00:11:20,640 --> 00:11:22,560
okay so remember the variable is called

318
00:11:22,560 --> 00:11:24,160
choices

319
00:11:24,160 --> 00:11:26,640
and we're going to set that equal to

320
00:11:26,640 --> 00:11:29,839
the get choices variable now ins or the

321
00:11:29,839 --> 00:11:31,600
get choices function now instead of

322
00:11:31,600 --> 00:11:34,560
typing out get choices you can see that

323
00:11:34,560 --> 00:11:37,120
this code editor is actually giving us

324
00:11:37,120 --> 00:11:39,839
suggestions on what we want to put in

325
00:11:39,839 --> 00:11:42,240
here so i just typed in get and you can

326
00:11:42,240 --> 00:11:44,000
see it's now saying get choices right

327
00:11:44,000 --> 00:11:45,760
here so i can instead of typing out the

328
00:11:45,760 --> 00:11:48,240
whole thing i can either click there or

329
00:11:48,240 --> 00:11:50,000
i can just press the tab key and it's

330
00:11:50,000 --> 00:11:51,360
going to fill in the rest of that

331
00:11:51,360 --> 00:11:53,279
function name so that's just something

332
00:11:53,279 --> 00:11:56,000
little that makes it easier to write a

333
00:11:56,000 --> 00:11:57,760
program and you don't have to type out

334
00:11:57,760 --> 00:11:59,519
every single thing so if you've already

335
00:11:59,519 --> 00:12:02,480
created a function or a variable then

336
00:12:02,480 --> 00:12:05,040
the the code editor then reply will will

337
00:12:05,040 --> 00:12:07,519
suggest what you may want to fill in

338
00:12:07,519 --> 00:12:09,839
when you're typing and most other code

339
00:12:09,839 --> 00:12:12,000
editors do something similar it's called

340
00:12:12,000 --> 00:12:14,079
code completion so

341
00:12:14,079 --> 00:12:15,920
i'm going to but i still have to add

342
00:12:15,920 --> 00:12:18,560
parentheses at the end and now i'm going

343
00:12:18,560 --> 00:12:20,000
to print

344
00:12:20,000 --> 00:12:21,160
the choices

345
00:12:21,160 --> 00:12:22,800
[Music]

346
00:12:22,800 --> 00:12:25,440
okay so i'm gonna just click this play

347
00:12:25,440 --> 00:12:27,680
button to make sure it does what we're

348
00:12:27,680 --> 00:12:30,399
trying to do yep it clicked paper

349
00:12:30,399 --> 00:12:31,760
great

350
00:12:31,760 --> 00:12:33,920
now let's talk about dictionaries

351
00:12:33,920 --> 00:12:36,480
dictionaries in python are used to store

352
00:12:36,480 --> 00:12:40,079
data values in key value pairs so let me

353
00:12:40,079 --> 00:12:43,200
just show you an example

354
00:12:45,040 --> 00:12:46,720
okay so a dictionary is going to have

355
00:12:46,720 --> 00:12:48,480
these curly braces at the beginning and

356
00:12:48,480 --> 00:12:51,440
end and then here's a key value pair

357
00:12:51,440 --> 00:12:53,360
there's one it's separated by a comma

358
00:12:53,360 --> 00:12:55,440
and then here's another key value pair

359
00:12:55,440 --> 00:12:58,240
so we're setting name

360
00:12:58,240 --> 00:13:00,000
we're setting that to equal bow and

361
00:13:00,000 --> 00:13:01,600
we're saying the color

362
00:13:01,600 --> 00:13:05,040
to equal blue so here's the key here's

363
00:13:05,040 --> 00:13:07,040
the value here's the key

364
00:13:07,040 --> 00:13:08,480
here's the value

365
00:13:08,480 --> 00:13:11,200
and the key or the value in a dictionary

366
00:13:11,200 --> 00:13:12,639
can be a variable

367
00:13:12,639 --> 00:13:15,600
like the color we could set that we

368
00:13:15,600 --> 00:13:17,360
already created this variable here i'm

369
00:13:17,360 --> 00:13:19,920
just going to copy the word choices and

370
00:13:19,920 --> 00:13:21,680
we can put choices and you can see now

371
00:13:21,680 --> 00:13:23,920
it's not surrounded by the quotation

372
00:13:23,920 --> 00:13:26,000
marks so if you surrounded by quotation

373
00:13:26,000 --> 00:13:27,760
marks it's a string but if we don't

374
00:13:27,760 --> 00:13:30,079
surround it by quotation marks it's

375
00:13:30,079 --> 00:13:32,720
getting the the variable here choices so

376
00:13:32,720 --> 00:13:35,279
this would be set to

377
00:13:35,279 --> 00:13:37,200
paper because that's what choice is

378
00:13:37,200 --> 00:13:38,880
going to is going to equal so we're

379
00:13:38,880 --> 00:13:40,240
about to delete this line because that

380
00:13:40,240 --> 00:13:41,680
was just an example

381
00:13:41,680 --> 00:13:44,240
but now before the return statement in

382
00:13:44,240 --> 00:13:46,000
this function we're going to add a new

383
00:13:46,000 --> 00:13:48,399
line we're going to create a variable

384
00:13:48,399 --> 00:13:50,720
named choices and make it equal to a

385
00:13:50,720 --> 00:13:53,360
dictionary the first key should be

386
00:13:53,360 --> 00:13:56,800
player with a value of the player choice

387
00:13:56,800 --> 00:13:58,480
actually this variable here

388
00:13:58,480 --> 00:14:01,279
the second key should be computer with a

389
00:14:01,279 --> 00:14:03,760
value of computer choice

390
00:14:03,760 --> 00:14:05,440
and then we're going to update the

391
00:14:05,440 --> 00:14:07,199
return statement

392
00:14:07,199 --> 00:14:10,480
to return the the choices dictionary

393
00:14:10,480 --> 00:14:12,480
now i'm not going to keep telling you to

394
00:14:12,480 --> 00:14:14,720
pause and try it yourself so just the

395
00:14:14,720 --> 00:14:16,480
rest of this time whenever i say what

396
00:14:16,480 --> 00:14:18,639
we're going to do you'll know that after

397
00:14:18,639 --> 00:14:20,160
i get done explaining it you can pause

398
00:14:20,160 --> 00:14:22,399
it and try it yourself but that's what

399
00:14:22,399 --> 00:14:25,040
we're going to do now

400
00:14:26,000 --> 00:14:29,279
so i'm going to create choices

401
00:14:29,279 --> 00:14:31,519
and it's going to be a dictionary and

402
00:14:31,519 --> 00:14:33,600
then it's going to have

403
00:14:33,600 --> 00:14:35,279
a player

404
00:14:35,279 --> 00:14:37,600
that's the key and the value is going to

405
00:14:37,600 --> 00:14:39,040
be player

406
00:14:39,040 --> 00:14:40,880
choice and i was just able to press tab

407
00:14:40,880 --> 00:14:43,199
to fill that in and then we're going to

408
00:14:43,199 --> 00:14:44,800
have computer

409
00:14:44,800 --> 00:14:46,800
and it's going to be

410
00:14:46,800 --> 00:14:49,839
computer choice

411
00:14:49,839 --> 00:14:51,839
and you can see sometimes if it goes to

412
00:14:51,839 --> 00:14:53,519
the next line there just won't be a line

413
00:14:53,519 --> 00:14:54,800
number right here

414
00:14:54,800 --> 00:14:56,560
but i can

415
00:14:56,560 --> 00:14:59,040
move this over for now

416
00:14:59,040 --> 00:15:02,320
and then i am going to oh i forgot to

417
00:15:02,320 --> 00:15:04,480
put the equal sign that's what that red

418
00:15:04,480 --> 00:15:06,720
squiggly line means so because the red

419
00:15:06,720 --> 00:15:08,639
means there is a problem in the program

420
00:15:08,639 --> 00:15:09,920
so it's not going to run correctly now

421
00:15:09,920 --> 00:15:11,760
the orange just means that we haven't

422
00:15:11,760 --> 00:15:14,079
used choices yet which we will right now

423
00:15:14,079 --> 00:15:15,760
because we're going to return

424
00:15:15,760 --> 00:15:17,760
choices

425
00:15:17,760 --> 00:15:20,760
choices

426
00:15:21,120 --> 00:15:23,199
okay so now we don't have any squiggly

427
00:15:23,199 --> 00:15:25,120
lines because we're using every variable

428
00:15:25,120 --> 00:15:26,959
that we created and we're returning

429
00:15:26,959 --> 00:15:29,279
choices here

430
00:15:29,279 --> 00:15:31,440
so you may have noticed that player

431
00:15:31,440 --> 00:15:32,480
choice

432
00:15:32,480 --> 00:15:34,320
it does not actually get set to the

433
00:15:34,320 --> 00:15:36,880
player's actual choice

434
00:15:36,880 --> 00:15:38,720
so let's fix that

435
00:15:38,720 --> 00:15:41,440
the input function gets input from a

436
00:15:41,440 --> 00:15:44,320
user and will use it to get the player's

437
00:15:44,320 --> 00:15:45,600
choice

438
00:15:45,600 --> 00:15:47,680
so instead of having players choice

439
00:15:47,680 --> 00:15:49,920
equal rock we're going to make players

440
00:15:49,920 --> 00:15:53,199
choice input

441
00:15:53,279 --> 00:15:56,800
enter a choice

442
00:15:58,800 --> 00:15:59,839
rock

443
00:15:59,839 --> 00:16:01,040
paper

444
00:16:01,040 --> 00:16:04,040
scissors

445
00:16:04,639 --> 00:16:06,880
okay so this is how you get input from a

446
00:16:06,880 --> 00:16:09,440
user we use the input function and this

447
00:16:09,440 --> 00:16:10,560
is going to be something that's going to

448
00:16:10,560 --> 00:16:11,839
be printed

449
00:16:11,839 --> 00:16:13,839
we'll print to the console here

450
00:16:13,839 --> 00:16:16,240
and whatever the result of this input

451
00:16:16,240 --> 00:16:18,240
will be that the the player that the

452
00:16:18,240 --> 00:16:20,560
user entered will get stored to this

453
00:16:20,560 --> 00:16:22,959
variable which we then can use later in

454
00:16:22,959 --> 00:16:24,639
our program

455
00:16:24,639 --> 00:16:26,399
so let's just try that out i'll click

456
00:16:26,399 --> 00:16:27,279
run

457
00:16:27,279 --> 00:16:29,600
and

458
00:16:29,839 --> 00:16:31,440
enter

459
00:16:31,440 --> 00:16:33,440
let me just stop and run it again

460
00:16:33,440 --> 00:16:35,360
okay enter a choice rock paper scissors

461
00:16:35,360 --> 00:16:37,759
i'll just put rock

462
00:16:37,759 --> 00:16:39,920
and now you can see the player's choice

463
00:16:39,920 --> 00:16:42,000
we're still printing that and it's going

464
00:16:42,000 --> 00:16:44,959
to print as rock

465
00:16:44,959 --> 00:16:47,519
great now let's just clean up this code

466
00:16:47,519 --> 00:16:49,279
a little bit we still have this here we

467
00:16:49,279 --> 00:16:50,560
don't need that dictionary that's not

468
00:16:50,560 --> 00:16:52,480
going to be part of our final code

469
00:16:52,480 --> 00:16:54,000
and now we'll make it so the computer

470
00:16:54,000 --> 00:16:55,839
can actually make a choice

471
00:16:55,839 --> 00:16:57,519
so we're going to learn about importing

472
00:16:57,519 --> 00:17:00,399
libraries creating lists and calling

473
00:17:00,399 --> 00:17:01,680
methods

474
00:17:01,680 --> 00:17:03,279
python libraries are a set of useful

475
00:17:03,279 --> 00:17:04,959
functions so you don't have to write

476
00:17:04,959 --> 00:17:06,880
code from scratch when you import a

477
00:17:06,880 --> 00:17:09,119
library to your program you get access

478
00:17:09,119 --> 00:17:10,640
to more features without writing

479
00:17:10,640 --> 00:17:12,000
additional code

480
00:17:12,000 --> 00:17:14,160
with basic python it's challenging to

481
00:17:14,160 --> 00:17:16,000
get your program to do something

482
00:17:16,000 --> 00:17:18,079
randomly but it's easy to choose

483
00:17:18,079 --> 00:17:20,400
something randomly using the random

484
00:17:20,400 --> 00:17:21,839
library

485
00:17:21,839 --> 00:17:24,319
so let me show you how we can import the

486
00:17:24,319 --> 00:17:26,000
random library

487
00:17:26,000 --> 00:17:28,160
import statements are used to import

488
00:17:28,160 --> 00:17:29,760
libraries and they're usually put at the

489
00:17:29,760 --> 00:17:32,480
top of a program so i'm going to press

490
00:17:32,480 --> 00:17:34,240
enter a few times here to add some lines

491
00:17:34,240 --> 00:17:36,960
at the top and i'm going to do import

492
00:17:36,960 --> 00:17:38,000
random

493
00:17:38,000 --> 00:17:40,160
so now we are going we we've

494
00:17:40,160 --> 00:17:43,280
imported the random library

495
00:17:43,280 --> 00:17:44,720
so we're going to use that random

496
00:17:44,720 --> 00:17:47,280
library soon but now let's learn about

497
00:17:47,280 --> 00:17:48,320
lists

498
00:17:48,320 --> 00:17:50,240
a list in python is used to store

499
00:17:50,240 --> 00:17:53,039
multiple items in a single variable

500
00:17:53,039 --> 00:17:54,559
lists are surrounded by brackets and

501
00:17:54,559 --> 00:17:56,480
each item is separated by a comma so

502
00:17:56,480 --> 00:17:58,960
here's an example i could create a

503
00:17:58,960 --> 00:18:00,640
variable called food and set it to this

504
00:18:00,640 --> 00:18:02,799
list it's going to have three items

505
00:18:02,799 --> 00:18:05,280
pizza

506
00:18:06,240 --> 00:18:07,760
carrots

507
00:18:07,760 --> 00:18:09,180
and eggs

508
00:18:09,180 --> 00:18:10,960
[Music]

509
00:18:10,960 --> 00:18:15,679
so this is a list of strings

510
00:18:15,679 --> 00:18:17,520
and then you can also get a random item

511
00:18:17,520 --> 00:18:19,039
from the list

512
00:18:19,039 --> 00:18:21,039
using we're going to use now we've

513
00:18:21,039 --> 00:18:23,200
imported random we can get a random item

514
00:18:23,200 --> 00:18:26,400
by using that that random library so i'm

515
00:18:26,400 --> 00:18:28,600
going to put dinner

516
00:18:28,600 --> 00:18:29,760
[Music]

517
00:18:29,760 --> 00:18:30,880
equals

518
00:18:30,880 --> 00:18:33,760
random dot choice

519
00:18:33,760 --> 00:18:36,240
and then i'm going to pass in the the

520
00:18:36,240 --> 00:18:37,520
list here

521
00:18:37,520 --> 00:18:40,480
so using the random library we can call

522
00:18:40,480 --> 00:18:43,440
choice and then we can pass in

523
00:18:43,440 --> 00:18:45,679
a list and it's going to choose a random

524
00:18:45,679 --> 00:18:47,919
item from that list and

525
00:18:47,919 --> 00:18:52,000
and set it to equal this dinner variable

526
00:18:52,000 --> 00:18:54,840
so right now the computer choice always

527
00:18:54,840 --> 00:18:57,600
equals paper but we want it to be a

528
00:18:57,600 --> 00:18:59,440
random choice between rock scissors and

529
00:18:59,440 --> 00:19:01,200
paper

530
00:19:01,200 --> 00:19:02,799
so before the computer choice variable

531
00:19:02,799 --> 00:19:05,120
is created we'll create a new variable

532
00:19:05,120 --> 00:19:07,919
called options and assign it to a list

533
00:19:07,919 --> 00:19:10,000
of the possible options rock paper

534
00:19:10,000 --> 00:19:11,919
scissors then we'll set the computer

535
00:19:11,919 --> 00:19:14,320
choice variable to be a random choice of

536
00:19:14,320 --> 00:19:18,960
one of the items in the options list

537
00:19:18,960 --> 00:19:20,720
okay i hope you already tried this now

538
00:19:20,720 --> 00:19:22,400
but let me show you how that's going to

539
00:19:22,400 --> 00:19:24,400
work

540
00:19:24,400 --> 00:19:27,120
we'll create options

541
00:19:27,120 --> 00:19:29,840
and we'll set it equal to this list

542
00:19:29,840 --> 00:19:31,200
of

543
00:19:31,200 --> 00:19:33,520
rock

544
00:19:34,040 --> 00:19:36,840
[Music]

545
00:19:36,840 --> 00:19:39,120
paper scissors

546
00:19:39,120 --> 00:19:40,960
and you can see the code editor will

547
00:19:40,960 --> 00:19:43,360
often pop up these boxes with more

548
00:19:43,360 --> 00:19:45,600
information about what we're doing to

549
00:19:45,600 --> 00:19:48,080
give us some some help with what we're

550
00:19:48,080 --> 00:19:50,240
trying to do here so we're going to set

551
00:19:50,240 --> 00:19:52,799
this computer choice to be

552
00:19:52,799 --> 00:19:54,080
random

553
00:19:54,080 --> 00:19:56,320
dot choice

554
00:19:56,320 --> 00:19:59,039
food not food i was looking at the food

555
00:19:59,039 --> 00:20:02,480
down there that's gonna be options

556
00:20:02,799 --> 00:20:04,320
there we go

557
00:20:04,320 --> 00:20:07,760
and let's just um try running this

558
00:20:07,760 --> 00:20:10,799
program and seeing what happens so i'm

559
00:20:10,799 --> 00:20:12,640
going to put rock

560
00:20:12,640 --> 00:20:14,720
and then we see the computer chose

561
00:20:14,720 --> 00:20:16,960
scissor it should be scissors that's why

562
00:20:16,960 --> 00:20:19,520
we're testing it out i guess i

563
00:20:19,520 --> 00:20:22,480
spelled that wrong okay so scissors with

564
00:20:22,480 --> 00:20:26,240
an s so now let me try running it again

565
00:20:26,240 --> 00:20:28,559
and you can see it shows scissors but if

566
00:20:28,559 --> 00:20:30,400
we run it enough time it should now it's

567
00:20:30,400 --> 00:20:32,159
choosing paper because it's choosing it

568
00:20:32,159 --> 00:20:33,440
at random

569
00:20:33,440 --> 00:20:34,480
okay

570
00:20:34,480 --> 00:20:36,799
that's working

571
00:20:36,799 --> 00:20:39,360
okay so now let's just delete all this

572
00:20:39,360 --> 00:20:41,280
code after the get choices function we

573
00:20:41,280 --> 00:20:42,799
don't need to test that get choices

574
00:20:42,799 --> 00:20:45,200
function anymore and now

575
00:20:45,200 --> 00:20:48,480
let's create a new function called check

576
00:20:48,480 --> 00:20:50,159
when

577
00:20:50,159 --> 00:20:51,679
so you shouldn't know enough how to you

578
00:20:51,679 --> 00:20:53,600
should know enough about how to create a

579
00:20:53,600 --> 00:20:54,559
function

580
00:20:54,559 --> 00:20:55,840
so def

581
00:20:55,840 --> 00:20:58,080
check

582
00:20:58,380 --> 00:20:59,760
[Music]

583
00:20:59,760 --> 00:21:00,640
when

584
00:21:00,640 --> 00:21:02,480
so this is just an empty function with

585
00:21:02,480 --> 00:21:04,240
nothing inside it yet

586
00:21:04,240 --> 00:21:07,360
but before we add oh with the

587
00:21:07,360 --> 00:21:10,080
colon so before we add any code inside

588
00:21:10,080 --> 00:21:12,559
the function we're going to create some

589
00:21:12,559 --> 00:21:15,039
arguments

590
00:21:15,039 --> 00:21:17,039
function can re functions can receive

591
00:21:17,039 --> 00:21:19,039
data when they're called the data are

592
00:21:19,039 --> 00:21:20,720
called arguments so when creating a

593
00:21:20,720 --> 00:21:22,320
function you can specify arguments

594
00:21:22,320 --> 00:21:24,000
inside the parentheses so we've been

595
00:21:24,000 --> 00:21:26,720
using this empty parentheses but i can

596
00:21:26,720 --> 00:21:29,200
uh put in tooth i can put in things

597
00:21:29,200 --> 00:21:31,600
within these parentheses

598
00:21:31,600 --> 00:21:33,760
when this function is called we're going

599
00:21:33,760 --> 00:21:36,240
to give it two pieces of data we're

600
00:21:36,240 --> 00:21:38,559
going to pass two pieces of data into

601
00:21:38,559 --> 00:21:41,280
the function the first piece of data is

602
00:21:41,280 --> 00:21:43,520
going to be player the second piece of

603
00:21:43,520 --> 00:21:45,360
data is going to be computer

604
00:21:45,360 --> 00:21:47,840
so the you can basically call these

605
00:21:47,840 --> 00:21:50,880
anything you want uh these are just

606
00:21:50,880 --> 00:21:53,120
we're creating new variables but when we

607
00:21:53,120 --> 00:21:55,679
call these functions we'll pass in two

608
00:21:55,679 --> 00:21:57,760
pieces of information that will then be

609
00:21:57,760 --> 00:22:00,320
assigned to the variable names player

610
00:22:00,320 --> 00:22:03,280
and computer that we can use inside the

611
00:22:03,280 --> 00:22:04,480
function

612
00:22:04,480 --> 00:22:06,159
so for now let's

613
00:22:06,159 --> 00:22:08,159
finish off with to a for a complete

614
00:22:08,159 --> 00:22:10,080
function the function has to have some

615
00:22:10,080 --> 00:22:11,760
code within the function

616
00:22:11,760 --> 00:22:13,679
so let's just add a return statement

617
00:22:13,679 --> 00:22:16,159
that's just going to return a list

618
00:22:16,159 --> 00:22:18,559
containing the elements player and

619
00:22:18,559 --> 00:22:21,120
computer

620
00:22:22,080 --> 00:22:23,679
so this check when function shouldn't

621
00:22:23,679 --> 00:22:25,440
actually return this

622
00:22:25,440 --> 00:22:27,200
this is just to kind of get get it

623
00:22:27,200 --> 00:22:29,200
quickly created it should actually

624
00:22:29,200 --> 00:22:31,440
return different things depending on the

625
00:22:31,440 --> 00:22:34,080
player and computer arguments

626
00:22:34,080 --> 00:22:36,640
an if statement will allow a program to

627
00:22:36,640 --> 00:22:38,480
do different things depending on certain

628
00:22:38,480 --> 00:22:39,679
conditions

629
00:22:39,679 --> 00:22:41,520
so an if statement will first check a

630
00:22:41,520 --> 00:22:43,840
condition and if the condition is true

631
00:22:43,840 --> 00:22:46,000
then all the lines of code under the if

632
00:22:46,000 --> 00:22:47,840
statement that are indented the same

633
00:22:47,840 --> 00:22:50,320
amount will execute so as a quick

634
00:22:50,320 --> 00:22:52,880
example i can say

635
00:22:52,880 --> 00:22:54,880
a equals three

636
00:22:54,880 --> 00:22:56,799
b equals five

637
00:22:56,799 --> 00:22:58,799
and then we can create an if statement

638
00:22:58,799 --> 00:22:59,679
here

639
00:22:59,679 --> 00:23:00,640
if

640
00:23:00,640 --> 00:23:03,520
a is greater than

641
00:23:03,520 --> 00:23:04,720
b

642
00:23:04,720 --> 00:23:09,480
then we will do something like print

643
00:23:11,360 --> 00:23:12,640
yes

644
00:23:12,640 --> 00:23:14,960
or we can do if a is

645
00:23:14,960 --> 00:23:17,760
less than b or we can do if we want to

646
00:23:17,760 --> 00:23:20,640
check if a and b are equal we can do

647
00:23:20,640 --> 00:23:23,200
eq we we'll put two equal signs now this

648
00:23:23,200 --> 00:23:24,720
is very important you never want to use

649
00:23:24,720 --> 00:23:27,200
one equal sign because a single equal

650
00:23:27,200 --> 00:23:29,520
sign is the assignment operator that's

651
00:23:29,520 --> 00:23:31,679
how you assign what variables are equal

652
00:23:31,679 --> 00:23:34,559
to so if you use a single equal sign or

653
00:23:34,559 --> 00:23:37,840
like then if i put if a single equal

654
00:23:37,840 --> 00:23:40,480
sign b without a double equal sign that

655
00:23:40,480 --> 00:23:42,080
is going to

656
00:23:42,080 --> 00:23:44,880
set a to equal b which is not what we

657
00:23:44,880 --> 00:23:47,440
want the double equal sign

658
00:23:47,440 --> 00:23:50,080
is going to check if a and b are the

659
00:23:50,080 --> 00:23:52,240
same value basically it checks if two

660
00:23:52,240 --> 00:23:55,039
values values are equal now you can also

661
00:23:55,039 --> 00:23:55,919
do

662
00:23:55,919 --> 00:23:57,919
a not equal so if you use the

663
00:23:57,919 --> 00:24:00,400
exclamation point that's not equal or

664
00:24:00,400 --> 00:24:02,400
you can use

665
00:24:02,400 --> 00:24:05,279
less than or equal to or you can do more

666
00:24:05,279 --> 00:24:06,799
than or equal to

667
00:24:06,799 --> 00:24:08,400
so i'm just going to delete all this for

668
00:24:08,400 --> 00:24:09,520
now

669
00:24:09,520 --> 00:24:11,200
so now we're going to update this risk

670
00:24:11,200 --> 00:24:13,600
turn statement uh before the return

671
00:24:13,600 --> 00:24:15,840
statement we want to we're going to

672
00:24:15,840 --> 00:24:20,320
check if player if player equals

673
00:24:20,320 --> 00:24:21,919
computer

674
00:24:21,919 --> 00:24:25,440
and if so if true will return the string

675
00:24:25,440 --> 00:24:28,080
it's a tie

676
00:24:28,080 --> 00:24:31,600
so let's do that if player

677
00:24:31,600 --> 00:24:33,600
equals computer and this is something

678
00:24:33,600 --> 00:24:35,679
that maybe you figured out yourself

679
00:24:35,679 --> 00:24:38,400
before you before you're watching this

680
00:24:38,400 --> 00:24:40,640
will return a string and the string is

681
00:24:40,640 --> 00:24:42,000
going to be

682
00:24:42,000 --> 00:24:45,960
it's a tie

683
00:24:46,480 --> 00:24:50,000
okay so now it's only going to return so

684
00:24:50,000 --> 00:24:52,000
a function does not have to return

685
00:24:52,000 --> 00:24:53,039
something

686
00:24:53,039 --> 00:24:55,039
and for this function it's only going to

687
00:24:55,039 --> 00:24:56,559
return something

688
00:24:56,559 --> 00:24:58,320
if this is true if player equals

689
00:24:58,320 --> 00:24:59,520
computer

690
00:24:59,520 --> 00:25:02,799
if not it won't return anything and just

691
00:25:02,799 --> 00:25:05,520
to make make you notice this see

692
00:25:05,520 --> 00:25:06,640
this

693
00:25:06,640 --> 00:25:09,120
line is indented within the if statement

694
00:25:09,120 --> 00:25:13,200
which is indented within this function

695
00:25:13,200 --> 00:25:15,520
and just really quick thing to note

696
00:25:15,520 --> 00:25:17,600
for a return statement parentheses are

697
00:25:17,600 --> 00:25:19,919
optional so i could also

698
00:25:19,919 --> 00:25:22,320
add parentheses like that but you don't

699
00:25:22,320 --> 00:25:24,960
need them but for now i'm just gonna get

700
00:25:24,960 --> 00:25:26,760
rid of them

701
00:25:26,760 --> 00:25:28,080
[Music]

702
00:25:28,080 --> 00:25:30,000
so currently when there's a tie the

703
00:25:30,000 --> 00:25:32,480
program now returns it's a tie

704
00:25:32,480 --> 00:25:35,039
but how does the player know that's true

705
00:25:35,039 --> 00:25:36,880
now let's have the program print which

706
00:25:36,880 --> 00:25:39,039
options that the player and the computer

707
00:25:39,039 --> 00:25:40,400
chose

708
00:25:40,400 --> 00:25:43,200
you can concatenate strings with the

709
00:25:43,200 --> 00:25:44,960
plus operator

710
00:25:44,960 --> 00:25:47,120
that just means you can combine strings

711
00:25:47,120 --> 00:25:49,440
with other strings or strings with

712
00:25:49,440 --> 00:25:50,880
variables

713
00:25:50,880 --> 00:25:53,440
so let me show you how you can print

714
00:25:53,440 --> 00:25:56,559
which options were chosen so i'm going

715
00:25:56,559 --> 00:25:59,279
to print

716
00:26:00,559 --> 00:26:03,760
you chose

717
00:26:04,960 --> 00:26:07,840
and then i'll put player so you chose

718
00:26:07,840 --> 00:26:09,360
and then we have to add a space here

719
00:26:09,360 --> 00:26:10,960
because it's going to print a space and

720
00:26:10,960 --> 00:26:13,679
then it will choose it will print this

721
00:26:13,679 --> 00:26:16,240
so if the player chose rock we'll say

722
00:26:16,240 --> 00:26:18,159
you chose rock

723
00:26:18,159 --> 00:26:20,880
and then we can concave so we

724
00:26:20,880 --> 00:26:22,720
concatenated these together but we can

725
00:26:22,720 --> 00:26:24,559
add another plus sign

726
00:26:24,559 --> 00:26:27,039
and put another string here and it's

727
00:26:27,039 --> 00:26:28,080
going to say

728
00:26:28,080 --> 00:26:30,559
computer chose oh it's like being

729
00:26:30,559 --> 00:26:34,720
covered up here by everything computer

730
00:26:36,960 --> 00:26:40,640
computer chose

731
00:26:42,240 --> 00:26:44,080
now i'm just about to type it in but see

732
00:26:44,080 --> 00:26:46,000
if you can figure out what to add at the

733
00:26:46,000 --> 00:26:47,760
end here to put in what the computer

734
00:26:47,760 --> 00:26:50,760
chose

735
00:26:52,000 --> 00:26:53,679
so computer chose

736
00:26:53,679 --> 00:26:55,520
computer or the the value of this

737
00:26:55,520 --> 00:26:58,240
variable here

738
00:26:58,960 --> 00:26:59,919
so

739
00:26:59,919 --> 00:27:02,000
a lot of times when with programming

740
00:27:02,000 --> 00:27:05,120
there's a bunch of ways to do the same

741
00:27:05,120 --> 00:27:08,400
thing so this is one way to combine

742
00:27:08,400 --> 00:27:10,960
strings and variables together there's

743
00:27:10,960 --> 00:27:13,440
another way that's a little simpler

744
00:27:13,440 --> 00:27:15,840
called an f string

745
00:27:15,840 --> 00:27:17,840
so an f string will allow you to make

746
00:27:17,840 --> 00:27:20,000
strings with and with variables and

747
00:27:20,000 --> 00:27:21,520
other python code

748
00:27:21,520 --> 00:27:25,200
so to do that you just put a variable or

749
00:27:25,200 --> 00:27:26,960
you just put f at the beginning of a

750
00:27:26,960 --> 00:27:29,039
string so let me just give you an

751
00:27:29,039 --> 00:27:32,240
example so we do age equals 25 we're

752
00:27:32,240 --> 00:27:33,919
going to create a variable and then i'm

753
00:27:33,919 --> 00:27:35,440
going to make an f string we'll make it

754
00:27:35,440 --> 00:27:37,600
a print statement and i'm going to put a

755
00:27:37,600 --> 00:27:39,360
string in here but instead of starting

756
00:27:39,360 --> 00:27:40,480
with a quotation mark it's going to

757
00:27:40,480 --> 00:27:41,760
start with an f

758
00:27:41,760 --> 00:27:44,159
and then i'm going to put gem is and

759
00:27:44,159 --> 00:27:46,320
then whenever you want to put a variable

760
00:27:46,320 --> 00:27:47,840
or any kind of python code we're going

761
00:27:47,840 --> 00:27:50,080
to put some curly braces and i'm just

762
00:27:50,080 --> 00:27:52,240
going to put the variable within the

763
00:27:52,240 --> 00:27:53,760
curly braces

764
00:27:53,760 --> 00:27:56,720
so years old and i'll put the end of the

765
00:27:56,720 --> 00:27:57,600
string

766
00:27:57,600 --> 00:28:00,559
or let me put a

767
00:28:00,559 --> 00:28:01,760
period here

768
00:28:01,760 --> 00:28:04,720
okay so gem is

769
00:28:04,720 --> 00:28:08,000
age which is going to be 25 years old so

770
00:28:08,000 --> 00:28:10,799
the f string is just a slightly simpler

771
00:28:10,799 --> 00:28:13,279
way to combine the strings and the

772
00:28:13,279 --> 00:28:16,240
variables so what i want you to do see

773
00:28:16,240 --> 00:28:17,919
if you can figure out how to update this

774
00:28:17,919 --> 00:28:20,799
line right here so it uses an f string

775
00:28:20,799 --> 00:28:22,640
and it uses these curly braces instead

776
00:28:22,640 --> 00:28:26,080
of all these pluses up there

777
00:28:28,320 --> 00:28:30,640
so yeah we're going to put f and i can

778
00:28:30,640 --> 00:28:32,080
delete

779
00:28:32,080 --> 00:28:34,480
a lot of these

780
00:28:34,480 --> 00:28:36,700
things here

781
00:28:36,700 --> 00:28:40,240
[Music]

782
00:28:40,240 --> 00:28:41,919
and then i'm going to put some curly

783
00:28:41,919 --> 00:28:46,720
braces you chose player

784
00:28:47,360 --> 00:28:49,279
there we go okay you cho there was a

785
00:28:49,279 --> 00:28:51,279
comma here you chose player computer

786
00:28:51,279 --> 00:28:53,039
chose

787
00:28:53,039 --> 00:28:55,600
computer

788
00:28:56,720 --> 00:28:58,799
okay so now we've been able to put in

789
00:28:58,799 --> 00:29:01,279
the variable within this string with the

790
00:29:01,279 --> 00:29:03,840
f string

791
00:29:06,480 --> 00:29:09,679
so we're going to test this out uh so

792
00:29:09,679 --> 00:29:11,279
in a code

793
00:29:11,279 --> 00:29:14,880
the code in this function never gets run

794
00:29:14,880 --> 00:29:17,120
so when we press the run button it's not

795
00:29:17,120 --> 00:29:18,640
going to run any of the code within the

796
00:29:18,640 --> 00:29:21,840
function unless the function is called

797
00:29:21,840 --> 00:29:23,440
within the program

798
00:29:23,440 --> 00:29:24,399
so

799
00:29:24,399 --> 00:29:25,600
we're not going to test out this

800
00:29:25,600 --> 00:29:27,440
function all right now what i want you

801
00:29:27,440 --> 00:29:30,000
to do is see if you can add a line to

802
00:29:30,000 --> 00:29:32,320
call the check when function and then

803
00:29:32,320 --> 00:29:36,799
just call it with uh rock and paper

804
00:29:37,440 --> 00:29:38,840
so we're going to just do

805
00:29:38,840 --> 00:29:41,279
check when

806
00:29:41,279 --> 00:29:42,240
rock

807
00:29:42,240 --> 00:29:44,880
or actually we have to pass in strings

808
00:29:44,880 --> 00:29:47,840
here rock

809
00:29:47,840 --> 00:29:48,880
paper

810
00:29:48,880 --> 00:29:50,720
so

811
00:29:50,720 --> 00:29:52,399
this is going to it's going to call this

812
00:29:52,399 --> 00:29:54,880
function with rock in terms instead of

813
00:29:54,880 --> 00:29:57,760
player and paper instead of computer

814
00:29:57,760 --> 00:29:59,840
so let me try stride running this

815
00:29:59,840 --> 00:30:01,679
program

816
00:30:01,679 --> 00:30:04,720
you chose rock computer chose paper and

817
00:30:04,720 --> 00:30:05,760
just don't worry about these little

818
00:30:05,760 --> 00:30:08,159
icons sometimes they just block what's

819
00:30:08,159 --> 00:30:09,520
in there but it's still behind that

820
00:30:09,520 --> 00:30:12,159
little search icon so it's to see it's

821
00:30:12,159 --> 00:30:15,679
doing you chose rock computer chose

822
00:30:15,679 --> 00:30:16,960
paper

823
00:30:16,960 --> 00:30:18,159
now let's get back to checking the

824
00:30:18,159 --> 00:30:19,200
winner

825
00:30:19,200 --> 00:30:21,600
so far this function is only going to

826
00:30:21,600 --> 00:30:23,520
check if there's a tie

827
00:30:23,520 --> 00:30:25,200
now we'll start adding code to check

828
00:30:25,200 --> 00:30:27,200
different wing conditions

829
00:30:27,200 --> 00:30:30,480
so let's learn about else and elif

830
00:30:30,480 --> 00:30:32,799
statements

831
00:30:32,799 --> 00:30:34,240
okay so down here i'm just going to give

832
00:30:34,240 --> 00:30:36,399
you i'm just going to paste an example

833
00:30:36,399 --> 00:30:38,960
so so here's the if statement if age is

834
00:30:38,960 --> 00:30:40,320
greater than or equal to 18 it's going

835
00:30:40,320 --> 00:30:43,360
to print this else so anytime this is

836
00:30:43,360 --> 00:30:45,440
not true then it's going to print you

837
00:30:45,440 --> 00:30:47,919
are a child

838
00:30:47,919 --> 00:30:50,159
okay now here i've combined it with

839
00:30:50,159 --> 00:30:52,640
something else the ellis statement ls

840
00:30:52,640 --> 00:30:55,360
just stands for else if it combines else

841
00:30:55,360 --> 00:30:57,440
and if so you have to put a condition so

842
00:30:57,440 --> 00:30:59,840
if age is greater than or equal to 18

843
00:30:59,840 --> 00:31:02,480
print you're an adult else if now we're

844
00:31:02,480 --> 00:31:04,399
going to check if age is more than

845
00:31:04,399 --> 00:31:07,440
greater than 12 you were a teenager

846
00:31:07,440 --> 00:31:10,080
else if age is greater than 1 print you

847
00:31:10,080 --> 00:31:12,399
are a child

848
00:31:12,399 --> 00:31:14,640
or else if none of these other things

849
00:31:14,640 --> 00:31:19,640
are true we'll just print you or a baby

850
00:31:20,240 --> 00:31:22,640
so and it's it's only going to do one of

851
00:31:22,640 --> 00:31:23,679
these

852
00:31:23,679 --> 00:31:24,960
it's going to get to the for once it

853
00:31:24,960 --> 00:31:27,360
gets to the first one that's true then

854
00:31:27,360 --> 00:31:28,799
it's not going to check the rest it's

855
00:31:28,799 --> 00:31:30,720
just going to kind of go to the next

856
00:31:30,720 --> 00:31:33,519
line of code after all these statements

857
00:31:33,519 --> 00:31:35,360
so it's just going to choose one and

858
00:31:35,360 --> 00:31:36,880
once it gets the first one that's true

859
00:31:36,880 --> 00:31:38,080
then it's be done with this whole

860
00:31:38,080 --> 00:31:40,960
section of code

861
00:31:42,399 --> 00:31:44,640
you can also check for two conditions at

862
00:31:44,640 --> 00:31:46,240
once let me give you an example i'm just

863
00:31:46,240 --> 00:31:48,559
going to delete all this code and i'm

864
00:31:48,559 --> 00:31:52,159
going to create an alif statement here

865
00:31:52,159 --> 00:31:53,200
elif

866
00:31:53,200 --> 00:31:55,840
else if and we're going to check if

867
00:31:55,840 --> 00:32:00,559
player is equal to rock

868
00:32:00,559 --> 00:32:02,080
and i'm just going to type in the word

869
00:32:02,080 --> 00:32:02,960
and

870
00:32:02,960 --> 00:32:04,640
and computer

871
00:32:04,640 --> 00:32:06,399
is equal to

872
00:32:06,399 --> 00:32:07,760
scissors

873
00:32:07,760 --> 00:32:09,679
so now i'm checking if

874
00:32:09,679 --> 00:32:11,440
both these conditions have to be true so

875
00:32:11,440 --> 00:32:13,519
this condition and

876
00:32:13,519 --> 00:32:15,600
this condition have to be true before

877
00:32:15,600 --> 00:32:16,960
the following

878
00:32:16,960 --> 00:32:18,559
statement will happen which we're going

879
00:32:18,559 --> 00:32:21,519
to just put return

880
00:32:21,840 --> 00:32:24,210
rock smashes

881
00:32:24,210 --> 00:32:26,840
[Music]

882
00:32:26,840 --> 00:32:29,760
scissors you

883
00:32:29,760 --> 00:32:31,020
you when

884
00:32:31,020 --> 00:32:32,320
[Music]

885
00:32:32,320 --> 00:32:33,519
okay now

886
00:32:33,519 --> 00:32:34,480
the next thing we're going to do let's

887
00:32:34,480 --> 00:32:35,600
see if we can figure out how to do this

888
00:32:35,600 --> 00:32:38,799
we're going to add another lf statement

889
00:32:38,799 --> 00:32:40,480
and this time we'll check if players

890
00:32:40,480 --> 00:32:43,440
equal the rock and computer is equal to

891
00:32:43,440 --> 00:32:46,240
paper and if so we'll return paper

892
00:32:46,240 --> 00:32:47,600
covers rock

893
00:32:47,600 --> 00:32:50,159
you lose

894
00:32:51,120 --> 00:32:52,799
so we're going to make this kind of

895
00:32:52,799 --> 00:32:55,360
easier by just copying this code and

896
00:32:55,360 --> 00:32:57,600
then i'm just going to paste in this and

897
00:32:57,600 --> 00:33:00,240
then i'll just change this so players

898
00:33:00,240 --> 00:33:03,679
equal the rock and computer is equal to

899
00:33:03,679 --> 00:33:06,480
paper instead of scissors

900
00:33:06,480 --> 00:33:07,519
paper

901
00:33:07,519 --> 00:33:11,640
and it's going to say

902
00:33:12,159 --> 00:33:14,159
paper

903
00:33:14,159 --> 00:33:17,440
covers rock

904
00:33:17,600 --> 00:33:19,919
you lose

905
00:33:19,919 --> 00:33:21,519
and we won't even have an exclamation

906
00:33:21,519 --> 00:33:23,279
point anymore because it's not exciting

907
00:33:23,279 --> 00:33:25,840
to lose

908
00:33:27,039 --> 00:33:28,480
okay and you can kind of see there's a

909
00:33:28,480 --> 00:33:30,960
few we could add a few more elif

910
00:33:30,960 --> 00:33:33,120
statements to cover all the different

911
00:33:33,120 --> 00:33:34,720
situations

912
00:33:34,720 --> 00:33:36,320
but instead we're going to talk about

913
00:33:36,320 --> 00:33:37,679
refactoring

914
00:33:37,679 --> 00:33:39,760
refactoring is the process of

915
00:33:39,760 --> 00:33:42,240
restructuring code while keeping the

916
00:33:42,240 --> 00:33:44,799
original functionality when created pro

917
00:33:44,799 --> 00:33:46,399
when creating a program it's common to

918
00:33:46,399 --> 00:33:48,880
refactor code to make it simpler or more

919
00:33:48,880 --> 00:33:50,159
understandable

920
00:33:50,159 --> 00:33:52,000
so we are actually going to refactor

921
00:33:52,000 --> 00:33:54,159
this code that i've highlighted now

922
00:33:54,159 --> 00:33:57,200
and we are going to instead use a nested

923
00:33:57,200 --> 00:33:58,480
if statement

924
00:33:58,480 --> 00:34:00,240
a nested if statement will make the code

925
00:34:00,240 --> 00:34:03,200
more understandable at a quick glance

926
00:34:03,200 --> 00:34:03,919
like

927
00:34:03,919 --> 00:34:07,039
so you can put an if statement inside

928
00:34:07,039 --> 00:34:10,079
another if else or else statement

929
00:34:10,079 --> 00:34:12,079
so you'll notice here the first elf

930
00:34:12,079 --> 00:34:13,918
statement is if player equals rock and

931
00:34:13,918 --> 00:34:16,079
the second l of statement is if player

932
00:34:16,079 --> 00:34:18,800
equals rock so see if you can figure out

933
00:34:18,800 --> 00:34:20,399
how to refactor this

934
00:34:20,399 --> 00:34:21,199
to

935
00:34:21,199 --> 00:34:23,199
not have to use the and anymore we're

936
00:34:23,199 --> 00:34:25,760
just going to use one if statement and

937
00:34:25,760 --> 00:34:27,359
one else statement and then an if

938
00:34:27,359 --> 00:34:29,199
statement under that

939
00:34:29,199 --> 00:34:30,800
elif statement

940
00:34:30,800 --> 00:34:32,399
if that doesn't make sense you can just

941
00:34:32,399 --> 00:34:34,480
see what i do right now

942
00:34:34,480 --> 00:34:36,800
so i'm going to just

943
00:34:36,800 --> 00:34:39,040
move this down a little bit

944
00:34:39,040 --> 00:34:40,560
i'm going to actually copy and paste

945
00:34:40,560 --> 00:34:42,079
some of these items but we're going to

946
00:34:42,079 --> 00:34:44,159
start with l if player equals rock we're

947
00:34:44,159 --> 00:34:46,000
not going to have this

948
00:34:46,000 --> 00:34:47,760
i'm going to put this on a new line and

949
00:34:47,760 --> 00:34:51,119
say if computer equals scissors so first

950
00:34:51,119 --> 00:34:53,280
we're going to check if player equals

951
00:34:53,280 --> 00:34:54,320
rock

952
00:34:54,320 --> 00:34:56,960
and then if so we're then going to check

953
00:34:56,960 --> 00:34:58,720
it's going to be a nested if statement

954
00:34:58,720 --> 00:35:01,680
if computer equals scissors and if

955
00:35:01,680 --> 00:35:04,160
computer equals scissors then we're

956
00:35:04,160 --> 00:35:06,240
going to use this this return statement

957
00:35:06,240 --> 00:35:07,760
here

958
00:35:07,760 --> 00:35:09,359
so i have to make sure it's indented

959
00:35:09,359 --> 00:35:11,839
correctly it's going to re so this we

960
00:35:11,839 --> 00:35:12,640
have

961
00:35:12,640 --> 00:35:13,440
we have

962
00:35:13,440 --> 00:35:15,440
player if player equals rock then if

963
00:35:15,440 --> 00:35:17,599
computer equals scissors we'll return oh

964
00:35:17,599 --> 00:35:19,280
this needs to be indented one more time

965
00:35:19,280 --> 00:35:21,680
to be on inside that if statement

966
00:35:21,680 --> 00:35:23,839
and now we don't even need this elf

967
00:35:23,839 --> 00:35:26,240
statement this can just be an else

968
00:35:26,240 --> 00:35:27,920
statement else

969
00:35:27,920 --> 00:35:29,280
because if

970
00:35:29,280 --> 00:35:31,839
the computer equals scissors there's

971
00:35:31,839 --> 00:35:34,160
only one other option because we already

972
00:35:34,160 --> 00:35:36,400
know if player equals rock and computer

973
00:35:36,400 --> 00:35:38,560
equals rock will have already returned

974
00:35:38,560 --> 00:35:39,760
it's a tie

975
00:35:39,760 --> 00:35:42,240
and by the way once you return something

976
00:35:42,240 --> 00:35:44,079
the rest of the code in a function does

977
00:35:44,079 --> 00:35:46,800
not run so if we're returning it to tie

978
00:35:46,800 --> 00:35:49,520
nothing else after that is going to run

979
00:35:49,520 --> 00:35:52,560
so we know that computer can't equal the

980
00:35:52,560 --> 00:35:53,920
rock at this point so it's either going

981
00:35:53,920 --> 00:35:55,599
to be scissors or paper so i don't we

982
00:35:55,599 --> 00:35:57,040
don't even have to check if computer

983
00:35:57,040 --> 00:35:59,040
equals paper because at this point

984
00:35:59,040 --> 00:36:01,599
computer has to equals paper and then

985
00:36:01,599 --> 00:36:04,400
we'll just return this this line

986
00:36:04,400 --> 00:36:06,320
let's see

987
00:36:06,320 --> 00:36:09,520
there we go return paper covers rock

988
00:36:09,520 --> 00:36:11,280
you lose

989
00:36:11,280 --> 00:36:13,440
so now we just basically have to add two

990
00:36:13,440 --> 00:36:15,520
more sections similar to this so this

991
00:36:15,520 --> 00:36:17,520
one is if player equals rock

992
00:36:17,520 --> 00:36:19,440
then we have to have another section if

993
00:36:19,440 --> 00:36:22,400
player equals paper and then if player

994
00:36:22,400 --> 00:36:24,000
equals scissors

995
00:36:24,000 --> 00:36:26,000
and then we just have to have the the

996
00:36:26,000 --> 00:36:28,320
stuff inside is going to be pretty

997
00:36:28,320 --> 00:36:30,720
similar just corresponding to the

998
00:36:30,720 --> 00:36:32,640
different relationships between rock

999
00:36:32,640 --> 00:36:35,200
paper scissors

1000
00:36:35,200 --> 00:36:37,520
so i'm just going to copy that

1001
00:36:37,520 --> 00:36:40,800
and then i will paste it here and then

1002
00:36:40,800 --> 00:36:42,560
one thing is important to make sure this

1003
00:36:42,560 --> 00:36:44,880
elif statement

1004
00:36:44,880 --> 00:36:47,119
lines up with this else statement

1005
00:36:47,119 --> 00:36:49,680
and this is now going to be

1006
00:36:49,680 --> 00:36:50,800
paper

1007
00:36:50,800 --> 00:36:52,400
and then we are going to check if

1008
00:36:52,400 --> 00:36:54,640
computer equals rock

1009
00:36:54,640 --> 00:36:56,960
and a computer equals rock

1010
00:36:56,960 --> 00:36:59,200
then we will say that

1011
00:36:59,200 --> 00:37:02,720
paper covers rock

1012
00:37:04,640 --> 00:37:05,680
you win

1013
00:37:05,680 --> 00:37:08,240
or we'll say

1014
00:37:08,240 --> 00:37:10,880
scissors

1015
00:37:11,920 --> 00:37:12,880
cuts

1016
00:37:12,880 --> 00:37:14,160
paper

1017
00:37:14,160 --> 00:37:16,800
you lose and then the final one which at

1018
00:37:16,800 --> 00:37:18,480
this point i'm sure you can figure out

1019
00:37:18,480 --> 00:37:20,240
on your own we're going to add one more

1020
00:37:20,240 --> 00:37:21,280
section

1021
00:37:21,280 --> 00:37:22,880
and this if

1022
00:37:22,880 --> 00:37:26,000
player equals scissors

1023
00:37:26,000 --> 00:37:28,079
and then first we're going to check if

1024
00:37:28,079 --> 00:37:30,000
computer equals paper

1025
00:37:30,000 --> 00:37:31,280
if so

1026
00:37:31,280 --> 00:37:32,800
we will do

1027
00:37:32,800 --> 00:37:34,720
scissors

1028
00:37:34,720 --> 00:37:35,599
cuts

1029
00:37:35,599 --> 00:37:37,599
paper we're just making sure we're just

1030
00:37:37,599 --> 00:37:39,920
making it so every time the first one is

1031
00:37:39,920 --> 00:37:42,240
you win the second one is you lose but

1032
00:37:42,240 --> 00:37:44,240
you could do it the other way around

1033
00:37:44,240 --> 00:37:47,200
and then we will do

1034
00:37:47,680 --> 00:37:48,839
rock

1035
00:37:48,839 --> 00:37:50,480
smashes

1036
00:37:50,480 --> 00:37:52,640
scissors

1037
00:37:52,640 --> 00:37:55,119
you lose

1038
00:37:55,119 --> 00:37:57,040
okay we're almost finished with this

1039
00:37:57,040 --> 00:37:58,800
whole program

1040
00:37:58,800 --> 00:38:00,240
so both

1041
00:38:00,240 --> 00:38:02,320
the get choices function and the check

1042
00:38:02,320 --> 00:38:05,119
win function they're both complete

1043
00:38:05,119 --> 00:38:07,599
now let code to call the functions and

1044
00:38:07,599 --> 00:38:08,960
play the game

1045
00:38:08,960 --> 00:38:11,839
so first let's remove this

1046
00:38:11,839 --> 00:38:13,520
this check when

1047
00:38:13,520 --> 00:38:14,960
now we'll create a variable called

1048
00:38:14,960 --> 00:38:18,079
choices and make it equal to the result

1049
00:38:18,079 --> 00:38:21,599
of calling the get choices function

1050
00:38:21,599 --> 00:38:22,880
and we just have to make sure it's not

1051
00:38:22,880 --> 00:38:24,880
indented it's on the the first

1052
00:38:24,880 --> 00:38:27,839
the first column i guess right here not

1053
00:38:27,839 --> 00:38:30,320
ended at all so we'll do

1054
00:38:30,320 --> 00:38:32,240
choices

1055
00:38:32,240 --> 00:38:34,880
equals get

1056
00:38:34,880 --> 00:38:35,770
choices

1057
00:38:35,770 --> 00:38:37,839
[Music]

1058
00:38:37,839 --> 00:38:40,240
and one thing about this is it's going

1059
00:38:40,240 --> 00:38:42,560
to return a dictionary so if we look at

1060
00:38:42,560 --> 00:38:44,000
the get choices

1061
00:38:44,000 --> 00:38:45,920
so it's returning choices and it's going

1062
00:38:45,920 --> 00:38:48,320
to be a dictionary like this now let me

1063
00:38:48,320 --> 00:38:49,680
just copy this i'm going to show you

1064
00:38:49,680 --> 00:38:51,599
something down here i'm going to just

1065
00:38:51,599 --> 00:38:53,440
paste it down here and we'll just make

1066
00:38:53,440 --> 00:38:55,200
an example of what it could look like it

1067
00:38:55,200 --> 00:38:58,400
could look like rock and paper i always

1068
00:38:58,400 --> 00:39:00,480
use rock and paper as examples because

1069
00:39:00,480 --> 00:39:01,839
scissors is a

1070
00:39:01,839 --> 00:39:03,839
little harder for me to spell

1071
00:39:03,839 --> 00:39:06,960
so so that's a little easier so so let's

1072
00:39:06,960 --> 00:39:09,520
one thing we haven't talked about is how

1073
00:39:09,520 --> 00:39:10,320
to

1074
00:39:10,320 --> 00:39:11,200
uh

1075
00:39:11,200 --> 00:39:14,240
how to access a and specific element

1076
00:39:14,240 --> 00:39:16,320
within a dictionary so this is a

1077
00:39:16,320 --> 00:39:19,599
dictionary so let's say if i call this

1078
00:39:19,599 --> 00:39:21,839
um

1079
00:39:22,240 --> 00:39:24,400
well i'll just call it choices even

1080
00:39:24,400 --> 00:39:26,240
because we're going to delete that and

1081
00:39:26,240 --> 00:39:27,760
so we're only going to have this choices

1082
00:39:27,760 --> 00:39:29,760
but if choices equals this and let's say

1083
00:39:29,760 --> 00:39:32,480
i just want to get the the choice of the

1084
00:39:32,480 --> 00:39:33,520
player

1085
00:39:33,520 --> 00:39:36,320
let me show you how i would do that

1086
00:39:36,320 --> 00:39:38,480
i'll just do

1087
00:39:38,480 --> 00:39:40,960
p choice for player choice and i'm going

1088
00:39:40,960 --> 00:39:44,320
to put equal choices and to get just the

1089
00:39:44,320 --> 00:39:46,480
the value of the player i'm going to put

1090
00:39:46,480 --> 00:39:49,200
brackets so the brackets look like that

1091
00:39:49,200 --> 00:39:50,880
and then i have to

1092
00:39:50,880 --> 00:39:54,400
put the the key that i want the value of

1093
00:39:54,400 --> 00:39:56,640
so the key would be player

1094
00:39:56,640 --> 00:39:58,400
so if i

1095
00:39:58,400 --> 00:39:59,920
put the name of the dictionary which is

1096
00:39:59,920 --> 00:40:00,880
this

1097
00:40:00,880 --> 00:40:02,560
and then i put some brackets we're going

1098
00:40:02,560 --> 00:40:05,119
to use brackets to identify what is the

1099
00:40:05,119 --> 00:40:06,720
key that we want the value of so here's

1100
00:40:06,720 --> 00:40:08,880
the key of the with the value of rock

1101
00:40:08,880 --> 00:40:11,680
and here's a key with a value of paper

1102
00:40:11,680 --> 00:40:13,760
so this is how we can get the player

1103
00:40:13,760 --> 00:40:16,000
choice and i'm sure you can under see

1104
00:40:16,000 --> 00:40:17,760
how you get the computer choices if

1105
00:40:17,760 --> 00:40:19,200
instead if

1106
00:40:19,200 --> 00:40:21,200
we take this computer word and put it

1107
00:40:21,200 --> 00:40:23,040
right here

1108
00:40:23,040 --> 00:40:25,680
uh computer

1109
00:40:25,680 --> 00:40:27,839
okay i'm just going to get rid of all

1110
00:40:27,839 --> 00:40:29,040
this here

1111
00:40:29,040 --> 00:40:30,319
and we're going to we have the get

1112
00:40:30,319 --> 00:40:32,640
choices here

1113
00:40:32,640 --> 00:40:34,400
and now listen carefully to what we're

1114
00:40:34,400 --> 00:40:35,920
going to do next

1115
00:40:35,920 --> 00:40:38,079
we are going to create a variable called

1116
00:40:38,079 --> 00:40:41,440
result and make it equal to the result

1117
00:40:41,440 --> 00:40:44,480
of calling the check win function and

1118
00:40:44,480 --> 00:40:46,480
when we call the check win function

1119
00:40:46,480 --> 00:40:49,200
we're going to pass in the value of the

1120
00:40:49,200 --> 00:40:50,560
player key

1121
00:40:50,560 --> 00:40:52,720
and the computer key

1122
00:40:52,720 --> 00:40:56,319
of the choices dictionary

1123
00:40:56,319 --> 00:40:58,240
so let's do that so then you'll see what

1124
00:40:58,240 --> 00:41:00,560
i mean a result

1125
00:41:00,560 --> 00:41:02,000
is going to be

1126
00:41:02,000 --> 00:41:03,840
we're going to call

1127
00:41:03,840 --> 00:41:05,119
[Music]

1128
00:41:05,119 --> 00:41:06,880
check

1129
00:41:06,880 --> 00:41:08,480
when

1130
00:41:08,480 --> 00:41:12,079
and then we are going to pass in

1131
00:41:12,079 --> 00:41:15,520
we're going to pass in we have choices

1132
00:41:15,520 --> 00:41:17,280
player

1133
00:41:17,280 --> 00:41:21,000
and choices

1134
00:41:23,599 --> 00:41:25,520
computer

1135
00:41:25,520 --> 00:41:27,040
so because remember we had that we i

1136
00:41:27,040 --> 00:41:28,480
showed the example that dictionary so

1137
00:41:28,480 --> 00:41:30,800
we're getting the player key the value

1138
00:41:30,800 --> 00:41:32,240
of the player key and the value of the

1139
00:41:32,240 --> 00:41:34,240
computer key

1140
00:41:34,240 --> 00:41:36,880
so now we know who wins

1141
00:41:36,880 --> 00:41:39,599
we've now this result variable is going

1142
00:41:39,599 --> 00:41:41,280
to be one of these strings have been

1143
00:41:41,280 --> 00:41:43,280
returned either it's a tie rock space of

1144
00:41:43,280 --> 00:41:46,480
scissors paper covered rocks and so on

1145
00:41:46,480 --> 00:41:50,640
so now we just have to print the result

1146
00:41:50,640 --> 00:41:51,839
we're going to

1147
00:41:51,839 --> 00:41:53,359
print

1148
00:41:53,359 --> 00:41:55,920
the result

1149
00:41:55,920 --> 00:41:58,640
okay we can try out this game

1150
00:41:58,640 --> 00:42:02,960
i'm going to click the run button

1151
00:42:02,960 --> 00:42:05,280
okay this is why it's sometimes better

1152
00:42:05,280 --> 00:42:08,400
to test a little earlier i just forgot

1153
00:42:08,400 --> 00:42:09,440
the

1154
00:42:09,440 --> 00:42:12,560
semicolon on some of these so um

1155
00:42:12,560 --> 00:42:14,400
semicolon

1156
00:42:14,400 --> 00:42:16,160
and see there's a red arrow i should

1157
00:42:16,160 --> 00:42:18,560
have seen that semicolon

1158
00:42:18,560 --> 00:42:20,960
and semicolon

1159
00:42:20,960 --> 00:42:23,440
okay now let's try it i'm going to play

1160
00:42:23,440 --> 00:42:25,920
the program into a choice

1161
00:42:25,920 --> 00:42:27,200
i'm going to do

1162
00:42:27,200 --> 00:42:28,960
rock and i just noticed something else i

1163
00:42:28,960 --> 00:42:30,560
want to change so enter a choice here i

1164
00:42:30,560 --> 00:42:31,680
started there's a parenthesis here

1165
00:42:31,680 --> 00:42:33,440
there's no parentheses at the end so

1166
00:42:33,440 --> 00:42:34,640
again i'm just going to change that

1167
00:42:34,640 --> 00:42:37,040
really quick so enter a choice and we're

1168
00:42:37,040 --> 00:42:39,440
going to put it in parentheses here

1169
00:42:39,440 --> 00:42:41,680
and

1170
00:42:42,319 --> 00:42:45,280
test again so rock okay you chose rock

1171
00:42:45,280 --> 00:42:46,880
computer chose rock

1172
00:42:46,880 --> 00:42:49,839
it's a tie okay i'm gonna play it again

1173
00:42:49,839 --> 00:42:50,960
paper

1174
00:42:50,960 --> 00:42:53,920
you chose paper computer chose scissors

1175
00:42:53,920 --> 00:42:56,720
scissors cuts paper you lose

1176
00:42:56,720 --> 00:43:00,720
okay we just created a python game

1177
00:43:00,720 --> 00:43:02,880
so hopefully this gives you a better

1178
00:43:02,880 --> 00:43:04,800
understanding of what it's like to

1179
00:43:04,800 --> 00:43:07,520
program in python and you you now know

1180
00:43:07,520 --> 00:43:09,520
about some of the basic concepts of

1181
00:43:09,520 --> 00:43:12,079
python now there's a lot more to learn

1182
00:43:12,079 --> 00:43:14,240
in python and we're going to be covering

1183
00:43:14,240 --> 00:43:16,560
a lot more in this course i just wanted

1184
00:43:16,560 --> 00:43:19,520
to start with a game and a full program

1185
00:43:19,520 --> 00:43:21,119
so just right off the bat you could go

1186
00:43:21,119 --> 00:43:22,319
to program

1187
00:43:22,319 --> 00:43:24,319
so in the next section i'm going to

1188
00:43:24,319 --> 00:43:28,000
start going over in detail all the most

1189
00:43:28,000 --> 00:43:30,800
common features of python

1190
00:43:30,800 --> 00:43:32,480
and we're going to cover some of the

1191
00:43:32,480 --> 00:43:34,480
features that we've already used in this

1192
00:43:34,480 --> 00:43:38,160
game plus a lot of additional features

1193
00:43:38,160 --> 00:43:39,920
additional common features that were not

1194
00:43:39,920 --> 00:43:41,359
used in this game

1195
00:43:41,359 --> 00:43:42,880
and then in the final section of the

1196
00:43:42,880 --> 00:43:44,000
course

1197
00:43:44,000 --> 00:43:47,760
we're going to code a more complex game

1198
00:43:47,760 --> 00:43:49,520
a blackjack game

1199
00:43:49,520 --> 00:43:51,040
so let's get started with the next

1200
00:43:51,040 --> 00:43:52,400
section

1201
00:43:52,400 --> 00:43:54,319
one of the quickest and easiest ways to

1202
00:43:54,319 --> 00:43:56,480
get started with python is by using

1203
00:43:56,480 --> 00:43:58,960
replit.com but you may also want to get

1204
00:43:58,960 --> 00:44:01,440
python running on your local computer so

1205
00:44:01,440 --> 00:44:03,359
if you want to do that you can start by

1206
00:44:03,359 --> 00:44:06,000
going on over to python.org

1207
00:44:06,000 --> 00:44:08,560
and these go to the downloads menu

1208
00:44:08,560 --> 00:44:11,280
and then you're going to just click

1209
00:44:11,280 --> 00:44:13,440
what you want to download for it for so

1210
00:44:13,440 --> 00:44:15,680
it's going to default to be for you the

1211
00:44:15,680 --> 00:44:17,599
operating system you're on but you can

1212
00:44:17,599 --> 00:44:20,319
also go to other platforms and make sure

1213
00:44:20,319 --> 00:44:22,480
you can and then just find the platform

1214
00:44:22,480 --> 00:44:24,560
that you want to download on and there's

1215
00:44:24,560 --> 00:44:26,720
going to be instructions on here that's

1216
00:44:26,720 --> 00:44:28,880
going to tell you how to go about

1217
00:44:28,880 --> 00:44:31,200
getting installed on your specific

1218
00:44:31,200 --> 00:44:32,640
computer

1219
00:44:32,640 --> 00:44:34,160
so there's a few different ways to run a

1220
00:44:34,160 --> 00:44:37,040
python programs and one of the ways is

1221
00:44:37,040 --> 00:44:39,520
with an interactive prompt so after you

1222
00:44:39,520 --> 00:44:40,800
get installed if you open up your

1223
00:44:40,800 --> 00:44:43,440
terminal and type in python or sometimes

1224
00:44:43,440 --> 00:44:46,240
it's going to be python 3 depending on

1225
00:44:46,240 --> 00:44:48,319
how you got it installed you're going to

1226
00:44:48,319 --> 00:44:50,800
see this interactive prompt and then you

1227
00:44:50,800 --> 00:44:53,440
can just this is called a python rebel

1228
00:44:53,440 --> 00:44:55,280
it's it's different from a rebel

1229
00:44:55,280 --> 00:44:57,760
creating with created with replit but

1230
00:44:57,760 --> 00:45:00,800
you can start coding in python right on

1231
00:45:00,800 --> 00:45:02,839
here so i could say

1232
00:45:02,839 --> 00:45:06,880
name equals bow

1233
00:45:06,880 --> 00:45:08,800
and then you have to make sure you

1234
00:45:08,800 --> 00:45:11,200
put the the quotation marks at the end

1235
00:45:11,200 --> 00:45:13,440
and now i've gotten a variable stored as

1236
00:45:13,440 --> 00:45:16,000
bow and then i can just type in the

1237
00:45:16,000 --> 00:45:17,920
variable name name and it's going to

1238
00:45:17,920 --> 00:45:20,079
show you show me the value of the

1239
00:45:20,079 --> 00:45:22,720
variable and you can type in most

1240
00:45:22,720 --> 00:45:24,640
different python commands right into

1241
00:45:24,640 --> 00:45:27,119
this inactive prompt here

1242
00:45:27,119 --> 00:45:28,560
and then i can just quit it when i'm

1243
00:45:28,560 --> 00:45:30,720
ready to quit

1244
00:45:30,720 --> 00:45:33,040
it's also common to run python using

1245
00:45:33,040 --> 00:45:35,599
visual studio code so if you just search

1246
00:45:35,599 --> 00:45:37,119
for visual studio code you can get to

1247
00:45:37,119 --> 00:45:39,680
the the download page and then you can

1248
00:45:39,680 --> 00:45:42,560
just download it for your system and

1249
00:45:42,560 --> 00:45:44,400
there's also you can download for

1250
00:45:44,400 --> 00:45:47,280
different systems and then once you open

1251
00:45:47,280 --> 00:45:49,599
up visual studio code to get python

1252
00:45:49,599 --> 00:45:50,960
working you're going to want to install

1253
00:45:50,960 --> 00:45:53,040
the python extension so i'm going to

1254
00:45:53,040 --> 00:45:55,440
click over here to extensions and you

1255
00:45:55,440 --> 00:45:57,920
can search for python or it may just be

1256
00:45:57,920 --> 00:46:00,240
listed here under popular extensions and

1257
00:46:00,240 --> 00:46:02,560
i'm just going to click install

1258
00:46:02,560 --> 00:46:04,800
and this is going to make it easier to

1259
00:46:04,800 --> 00:46:09,200
work with python on visual studio code

1260
00:46:09,200 --> 00:46:10,800
so now i can just kind of close some of

1261
00:46:10,800 --> 00:46:14,160
this stuff here

1262
00:46:14,160 --> 00:46:16,560
and i'm going to

1263
00:46:16,560 --> 00:46:19,200
create a new file

1264
00:46:19,200 --> 00:46:21,680
and i can just call the and i can just

1265
00:46:21,680 --> 00:46:23,760
type in name

1266
00:46:23,760 --> 00:46:25,200
equals

1267
00:46:25,200 --> 00:46:27,200
bow

1268
00:46:27,200 --> 00:46:29,599
print

1269
00:46:29,599 --> 00:46:30,800
name

1270
00:46:30,800 --> 00:46:32,720
and then if i save this

1271
00:46:32,720 --> 00:46:34,280
as

1272
00:46:34,280 --> 00:46:37,920
test.pi it's going to now it's going to

1273
00:46:37,920 --> 00:46:40,480
add the colors that correspond to

1274
00:46:40,480 --> 00:46:41,760
python

1275
00:46:41,760 --> 00:46:43,280
and then i'm just going to click this

1276
00:46:43,280 --> 00:46:44,960
play button here

1277
00:46:44,960 --> 00:46:46,319
and it's going to play it's going to

1278
00:46:46,319 --> 00:46:48,560
open up a terminal window here

1279
00:46:48,560 --> 00:46:51,359
and it's going to run the program and

1280
00:46:51,359 --> 00:46:54,000
it's going to print bow that's what my

1281
00:46:54,000 --> 00:46:55,680
program did if i zoom out a little bit

1282
00:46:55,680 --> 00:46:57,280
you'll be able to see the difference so

1283
00:46:57,280 --> 00:46:58,960
well we just print the name and it and

1284
00:46:58,960 --> 00:47:01,119
it runs the program just like that and

1285
00:47:01,119 --> 00:47:04,319
then you can see on the terminal how the

1286
00:47:04,319 --> 00:47:07,040
the command that was used to run that so

1287
00:47:07,040 --> 00:47:09,440
we could use the same command on any

1288
00:47:09,440 --> 00:47:11,520
terminal and instead of typing this

1289
00:47:11,520 --> 00:47:13,760
whole thing for the location of python 3

1290
00:47:13,760 --> 00:47:16,000
i can just do python

1291
00:47:16,000 --> 00:47:19,200
3 and then you this is where that file

1292
00:47:19,200 --> 00:47:22,319
is located so just copy that

1293
00:47:22,319 --> 00:47:24,480
and i can paste it in here and it's

1294
00:47:24,480 --> 00:47:26,720
going to run that program

1295
00:47:26,720 --> 00:47:28,240
in this section we'll learn about the

1296
00:47:28,240 --> 00:47:30,720
core features of python i'll go into

1297
00:47:30,720 --> 00:47:32,400
more detail about some of the things we

1298
00:47:32,400 --> 00:47:34,559
learned in the first project and they'll

1299
00:47:34,559 --> 00:47:36,720
be covering a lot more concepts this

1300
00:47:36,720 --> 00:47:38,559
section was heavily inspired by the

1301
00:47:38,559 --> 00:47:41,440
python handbook by flavio copes and you

1302
00:47:41,440 --> 00:47:43,599
can check that out on freecodecamp news

1303
00:47:43,599 --> 00:47:45,200
and like the first part of the course

1304
00:47:45,200 --> 00:47:47,520
i'll be running python in replit so once

1305
00:47:47,520 --> 00:47:49,440
you get logged into replit just like i

1306
00:47:49,440 --> 00:47:50,960
already showed you before you can hit

1307
00:47:50,960 --> 00:47:52,880
the plus button here or the create

1308
00:47:52,880 --> 00:47:55,040
button to create a new replit and then

1309
00:47:55,040 --> 00:47:56,640
you can search for the programming

1310
00:47:56,640 --> 00:47:58,160
language or you can just click it down

1311
00:47:58,160 --> 00:48:01,119
here python we'll just create a python

1312
00:48:01,119 --> 00:48:02,319
repel

1313
00:48:02,319 --> 00:48:05,520
and then we can instantly start creating

1314
00:48:05,520 --> 00:48:08,480
writing python code in replit

1315
00:48:08,480 --> 00:48:10,800
so like i showed before we got our

1316
00:48:10,800 --> 00:48:12,480
different files here we're just going to

1317
00:48:12,480 --> 00:48:14,800
start by using one file here and this

1318
00:48:14,800 --> 00:48:16,240
we're going to encode and this is where

1319
00:48:16,240 --> 00:48:17,520
it's going to

1320
00:48:17,520 --> 00:48:19,760
appear if we we run the code so i'm

1321
00:48:19,760 --> 00:48:20,559
going to

1322
00:48:20,559 --> 00:48:22,960
close off the list of files here

1323
00:48:22,960 --> 00:48:25,280
and let's just start at the beginning

1324
00:48:25,280 --> 00:48:27,280
again so you've gotten used to coding in

1325
00:48:27,280 --> 00:48:29,599
python through creating a rock paper

1326
00:48:29,599 --> 00:48:30,880
scissors game

1327
00:48:30,880 --> 00:48:32,559
but now we're going to

1328
00:48:32,559 --> 00:48:35,440
kind of do a deep dive into all the

1329
00:48:35,440 --> 00:48:37,920
basic commands of python so there's

1330
00:48:37,920 --> 00:48:39,680
going to be some review but we're going

1331
00:48:39,680 --> 00:48:42,400
to be going into more detail about each

1332
00:48:42,400 --> 00:48:44,319
of the elements and the first thing

1333
00:48:44,319 --> 00:48:47,119
we're going to talk about is variables

1334
00:48:47,119 --> 00:48:49,200
so we can create a new python variable

1335
00:48:49,200 --> 00:48:52,559
by assigning a value to a label using

1336
00:48:52,559 --> 00:48:54,480
the equal sign or the assignment

1337
00:48:54,480 --> 00:48:56,800
operator so let me give you an example

1338
00:48:56,800 --> 00:48:58,319
just like i was showing you before just

1339
00:48:58,319 --> 00:49:00,720
name equals bo

1340
00:49:00,720 --> 00:49:02,960
so let me just zoom in a little bit more

1341
00:49:02,960 --> 00:49:05,920
here and so now our variable name is

1342
00:49:05,920 --> 00:49:08,480
name and we've assigned it the value of

1343
00:49:08,480 --> 00:49:09,280
bo

1344
00:49:09,280 --> 00:49:12,559
and then we can also uh create we can

1345
00:49:12,559 --> 00:49:14,400
create a variable with a number so i

1346
00:49:14,400 --> 00:49:15,839
could do age

1347
00:49:15,839 --> 00:49:17,440
equals

1348
00:49:17,440 --> 00:49:20,319
39. so a variable name can be composed

1349
00:49:20,319 --> 00:49:23,839
of characters numbers and an underscore

1350
00:49:23,839 --> 00:49:26,000
character but and it cannot start with

1351
00:49:26,000 --> 00:49:27,040
the number

1352
00:49:27,040 --> 00:49:30,880
so it could be anything like name one

1353
00:49:30,880 --> 00:49:34,000
it could be all capital letters

1354
00:49:34,000 --> 00:49:35,119
it could

1355
00:49:35,119 --> 00:49:37,520
be it could have an underscore it can

1356
00:49:37,520 --> 00:49:39,119
start with an underscore like i said

1357
00:49:39,119 --> 00:49:40,480
like that

1358
00:49:40,480 --> 00:49:41,520
and

1359
00:49:41,520 --> 00:49:44,000
you can see that these are all it's

1360
00:49:44,000 --> 00:49:45,040
putting these

1361
00:49:45,040 --> 00:49:47,440
red squiggly lines because it's showing

1362
00:49:47,440 --> 00:49:49,040
that that's not

1363
00:49:49,040 --> 00:49:50,640
actual python code if you're going to

1364
00:49:50,640 --> 00:49:51,760
create a variable you should be

1365
00:49:51,760 --> 00:49:55,359
assigning it to a value or you should be

1366
00:49:55,359 --> 00:49:58,240
using a variable that already exists but

1367
00:49:58,240 --> 00:49:59,359
i'm just showing you some different

1368
00:49:59,359 --> 00:50:01,760
examples of different variables now so

1369
00:50:01,760 --> 00:50:04,720
here's an example of an invalid variable

1370
00:50:04,720 --> 00:50:07,119
name if you just start with a number

1371
00:50:07,119 --> 00:50:08,480
like that that can't be a variable

1372
00:50:08,480 --> 00:50:10,079
because you can't start with a number

1373
00:50:10,079 --> 00:50:12,160
and i couldn't put something like test

1374
00:50:12,160 --> 00:50:14,160
exclamation point you can't use

1375
00:50:14,160 --> 00:50:16,319
exclamation points you can't use percent

1376
00:50:16,319 --> 00:50:17,760
signs

1377
00:50:17,760 --> 00:50:20,559
and other than that anything is valid

1378
00:50:20,559 --> 00:50:23,599
unless it's a python keyword so there

1379
00:50:23,599 --> 00:50:25,440
are some keywords a keyword is something

1380
00:50:25,440 --> 00:50:29,359
that's used to to write python like for

1381
00:50:29,359 --> 00:50:31,119
if

1382
00:50:31,119 --> 00:50:32,240
while

1383
00:50:32,240 --> 00:50:34,079
import these are all words that have

1384
00:50:34,079 --> 00:50:36,880
very specific meanings within python so

1385
00:50:36,880 --> 00:50:39,920
you cannot use them for a variable name

1386
00:50:39,920 --> 00:50:42,400
now there's no need to memorize them as

1387
00:50:42,400 --> 00:50:44,800
the python editor here will alert you if

1388
00:50:44,800 --> 00:50:47,119
you use one of those as a variable

1389
00:50:47,119 --> 00:50:48,880
so that was just like

1390
00:50:48,880 --> 00:50:52,079
if i say if equals

1391
00:50:52,079 --> 00:50:53,119
hi

1392
00:50:53,119 --> 00:50:54,720
and then you can see it's going to show

1393
00:50:54,720 --> 00:50:56,960
you right here with these squiggly lines

1394
00:50:56,960 --> 00:50:59,680
that we've done something wrong

1395
00:50:59,680 --> 00:51:03,119
invalid syntax because and then also you

1396
00:51:03,119 --> 00:51:04,559
can see that

1397
00:51:04,559 --> 00:51:06,800
it turns blue this word turns blue

1398
00:51:06,800 --> 00:51:09,760
because it's a keyword you can't use it

1399
00:51:09,760 --> 00:51:12,079
as a variable name

1400
00:51:12,079 --> 00:51:14,160
so like i said it's going to alert you

1401
00:51:14,160 --> 00:51:15,680
if you if you use a keyword as a

1402
00:51:15,680 --> 00:51:17,920
variable and you'll start to gradually

1403
00:51:17,920 --> 00:51:19,599
recognize them as part of the python

1404
00:51:19,599 --> 00:51:21,760
programming language syntax

1405
00:51:21,760 --> 00:51:23,200
now let's talk about talk about

1406
00:51:23,200 --> 00:51:26,880
expressions and statements in python so

1407
00:51:26,880 --> 00:51:29,280
an expression is any sort of code that

1408
00:51:29,280 --> 00:51:31,680
returns a value like for instance if you

1409
00:51:31,680 --> 00:51:35,599
do one plus one or if you just do a

1410
00:51:35,599 --> 00:51:36,960
string like

1411
00:51:36,960 --> 00:51:38,800
bow this is going to like this is going

1412
00:51:38,800 --> 00:51:41,280
to return to this is going to return the

1413
00:51:41,280 --> 00:51:44,000
string bow so a statement on the other

1414
00:51:44,000 --> 00:51:47,520
hand is an operation on a value

1415
00:51:47,520 --> 00:51:49,599
so for example these are this is a

1416
00:51:49,599 --> 00:51:51,520
statement here because we have an

1417
00:51:51,520 --> 00:51:53,599
operation we're assigning this to the

1418
00:51:53,599 --> 00:51:56,079
variable and then another statement

1419
00:51:56,079 --> 00:51:58,720
would be like this print

1420
00:51:58,720 --> 00:51:59,760
name

1421
00:51:59,760 --> 00:52:01,680
so that's going to

1422
00:52:01,680 --> 00:52:03,440
be a statement because it's doing

1423
00:52:03,440 --> 00:52:06,720
something to the value now a program is

1424
00:52:06,720 --> 00:52:09,599
formed by a series of statements and

1425
00:52:09,599 --> 00:52:11,359
each statement is put on its own line

1426
00:52:11,359 --> 00:52:13,440
like we have these two lines here but

1427
00:52:13,440 --> 00:52:15,680
you can use a semicolon to have more

1428
00:52:15,680 --> 00:52:17,440
than one statement on a single line so i

1429
00:52:17,440 --> 00:52:20,319
i could put a semicolon here

1430
00:52:20,319 --> 00:52:22,240
and then if i run the program it's still

1431
00:52:22,240 --> 00:52:24,079
going to print the name and let's just

1432
00:52:24,079 --> 00:52:25,520
do that we already learned how to run a

1433
00:52:25,520 --> 00:52:27,839
program in replica click this button

1434
00:52:27,839 --> 00:52:30,160
right here but we can see it's going to

1435
00:52:30,160 --> 00:52:32,480
print bow and if i put these on two

1436
00:52:32,480 --> 00:52:34,079
different lines it's going to do the

1437
00:52:34,079 --> 00:52:36,160
same thing if i run the program it's

1438
00:52:36,160 --> 00:52:38,480
going to still do the same thing here

1439
00:52:38,480 --> 00:52:40,800
now let's talk about comments this is

1440
00:52:40,800 --> 00:52:42,000
something we haven't talked about in

1441
00:52:42,000 --> 00:52:45,359
this course yet so in the python program

1442
00:52:45,359 --> 00:52:48,559
everything after a hash mark is ignored

1443
00:52:48,559 --> 00:52:51,520
so if i put a hash mark i can say this

1444
00:52:51,520 --> 00:52:55,760
is a commented line and when we run the

1445
00:52:55,760 --> 00:52:57,440
program this line is going to be

1446
00:52:57,440 --> 00:53:00,880
completely ignored and then we can also

1447
00:53:00,880 --> 00:53:03,920
put in inline comment if i just put the

1448
00:53:03,920 --> 00:53:07,920
hash mark here this is an inline comment

1449
00:53:07,920 --> 00:53:09,680
and the cool thing about most code

1450
00:53:09,680 --> 00:53:11,760
editors including replit is it's going

1451
00:53:11,760 --> 00:53:14,079
to put comments going to make them gray

1452
00:53:14,079 --> 00:53:16,319
so you know that this isn't really part

1453
00:53:16,319 --> 00:53:18,640
of the program this is just some sort of

1454
00:53:18,640 --> 00:53:21,040
special note that the programmer wants

1455
00:53:21,040 --> 00:53:23,280
to put as part of the program

1456
00:53:23,280 --> 00:53:25,119
so i want to emphasize again how

1457
00:53:25,119 --> 00:53:28,960
important indentation is so it's very

1458
00:53:28,960 --> 00:53:31,680
meaningful in python so you can't

1459
00:53:31,680 --> 00:53:33,839
randomly indent things like you can't

1460
00:53:33,839 --> 00:53:35,920
just press tab here to indent here and

1461
00:53:35,920 --> 00:53:37,920
how this is kind of lined up here this

1462
00:53:37,920 --> 00:53:40,000
line up here you can see this red

1463
00:53:40,000 --> 00:53:43,040
squiggly line says unexpected expected

1464
00:53:43,040 --> 00:53:44,240
indent

1465
00:53:44,240 --> 00:53:46,960
so some other languages do not have

1466
00:53:46,960 --> 00:53:49,119
meaningful white space an indentation

1467
00:53:49,119 --> 00:53:52,559
doesn't matter but in python indentation

1468
00:53:52,559 --> 00:53:53,680
matters

1469
00:53:53,680 --> 00:53:55,520
so in this case if you try to run this

1470
00:53:55,520 --> 00:53:57,599
program we can run this and you'll see

1471
00:53:57,599 --> 00:54:00,160
an error right here showing up in red

1472
00:54:00,160 --> 00:54:02,720
here it says indentation error

1473
00:54:02,720 --> 00:54:04,079
unexpected

1474
00:54:04,079 --> 00:54:05,119
indent

1475
00:54:05,119 --> 00:54:07,440
because indentation has a special

1476
00:54:07,440 --> 00:54:10,720
meaning so i can just unindent that here

1477
00:54:10,720 --> 00:54:14,319
everything indented belongs to a block

1478
00:54:14,319 --> 00:54:15,760
like a control statement or a

1479
00:54:15,760 --> 00:54:17,760
conditional block or a function or a

1480
00:54:17,760 --> 00:54:20,720
class body and we'll be talking more

1481
00:54:20,720 --> 00:54:23,839
about those different blocks

1482
00:54:23,839 --> 00:54:26,559
now let's talk about data types python

1483
00:54:26,559 --> 00:54:29,200
has several built-in types

1484
00:54:29,200 --> 00:54:32,559
so for instance this is a string so

1485
00:54:32,559 --> 00:54:35,599
anything surrounded by quotation marks

1486
00:54:35,599 --> 00:54:38,400
is a string that's one data type and you

1487
00:54:38,400 --> 00:54:40,799
can check the type of a variable by

1488
00:54:40,799 --> 00:54:43,760
using the type function so i could say

1489
00:54:43,760 --> 00:54:44,640
type

1490
00:54:44,640 --> 00:54:47,599
and then i'll put name and to make sure

1491
00:54:47,599 --> 00:54:49,920
to be able to see in the console i'm

1492
00:54:49,920 --> 00:54:52,720
going to print what the type is here

1493
00:54:52,720 --> 00:54:55,599
and if i press if i run the program

1494
00:54:55,599 --> 00:54:58,400
we'll see that the type is the class of

1495
00:54:58,400 --> 00:55:02,000
str which stands for string

1496
00:55:02,000 --> 00:55:04,720
and then we can test to see if something

1497
00:55:04,720 --> 00:55:08,960
is a string by comparing it to str so i

1498
00:55:08,960 --> 00:55:12,640
could do equals equals str

1499
00:55:12,640 --> 00:55:15,520
and then if i run that it's going to say

1500
00:55:15,520 --> 00:55:20,480
true because the type of name does equal

1501
00:55:20,480 --> 00:55:22,319
a string

1502
00:55:22,319 --> 00:55:24,960
and then we can also use is

1503
00:55:24,960 --> 00:55:26,799
instance so

1504
00:55:26,799 --> 00:55:28,880
i'm going to

1505
00:55:28,880 --> 00:55:31,839
uh so if we instead of doing type we do

1506
00:55:31,839 --> 00:55:32,839
is

1507
00:55:32,839 --> 00:55:35,680
instance and then we

1508
00:55:35,680 --> 00:55:38,319
have to pass it two things so

1509
00:55:38,319 --> 00:55:40,480
the first thing we're going to pass it

1510
00:55:40,480 --> 00:55:42,079
so we have the is instance we're passing

1511
00:55:42,079 --> 00:55:44,559
it the name that's this variable and str

1512
00:55:44,559 --> 00:55:46,880
we're trying to see if name is an

1513
00:55:46,880 --> 00:55:49,920
instance of a string and if i run that

1514
00:55:49,920 --> 00:55:52,400
it should say true again

1515
00:55:52,400 --> 00:55:55,200
so we've been testing against the str

1516
00:55:55,200 --> 00:55:57,440
class the string class but it works the

1517
00:55:57,440 --> 00:56:00,079
same for other data types so so there

1518
00:56:00,079 --> 00:56:03,359
are some data types around numbers

1519
00:56:03,359 --> 00:56:05,760
so an integer number integer numbers are

1520
00:56:05,760 --> 00:56:08,319
represented using the int class or the

1521
00:56:08,319 --> 00:56:11,520
int class and floating point numbers or

1522
00:56:11,520 --> 00:56:14,000
fractions are a type of are the type

1523
00:56:14,000 --> 00:56:17,040
float so i can say age

1524
00:56:17,040 --> 00:56:19,440
equals

1525
00:56:19,440 --> 00:56:20,400
2

1526
00:56:20,400 --> 00:56:22,960
and then we can just check

1527
00:56:22,960 --> 00:56:26,079
is instance

1528
00:56:26,640 --> 00:56:30,160
and i can pass in the age and then i can

1529
00:56:30,160 --> 00:56:31,680
pass in an int

1530
00:56:31,680 --> 00:56:33,359
so if i run that

1531
00:56:33,359 --> 00:56:35,520
we're going to see that i've done

1532
00:56:35,520 --> 00:56:36,720
something wrong

1533
00:56:36,720 --> 00:56:40,160
oh i spelled that wrong there we go okay

1534
00:56:40,160 --> 00:56:41,760
now i'm going to try this and we'll see

1535
00:56:41,760 --> 00:56:46,880
true true and i can also type in float

1536
00:56:48,319 --> 00:56:50,880
true false it's not a false or it's not

1537
00:56:50,880 --> 00:56:53,520
a float because it doesn't have a

1538
00:56:53,520 --> 00:56:55,359
decimal point if i

1539
00:56:55,359 --> 00:56:57,200
did 2.9

1540
00:56:57,200 --> 00:56:59,359
then it should show that it is a float

1541
00:56:59,359 --> 00:57:02,079
because it has a decimal so python

1542
00:57:02,079 --> 00:57:04,799
automatically detects the type

1543
00:57:04,799 --> 00:57:07,040
from the value type so it automatically

1544
00:57:07,040 --> 00:57:08,880
knows this is a string it automatically

1545
00:57:08,880 --> 00:57:12,079
knows this is a float but you can also

1546
00:57:12,079 --> 00:57:15,119
create a variable of a specific type by

1547
00:57:15,119 --> 00:57:17,359
using the class constructor passing a

1548
00:57:17,359 --> 00:57:20,960
value literal or a variable name like

1549
00:57:20,960 --> 00:57:23,119
for instance we have this and we check

1550
00:57:23,119 --> 00:57:25,359
to see if this is a float and it's

1551
00:57:25,359 --> 00:57:28,720
saying false but i can make it a float

1552
00:57:28,720 --> 00:57:30,319
by typing in

1553
00:57:30,319 --> 00:57:31,520
float

1554
00:57:31,520 --> 00:57:34,160
and just p putting the value

1555
00:57:34,160 --> 00:57:36,480
into the flow here so we're going to

1556
00:57:36,480 --> 00:57:39,599
make it a float so now it's true true

1557
00:57:39,599 --> 00:57:41,520
and you can do the same thing with

1558
00:57:41,520 --> 00:57:45,280
strings or integers or other data types

1559
00:57:45,280 --> 00:57:48,799
and you can also convert from one data

1560
00:57:48,799 --> 00:57:51,040
type to another by using the class

1561
00:57:51,040 --> 00:57:53,040
constructor so so that's basically what

1562
00:57:53,040 --> 00:57:54,640
we did we just converted this from an

1563
00:57:54,640 --> 00:57:58,079
integer to a float but i can also do

1564
00:57:58,079 --> 00:57:59,839
something else i can convert something

1565
00:57:59,839 --> 00:58:00,880
from

1566
00:58:00,880 --> 00:58:02,240
a string

1567
00:58:02,240 --> 00:58:05,359
to an integer so for instance i'm going

1568
00:58:05,359 --> 00:58:07,040
to we'll just get rid of this one

1569
00:58:07,040 --> 00:58:09,040
completely here and we'll just use this

1570
00:58:09,040 --> 00:58:10,720
one so

1571
00:58:10,720 --> 00:58:13,040
a string is anything in quotation marks

1572
00:58:13,040 --> 00:58:15,359
so if i do

1573
00:58:15,359 --> 00:58:21,760
20 age 20 and i test if this is a an int

1574
00:58:21,839 --> 00:58:24,319
it's going to say

1575
00:58:24,319 --> 00:58:26,559
false it's not an n so i'm printing

1576
00:58:26,559 --> 00:58:28,960
whether it's an instance of an int but i

1577
00:58:28,960 --> 00:58:31,599
can convert this string

1578
00:58:31,599 --> 00:58:35,040
into an integer by just doing integer

1579
00:58:35,040 --> 00:58:37,119
and this let me run the program and it

1580
00:58:37,119 --> 00:58:39,200
says true

1581
00:58:39,200 --> 00:58:40,880
another thing about this is you don't

1582
00:58:40,880 --> 00:58:43,680
just have to pass in the actual data or

1583
00:58:43,680 --> 00:58:45,520
the actual string i can pass in a

1584
00:58:45,520 --> 00:58:49,359
variable so i can say number

1585
00:58:49,359 --> 00:58:52,400
equals and now i'm going to make it a an

1586
00:58:52,400 --> 00:58:54,000
x it says number but it's actually a

1587
00:58:54,000 --> 00:58:58,160
string but i can pass in the number here

1588
00:58:58,160 --> 00:59:00,880
and then it's going to set that to age

1589
00:59:00,880 --> 00:59:03,040
and it's going to be true so we create

1590
00:59:03,040 --> 00:59:05,440
the string we convert the string to an

1591
00:59:05,440 --> 00:59:09,200
integer and we tested that that age is

1592
00:59:09,200 --> 00:59:11,200
an integer

1593
00:59:11,200 --> 00:59:13,440
so when we do something like this this

1594
00:59:13,440 --> 00:59:15,520
is called casting

1595
00:59:15,520 --> 00:59:18,799
we are it's basically trying to extract

1596
00:59:18,799 --> 00:59:22,400
an integer from this string

1597
00:59:22,400 --> 00:59:23,920
of course the conversion might not

1598
00:59:23,920 --> 00:59:25,599
always work depending on the value

1599
00:59:25,599 --> 00:59:28,640
that's passed so for instance if we

1600
00:59:28,640 --> 00:59:31,440
write test here in the string

1601
00:59:31,440 --> 00:59:34,000
instead of the 20

1602
00:59:34,000 --> 00:59:35,520
we may get an air so let me just run

1603
00:59:35,520 --> 00:59:38,319
this and see now we have an error it

1604
00:59:38,319 --> 00:59:40,720
says invalid literal for

1605
00:59:40,720 --> 00:59:44,000
for int int with base 10 test so we

1606
00:59:44,000 --> 00:59:46,079
can't convert the word we can't convert

1607
00:59:46,079 --> 00:59:49,599
the string test to an integer so python

1608
00:59:49,599 --> 00:59:51,440
does its best to do the conversion but

1609
00:59:51,440 --> 00:59:54,000
it doesn't always work there are a few

1610
00:59:54,000 --> 00:59:56,960
other types so let me see are some other

1611
00:59:56,960 --> 00:59:58,880
common types of types so there's the

1612
00:59:58,880 --> 01:00:00,960
type of complex for complex numbers bool

1613
01:00:00,960 --> 01:00:03,520
for booleans list for list tuple for

1614
01:00:03,520 --> 01:00:05,280
tuples range for ranges

1615
01:00:05,280 --> 01:00:07,680
dict is our dictionaries and set

1616
01:00:07,680 --> 01:00:09,359
is a type for sets

1617
01:00:09,359 --> 01:00:12,400
and we'll explore all these soon we'll

1618
01:00:12,400 --> 01:00:14,480
go into more detail about about all

1619
01:00:14,480 --> 01:00:17,359
these different types of types well now

1620
01:00:17,359 --> 01:00:19,920
let's talk about operators we've already

1621
01:00:19,920 --> 01:00:21,599
seen one operator that's this one that's

1622
01:00:21,599 --> 01:00:24,640
the assignment operator but there's also

1623
01:00:24,640 --> 01:00:26,480
arithmetic operators comparison

1624
01:00:26,480 --> 01:00:28,720
operators logical operators bitwise

1625
01:00:28,720 --> 01:00:31,440
operators and plus some interesting ones

1626
01:00:31,440 --> 01:00:34,079
like is and in so we're going to be

1627
01:00:34,079 --> 01:00:36,160
going over a lot of those right now

1628
01:00:36,160 --> 01:00:37,520
so we talked about the assignment

1629
01:00:37,520 --> 01:00:39,920
operator which is used to assign a value

1630
01:00:39,920 --> 01:00:42,799
to a variable or to assign a variable

1631
01:00:42,799 --> 01:00:45,440
value to another variable now let's talk

1632
01:00:45,440 --> 01:00:47,520
about arithmetic operators

1633
01:00:47,520 --> 01:00:49,520
it's just what you use to do

1634
01:00:49,520 --> 01:00:51,119
math mathematics

1635
01:00:51,119 --> 01:00:53,520
so here are the different

1636
01:00:53,520 --> 01:00:56,319
arithmetic operators so we have plus one

1637
01:00:56,319 --> 01:00:58,640
plus one equals two then minus

1638
01:00:58,640 --> 01:01:01,440
multiplication division

1639
01:01:01,440 --> 01:01:02,880
we have

1640
01:01:02,880 --> 01:01:05,040
remainder so four divided by three

1641
01:01:05,040 --> 01:01:06,880
equals one but there's a remainder of

1642
01:01:06,880 --> 01:01:08,880
one we have exponents four to the power

1643
01:01:08,880 --> 01:01:12,000
of 2 is 16 and floor division

1644
01:01:12,000 --> 01:01:14,559
so floor division does a

1645
01:01:14,559 --> 01:01:18,000
division problem and then just

1646
01:01:18,000 --> 01:01:20,240
basically rounds down

1647
01:01:20,240 --> 01:01:22,319
so floor division does the division and

1648
01:01:22,319 --> 01:01:25,119
rounds down to the nearest whole number

1649
01:01:25,119 --> 01:01:27,200
so actually this would be better seen if

1650
01:01:27,200 --> 01:01:30,640
we do four five divide by two five floor

1651
01:01:30,640 --> 01:01:32,720
division divided by two is going to be

1652
01:01:32,720 --> 01:01:35,359
two normally be 2.5 but floor division

1653
01:01:35,359 --> 01:01:37,280
is rounding down to the nearest integer

1654
01:01:37,280 --> 01:01:39,200
the nearest whole number

1655
01:01:39,200 --> 01:01:41,440
and then also note that that

1656
01:01:41,440 --> 01:01:44,559
the minus can also be a

1657
01:01:44,559 --> 01:01:47,440
make something a negative number

1658
01:01:47,440 --> 01:01:50,400
so i could do 4 plus

1659
01:01:50,400 --> 01:01:53,200
negative or i mean 1 plus negative 1 and

1660
01:01:53,200 --> 01:01:55,760
then that's just going to equal 0. and

1661
01:01:55,760 --> 01:01:58,880
then the plus operator can also be used

1662
01:01:58,880 --> 01:02:02,160
to concatenate string values that's

1663
01:02:02,160 --> 01:02:04,400
something we talked about earlier but i

1664
01:02:04,400 --> 01:02:05,599
could say

1665
01:02:05,599 --> 01:02:06,799
scamp

1666
01:02:06,799 --> 01:02:10,319
and then put a plus

1667
01:02:10,480 --> 01:02:13,359
is a good dog

1668
01:02:13,359 --> 01:02:17,280
and then like if i print this out

1669
01:02:18,480 --> 01:02:21,839
i put the the parentheses around it i

1670
01:02:21,839 --> 01:02:22,640
can

1671
01:02:22,640 --> 01:02:24,480
and then we'll see the whole string here

1672
01:02:24,480 --> 01:02:27,119
sk scamp is a good dog

1673
01:02:27,119 --> 01:02:28,880
that was the name of my first dog when i

1674
01:02:28,880 --> 01:02:32,000
was a kid so we can also combine these

1675
01:02:32,000 --> 01:02:35,039
arithmetic operators with the assignment

1676
01:02:35,039 --> 01:02:37,760
operator let me show you what i mean so

1677
01:02:37,760 --> 01:02:39,839
let me just get rid of this here and i'm

1678
01:02:39,839 --> 01:02:41,200
going to do age

1679
01:02:41,200 --> 01:02:42,880
equals 8

1680
01:02:42,880 --> 01:02:44,640
and age

1681
01:02:44,640 --> 01:02:46,180
plus equals

1682
01:02:46,180 --> 01:02:47,599
[Music]

1683
01:02:47,599 --> 01:02:48,880
8

1684
01:02:48,880 --> 01:02:50,799
and i'll do print

1685
01:02:50,799 --> 01:02:51,760
age

1686
01:02:51,760 --> 01:02:54,160
so we've so all these different

1687
01:02:54,160 --> 01:02:56,480
operators can be assigned with it can be

1688
01:02:56,480 --> 01:03:00,000
combined with the assignment operator

1689
01:03:00,000 --> 01:03:03,280
and now it's going to add

1690
01:03:03,280 --> 01:03:04,960
8

1691
01:03:04,960 --> 01:03:07,359
to the age so if i

1692
01:03:07,359 --> 01:03:11,039
run this it's 16. so this actually just

1693
01:03:11,039 --> 01:03:13,359
means

1694
01:03:13,359 --> 01:03:14,880
age

1695
01:03:14,880 --> 01:03:17,760
equals age

1696
01:03:17,760 --> 01:03:20,079
plus

1697
01:03:20,480 --> 01:03:21,920
eight

1698
01:03:21,920 --> 01:03:24,559
so this age plus equals eight is the

1699
01:03:24,559 --> 01:03:28,160
same as saying age equals age plus eight

1700
01:03:28,160 --> 01:03:31,440
so it's just going to add this number

1701
01:03:31,440 --> 01:03:34,559
to the current age and set it equal to

1702
01:03:34,559 --> 01:03:36,799
the age and you can do that with any of

1703
01:03:36,799 --> 01:03:39,520
these like i could do

1704
01:03:39,520 --> 01:03:41,039
times

1705
01:03:41,039 --> 01:03:45,760
and that would be age equals age times 8

1706
01:03:45,760 --> 01:03:47,359
and

1707
01:03:47,359 --> 01:03:50,319
64. and so on with any of these

1708
01:03:50,319 --> 01:03:53,119
arithmetic operators

1709
01:03:53,119 --> 01:03:55,920
okay now let's talk about comparison

1710
01:03:55,920 --> 01:03:57,119
operators

1711
01:03:57,119 --> 01:03:59,359
now we talked a little bit about them

1712
01:03:59,359 --> 01:04:00,559
before

1713
01:04:00,559 --> 01:04:03,280
but let's see some examples again so

1714
01:04:03,280 --> 01:04:05,920
this is to compare if two things are

1715
01:04:05,920 --> 01:04:07,039
equal

1716
01:04:07,039 --> 01:04:08,960
and then we have not equal we're

1717
01:04:08,960 --> 01:04:10,480
comparing them to see if they're not

1718
01:04:10,480 --> 01:04:13,760
equal or count this is if a is

1719
01:04:13,760 --> 01:04:15,200
greater than b

1720
01:04:15,200 --> 01:04:18,000
or more than b and then this this is

1721
01:04:18,000 --> 01:04:19,920
less than or equal to b

1722
01:04:19,920 --> 01:04:21,359
now let me just tell you a trick of how

1723
01:04:21,359 --> 01:04:23,359
i keep the keep track of which one is

1724
01:04:23,359 --> 01:04:25,440
greater than and which one is less than

1725
01:04:25,440 --> 01:04:28,079
if you see this less than one if you

1726
01:04:28,079 --> 01:04:29,920
kind of tilt your head a little bit it

1727
01:04:29,920 --> 01:04:32,799
kind of looks like an l see like l and

1728
01:04:32,799 --> 01:04:34,559
this one doesn't look like as much of an

1729
01:04:34,559 --> 01:04:36,079
l so this

1730
01:04:36,079 --> 01:04:39,359
less than operator kind of in some ways

1731
01:04:39,359 --> 01:04:41,359
looks like a capital l that's kind of

1732
01:04:41,359 --> 01:04:43,680
just squished over and that's how i keep

1733
01:04:43,680 --> 01:04:45,520
track of which one is less than which

1734
01:04:45,520 --> 01:04:47,440
one is greater than

1735
01:04:47,440 --> 01:04:49,200
and so these are all going to give

1736
01:04:49,200 --> 01:04:53,440
either a false value or a true values

1737
01:04:53,440 --> 01:04:55,920
speaking of true and false

1738
01:04:55,920 --> 01:04:59,039
true and false are examples of boolean

1739
01:04:59,039 --> 01:05:01,599
the boolean data type the boolean data

1740
01:05:01,599 --> 01:05:04,799
type just means true false or true

1741
01:05:04,799 --> 01:05:06,480
so a boolean is either going to be true

1742
01:05:06,480 --> 01:05:08,640
or false there's only two options

1743
01:05:08,640 --> 01:05:13,839
and there are a few boolean operators

1744
01:05:14,079 --> 01:05:15,680
so let me show you what the boolean the

1745
01:05:15,680 --> 01:05:18,000
boolean operators are either not

1746
01:05:18,000 --> 01:05:18,880
and

1747
01:05:18,880 --> 01:05:22,240
or or

1748
01:05:22,240 --> 01:05:23,920
so when working with two or false

1749
01:05:23,920 --> 01:05:25,039
attributes

1750
01:05:25,039 --> 01:05:29,359
those work like logical and or and not

1751
01:05:29,359 --> 01:05:32,000
so when you're using uh not

1752
01:05:32,000 --> 01:05:34,480
it means it's not true you're checking

1753
01:05:34,480 --> 01:05:35,920
you're checking to see something is not

1754
01:05:35,920 --> 01:05:38,720
true and means they both have to be true

1755
01:05:38,720 --> 01:05:40,640
and or means either this one has to be

1756
01:05:40,640 --> 01:05:43,680
true or this one has to be true in order

1757
01:05:43,680 --> 01:05:46,240
for the full thing to be evaluated as

1758
01:05:46,240 --> 01:05:47,520
true

1759
01:05:47,520 --> 01:05:50,480
and let me show you something about or

1760
01:05:50,480 --> 01:05:54,000
now or using an expression returns the

1761
01:05:54,000 --> 01:05:56,960
value of the first operator operand that

1762
01:05:56,960 --> 01:06:00,880
is not a false value or a falsie value

1763
01:06:00,880 --> 01:06:04,559
otherwise it returns the last operand so

1764
01:06:04,559 --> 01:06:06,400
it's going to return

1765
01:06:06,400 --> 01:06:08,799
the first operand that is not a false

1766
01:06:08,799 --> 01:06:10,400
value but since this is a false value

1767
01:06:10,400 --> 01:06:12,880
it's returning the second operand since

1768
01:06:12,880 --> 01:06:14,799
this is a false value it returns the

1769
01:06:14,799 --> 01:06:15,920
second one

1770
01:06:15,920 --> 01:06:19,599
since this is not a false value it will

1771
01:06:19,599 --> 01:06:21,440
return the first one

1772
01:06:21,440 --> 01:06:24,319
and this is considered a false value if

1773
01:06:24,319 --> 01:06:25,599
it's just an

1774
01:06:25,599 --> 01:06:27,839
empty bracket that's false so it's going

1775
01:06:27,839 --> 01:06:29,599
to return the second value which just

1776
01:06:29,599 --> 01:06:31,200
happens to be false

1777
01:06:31,200 --> 01:06:33,520
and since this is a false value it's

1778
01:06:33,520 --> 01:06:35,760
going to return the second option which

1779
01:06:35,760 --> 01:06:39,119
also happens to equal to false

1780
01:06:39,119 --> 01:06:40,000
so

1781
01:06:40,000 --> 01:06:41,680
one way to think about it for the word

1782
01:06:41,680 --> 01:06:44,480
or is so the pi this is how the python

1783
01:06:44,480 --> 01:06:48,319
docs describe it if x is false

1784
01:06:48,319 --> 01:06:49,520
then why

1785
01:06:49,520 --> 01:06:50,960
else x

1786
01:06:50,960 --> 01:06:53,520
so this would be like x this would be y

1787
01:06:53,520 --> 01:06:57,359
if else is false then why else x

1788
01:06:57,359 --> 01:06:59,599
and then for and down here let's look at

1789
01:06:59,599 --> 01:07:02,960
some examples for and and only evaluates

1790
01:07:02,960 --> 01:07:05,839
the second argument if the first one is

1791
01:07:05,839 --> 01:07:09,119
true so if the first argument is falsy

1792
01:07:09,119 --> 01:07:11,359
such as false zero and empty string

1793
01:07:11,359 --> 01:07:14,400
empty brackets it returns that argument

1794
01:07:14,400 --> 01:07:17,119
otherwise it evaluates the second

1795
01:07:17,119 --> 01:07:18,480
argument

1796
01:07:18,480 --> 01:07:20,640
so the way the way the python docs

1797
01:07:20,640 --> 01:07:24,640
describe it is if x is false then x

1798
01:07:24,640 --> 01:07:26,160
else y

1799
01:07:26,160 --> 01:07:28,079
okay let's quickly discuss bitwise

1800
01:07:28,079 --> 01:07:31,440
operators they're very rarely used only

1801
01:07:31,440 --> 01:07:34,559
in very specific situations but it's

1802
01:07:34,559 --> 01:07:37,039
worth knowing what these bitwise

1803
01:07:37,039 --> 01:07:39,920
operators are just in case you're in the

1804
01:07:39,920 --> 01:07:42,079
very rare situation that you need to use

1805
01:07:42,079 --> 01:07:43,440
them

1806
01:07:43,440 --> 01:07:45,280
and then two other types of operators

1807
01:07:45,280 --> 01:07:48,160
are is and in

1808
01:07:48,160 --> 01:07:51,920
now is is called the identity operator

1809
01:07:51,920 --> 01:07:54,160
it's used to compare two objects and

1810
01:07:54,160 --> 01:07:56,960
returns true if both are the same

1811
01:07:56,960 --> 01:08:00,079
objects if both are the same object and

1812
01:08:00,079 --> 01:08:02,400
i'll be talking more about that later in

1813
01:08:02,400 --> 01:08:06,319
the section on objects and then in is

1814
01:08:06,319 --> 01:08:08,720
called the membership operator this is

1815
01:08:08,720 --> 01:08:11,440
used to tell if a value is contained in

1816
01:08:11,440 --> 01:08:14,319
a list or another sequence and we'll be

1817
01:08:14,319 --> 01:08:16,880
talking more about the in operator when

1818
01:08:16,880 --> 01:08:19,198
we're discussing lists and other

1819
01:08:19,198 --> 01:08:21,520
sequences later in this course

1820
01:08:21,520 --> 01:08:23,359
and the final thing i want to talk to

1821
01:08:23,359 --> 01:08:26,479
you about is the ternary operator now

1822
01:08:26,479 --> 01:08:28,799
the turn area operator in python allows

1823
01:08:28,799 --> 01:08:32,000
you to quickly define a conditional

1824
01:08:32,000 --> 01:08:34,080
so here will be like kind of the slow

1825
01:08:34,080 --> 01:08:37,600
way to do it without a ternary operator

1826
01:08:37,600 --> 01:08:39,520
so let's say you have a function that in

1827
01:08:39,520 --> 01:08:43,040
this function is comparing age with 18

1828
01:08:43,040 --> 01:08:45,120
and it's going to return true or false

1829
01:08:45,120 --> 01:08:47,920
depending on the risk result

1830
01:08:47,920 --> 01:08:50,479
so instead of writing like this

1831
01:08:50,479 --> 01:08:53,198
we can implement it with a ternary

1832
01:08:53,198 --> 01:08:57,599
operator so let's do death

1833
01:08:58,450 --> 01:08:59,679
[Music]

1834
01:08:59,679 --> 01:09:00,479
is

1835
01:09:00,479 --> 01:09:03,759
adult i'll call it is adult 2 because

1836
01:09:03,759 --> 01:09:06,479
it's the second way of doing it and this

1837
01:09:06,479 --> 01:09:08,238
time we're going to use the ternary

1838
01:09:08,238 --> 01:09:11,839
operator it's just going to be return

1839
01:09:11,839 --> 01:09:13,120
true

1840
01:09:13,120 --> 01:09:15,359
if age

1841
01:09:15,359 --> 01:09:18,719
is greater than 18

1842
01:09:18,719 --> 01:09:21,719
else

1843
01:09:22,238 --> 01:09:24,639
false

1844
01:09:24,799 --> 01:09:27,120
so you can see first we define the

1845
01:09:27,120 --> 01:09:29,679
result if the condition is true

1846
01:09:29,679 --> 01:09:32,479
then we evaluate the condition

1847
01:09:32,479 --> 01:09:34,399
and then we define the result if the

1848
01:09:34,399 --> 01:09:36,080
condition is false

1849
01:09:36,080 --> 01:09:38,319
it's basically an if else statement all

1850
01:09:38,319 --> 01:09:40,880
on a single line

1851
01:09:40,880 --> 01:09:44,158
okay let's talk more about strings in

1852
01:09:44,158 --> 01:09:46,640
python so a string in python is a series

1853
01:09:46,640 --> 01:09:49,520
of characters enclosed in quotes in

1854
01:09:49,520 --> 01:09:52,479
double quotes or it could be

1855
01:09:52,479 --> 01:09:54,640
single quotes

1856
01:09:54,640 --> 01:09:57,120
as long as the type of quote is the same

1857
01:09:57,120 --> 01:09:59,679
on both sides and we already talked

1858
01:09:59,679 --> 01:10:03,679
about how you can assign a string to a

1859
01:10:03,679 --> 01:10:04,380
variable

1860
01:10:04,380 --> 01:10:06,400
[Music]

1861
01:10:06,400 --> 01:10:08,080
and we already talked about how you can

1862
01:10:08,080 --> 01:10:10,960
concatenate two strings using the plus

1863
01:10:10,960 --> 01:10:14,640
operator like phrase

1864
01:10:14,840 --> 01:10:17,760
equals bo and then you can concatenate

1865
01:10:17,760 --> 01:10:19,600
with the plus operator

1866
01:10:19,600 --> 01:10:21,120
is my

1867
01:10:21,120 --> 01:10:21,790
name

1868
01:10:21,790 --> 01:10:25,000
[Music]

1869
01:10:25,120 --> 01:10:26,560
and then

1870
01:10:26,560 --> 01:10:29,360
also instead of putting a string here

1871
01:10:29,360 --> 01:10:31,760
you can put the variable so i could put

1872
01:10:31,760 --> 01:10:34,000
name is my name and we already have the

1873
01:10:34,000 --> 01:10:36,640
variable here to equal bo so when you

1874
01:10:36,640 --> 01:10:38,480
concatenate you can concatenate the

1875
01:10:38,480 --> 01:10:40,880
strings or the variables

1876
01:10:40,880 --> 01:10:43,440
you can also append to a string using

1877
01:10:43,440 --> 01:10:45,840
the plus equal operator so let's say i

1878
01:10:45,840 --> 01:10:48,640
want to add to this name and i'm so i'm

1879
01:10:48,640 --> 01:10:51,120
going to say name

1880
01:10:51,120 --> 01:10:54,239
plus equals

1881
01:10:56,880 --> 01:10:59,840
is my name so we're adding is my name to

1882
01:10:59,840 --> 01:11:02,880
the end of this so i can say

1883
01:11:02,880 --> 01:11:05,280
print

1884
01:11:05,840 --> 01:11:06,960
name

1885
01:11:06,960 --> 01:11:08,239
and then we can see what it looks like

1886
01:11:08,239 --> 01:11:11,760
when you use the plus equal operator

1887
01:11:11,760 --> 01:11:14,880
so bo is my name

1888
01:11:14,880 --> 01:11:16,719
and then we already talked about how you

1889
01:11:16,719 --> 01:11:19,600
can convert a number to a string using

1890
01:11:19,600 --> 01:11:20,400
the

1891
01:11:20,400 --> 01:11:24,159
str class constructor like if we had age

1892
01:11:24,159 --> 01:11:28,480
equals we could make this a string

1893
01:11:28,480 --> 01:11:30,560
but we passed this integer it converts

1894
01:11:30,560 --> 01:11:32,239
to a string and now it's going to be a

1895
01:11:32,239 --> 01:11:33,840
string

1896
01:11:33,840 --> 01:11:35,760
now here's something new a string can be

1897
01:11:35,760 --> 01:11:38,560
a multi what can be multi-line when

1898
01:11:38,560 --> 01:11:41,120
defined with a special syntax so if you

1899
01:11:41,120 --> 01:11:43,360
enclose it if you enclose the string in

1900
01:11:43,360 --> 01:11:45,360
a set of three

1901
01:11:45,360 --> 01:11:46,400
quotes

1902
01:11:46,400 --> 01:11:48,719
so let me show you an example get rid of

1903
01:11:48,719 --> 01:11:50,719
all this

1904
01:11:50,719 --> 01:11:52,800
and i'm going to

1905
01:11:52,800 --> 01:11:54,800
print an entire

1906
01:11:54,800 --> 01:11:56,239
string here

1907
01:11:56,239 --> 01:11:58,800
so we're going to make this a multi-line

1908
01:11:58,800 --> 01:12:01,520
string i'm going to put three quotation

1909
01:12:01,520 --> 01:12:02,560
marks

1910
01:12:02,560 --> 01:12:04,239
and then it's going to start with three

1911
01:12:04,239 --> 01:12:06,400
quotation marks and end with three

1912
01:12:06,400 --> 01:12:08,480
quotation marks and then i can make it

1913
01:12:08,480 --> 01:12:12,080
multi-line so i can say bo is and then i

1914
01:12:12,080 --> 01:12:13,120
can

1915
01:12:13,120 --> 01:12:15,280
put some extra lines

1916
01:12:15,280 --> 01:12:17,199
39

1917
01:12:17,199 --> 01:12:21,040
years old now if i print that

1918
01:12:21,040 --> 01:12:23,440
and you can see it's going to print

1919
01:12:23,440 --> 01:12:25,520
the different lines here so we just made

1920
01:12:25,520 --> 01:12:27,760
a multi-line string

1921
01:12:27,760 --> 01:12:29,760
and you can also instead of using the

1922
01:12:29,760 --> 01:12:31,920
double quotes you can put a single quote

1923
01:12:31,920 --> 01:12:34,400
as long as they're the same at the

1924
01:12:34,400 --> 01:12:36,560
at the beginning and ending

1925
01:12:36,560 --> 01:12:39,280
now a string also has a set of built-in

1926
01:12:39,280 --> 01:12:41,600
methods let me show you an example so if

1927
01:12:41,600 --> 01:12:44,080
i have this string

1928
01:12:44,080 --> 01:12:46,080
bow but i'm going to put at the end of

1929
01:12:46,080 --> 01:12:49,199
the string i'm going to put dot

1930
01:12:49,199 --> 01:12:52,239
upper and i put parentheses at the end

1931
01:12:52,239 --> 01:12:54,719
so if i run this now it's going to print

1932
01:12:54,719 --> 01:12:57,360
it in all capital letters

1933
01:12:57,360 --> 01:12:59,679
and the same thing you can use with

1934
01:12:59,679 --> 01:13:02,800
lower so if it if i had a string that

1935
01:13:02,800 --> 01:13:06,000
had a few capital letters

1936
01:13:06,000 --> 01:13:07,760
okay now it's all

1937
01:13:07,760 --> 01:13:11,920
lower now i can also type in a title

1938
01:13:11,920 --> 01:13:13,600
and this is going to

1939
01:13:13,600 --> 01:13:16,320
make each lut so i can say

1940
01:13:16,320 --> 01:13:17,280
bow

1941
01:13:17,280 --> 01:13:18,719
person

1942
01:13:18,719 --> 01:13:21,840
uh and i do this so it's going to cat

1943
01:13:21,840 --> 01:13:23,440
it's going to a title that's going to

1944
01:13:23,440 --> 01:13:26,320
make the first letter of each string

1945
01:13:26,320 --> 01:13:28,080
a capital letter

1946
01:13:28,080 --> 01:13:32,640
i can also check things like i can say

1947
01:13:32,640 --> 01:13:35,040
is lower and it's going to check if it's

1948
01:13:35,040 --> 01:13:38,800
all lowercase letters false but if i

1949
01:13:38,800 --> 01:13:41,920
make it so it is all lowercase letters

1950
01:13:41,920 --> 01:13:45,199
it's going to say true so here's just a

1951
01:13:45,199 --> 01:13:48,460
list of a few common ones

1952
01:13:48,460 --> 01:13:51,600
[Music]

1953
01:13:51,600 --> 01:13:53,920
you can do is alpha to check if it

1954
01:13:53,920 --> 01:13:55,679
contains only characters

1955
01:13:55,679 --> 01:13:56,880
is

1956
01:13:56,880 --> 01:13:58,640
l num to

1957
01:13:58,640 --> 01:14:00,239
check if a string contains characters or

1958
01:14:00,239 --> 01:14:03,760
digits and is not empty is decimal

1959
01:14:03,760 --> 01:14:06,080
lower to make it lower case is lower

1960
01:14:06,080 --> 01:14:08,400
upper is upper title starts with to

1961
01:14:08,400 --> 01:14:09,920
check if it starts with a specific

1962
01:14:09,920 --> 01:14:11,920
substring to check if it ends with you

1963
01:14:11,920 --> 01:14:14,800
can replace part of a string split a

1964
01:14:14,800 --> 01:14:17,679
string you can strip the white space

1965
01:14:17,679 --> 01:14:20,080
from a string you can append new letters

1966
01:14:20,080 --> 01:14:22,640
to a string you can find the position of

1967
01:14:22,640 --> 01:14:25,520
a substring spring string and there's a

1968
01:14:25,520 --> 01:14:26,960
few more but these are some of the most

1969
01:14:26,960 --> 01:14:30,719
common things you can do with a string

1970
01:14:30,719 --> 01:14:32,800
and then one thing to know about these

1971
01:14:32,800 --> 01:14:36,239
is that they they all return a new

1972
01:14:36,239 --> 01:14:39,679
modified string they don't actually

1973
01:14:39,679 --> 01:14:42,640
alter the original string so let me show

1974
01:14:42,640 --> 01:14:44,800
you what i mean by that so let's say we

1975
01:14:44,800 --> 01:14:48,239
have we'll do name equals bow again let

1976
01:14:48,239 --> 01:14:50,320
me zoom in a little bit

1977
01:14:50,320 --> 01:14:52,880
and we're going to

1978
01:14:52,880 --> 01:14:54,880
print

1979
01:14:54,880 --> 01:14:58,159
name dot lower

1980
01:14:59,199 --> 01:15:01,360
now i'm going to print

1981
01:15:01,360 --> 01:15:02,239
name

1982
01:15:02,239 --> 01:15:05,840
so if i just run this

1983
01:15:06,719 --> 01:15:09,360
and we first figure out what went wrong

1984
01:15:09,360 --> 01:15:12,080
here it looks like there's a few extra

1985
01:15:12,080 --> 01:15:14,020
parentheses

1986
01:15:14,020 --> 01:15:17,259
[Music]

1987
01:15:18,640 --> 01:15:21,679
okay let's run this and you can see it's

1988
01:15:21,679 --> 01:15:24,640
going to make it all lowercase but then

1989
01:15:24,640 --> 01:15:26,480
when i print the name again

1990
01:15:26,480 --> 01:15:29,280
it's not still lowercase because this

1991
01:15:29,280 --> 01:15:32,159
just returns a brand new modified string

1992
01:15:32,159 --> 01:15:34,640
it doesn't actually change anything

1993
01:15:34,640 --> 01:15:38,800
in the original string

1994
01:15:38,800 --> 01:15:40,800
and then you can use some global

1995
01:15:40,800 --> 01:15:43,840
functions with strings as well so one

1996
01:15:43,840 --> 01:15:45,840
function we haven't discussed yet is the

1997
01:15:45,840 --> 01:15:48,560
l e n function which stands for length

1998
01:15:48,560 --> 01:15:51,360
it can give the length of a string so

1999
01:15:51,360 --> 01:15:53,840
i'm going to type an l-e-n

2000
01:15:53,840 --> 01:15:55,440
and then so there's just some global

2001
01:15:55,440 --> 01:15:56,800
functions that work with a lot of

2002
01:15:56,800 --> 01:16:00,480
different types of data and the length

2003
01:16:00,480 --> 01:16:03,679
of this is four you can see

2004
01:16:03,679 --> 01:16:07,040
and then you can use the in operator now

2005
01:16:07,040 --> 01:16:09,679
i briefly mentioned the n operator

2006
01:16:09,679 --> 01:16:11,199
earlier so

2007
01:16:11,199 --> 01:16:14,480
let me show you one use case so we can

2008
01:16:14,480 --> 01:16:17,199
use the in operator to check if a string

2009
01:16:17,199 --> 01:16:20,719
contains a substring like for instance i

2010
01:16:20,719 --> 01:16:22,719
can say

2011
01:16:22,719 --> 01:16:24,239
a u

2012
01:16:24,239 --> 01:16:25,920
in

2013
01:16:25,920 --> 01:16:29,520
name so let's check if name

2014
01:16:29,520 --> 01:16:32,480
contains the letters a u

2015
01:16:32,480 --> 01:16:37,280
well true it does but if if if it if it

2016
01:16:37,280 --> 01:16:38,960
if it didn't if i just add an extra

2017
01:16:38,960 --> 01:16:40,640
string it's going to say

2018
01:16:40,640 --> 01:16:41,679
false

2019
01:16:41,679 --> 01:16:45,120
okay another thing with strings um

2020
01:16:45,120 --> 01:16:48,719
escaping is a way to add special

2021
01:16:48,719 --> 01:16:51,679
characters into a string

2022
01:16:51,679 --> 01:16:54,880
for example let's say we wanted to add a

2023
01:16:54,880 --> 01:16:57,600
double quote within the string how can i

2024
01:16:57,600 --> 01:16:59,520
add a double quote into a string that's

2025
01:16:59,520 --> 01:17:02,719
wrapped in double quotes if i put a

2026
01:17:02,719 --> 01:17:04,480
double quote like that that's not going

2027
01:17:04,480 --> 01:17:06,000
to work because this is going to be the

2028
01:17:06,000 --> 01:17:08,640
string and then it's not going to the

2029
01:17:08,640 --> 01:17:09,920
code editor is not going to know what to

2030
01:17:09,920 --> 01:17:12,080
do with this last little bit here

2031
01:17:12,080 --> 01:17:12,960
so

2032
01:17:12,960 --> 01:17:15,120
the way to go is to escape the double

2033
01:17:15,120 --> 01:17:17,679
quote inside the string with the

2034
01:17:17,679 --> 01:17:20,239
backslash character so right before this

2035
01:17:20,239 --> 01:17:22,080
quote i'm going to put the backslash

2036
01:17:22,080 --> 01:17:23,600
character

2037
01:17:23,600 --> 01:17:26,719
and then you can see it now all is all

2038
01:17:26,719 --> 01:17:28,960
the same color as a string and if i

2039
01:17:28,960 --> 01:17:31,120
print it it's going to it's not going to

2040
01:17:31,120 --> 01:17:33,760
print the backslash character so putting

2041
01:17:33,760 --> 01:17:35,520
a backslash is how you escape a

2042
01:17:35,520 --> 01:17:38,159
character and that just means

2043
01:17:38,159 --> 01:17:39,040
this

2044
01:17:39,040 --> 01:17:40,880
the the backslash character means that

2045
01:17:40,880 --> 01:17:42,960
the next character is not going to mean

2046
01:17:42,960 --> 01:17:44,400
what it normally means

2047
01:17:44,400 --> 01:17:47,199
it's going to actually just be the

2048
01:17:47,199 --> 01:17:49,920
string of that character

2049
01:17:49,920 --> 01:17:52,880
and you can do the same thing with so

2050
01:17:52,880 --> 01:17:55,040
with in this particular example you may

2051
01:17:55,040 --> 01:17:57,520
not need to do it because you can always

2052
01:17:57,520 --> 01:18:00,480
just put a single quote at the beginning

2053
01:18:00,480 --> 01:18:01,920
and ending

2054
01:18:01,920 --> 01:18:04,640
and as long as you have a different type

2055
01:18:04,640 --> 01:18:06,880
of quote at the beginning and ending

2056
01:18:06,880 --> 01:18:08,000
then

2057
01:18:08,000 --> 01:18:10,719
you can put a double quote in the middle

2058
01:18:10,719 --> 01:18:13,040
but let's say you want a string that

2059
01:18:13,040 --> 01:18:15,360
contains both a single quote and double

2060
01:18:15,360 --> 01:18:16,880
quote within the string

2061
01:18:16,880 --> 01:18:18,640
then you will have to backslash like if

2062
01:18:18,640 --> 01:18:19,920
i just put a single quote there it's

2063
01:18:19,920 --> 01:18:21,360
going to mess it up but if i put it

2064
01:18:21,360 --> 01:18:22,719
backslash

2065
01:18:22,719 --> 01:18:25,040
now it's going to have the single the

2066
01:18:25,040 --> 01:18:27,280
double quote and the single quote right

2067
01:18:27,280 --> 01:18:29,199
within the string

2068
01:18:29,199 --> 01:18:30,320
and

2069
01:18:30,320 --> 01:18:32,880
you can also use the escape character

2070
01:18:32,880 --> 01:18:33,679
for

2071
01:18:33,679 --> 01:18:37,199
special formatting characters like uh

2072
01:18:37,199 --> 01:18:39,600
for instance what if i want there to be

2073
01:18:39,600 --> 01:18:42,320
a new line between the first two and the

2074
01:18:42,320 --> 01:18:44,400
last two letters of the string if i do

2075
01:18:44,400 --> 01:18:46,000
slash n

2076
01:18:46,000 --> 01:18:48,640
that is going to not actually just put a

2077
01:18:48,640 --> 01:18:50,080
slash in let's see what happens when i

2078
01:18:50,080 --> 01:18:53,600
put that this is means new line you can

2079
01:18:53,600 --> 01:18:56,960
see it says be new line a you

2080
01:18:56,960 --> 01:18:59,360
and then another way a reason why you

2081
01:18:59,360 --> 01:19:01,520
may want to use an escape here like

2082
01:19:01,520 --> 01:19:03,360
let's see what happens if i do this

2083
01:19:03,360 --> 01:19:04,239
this

2084
01:19:04,239 --> 01:19:06,080
that's not looking how i want to look

2085
01:19:06,080 --> 01:19:09,600
because it's normally normally when

2086
01:19:09,600 --> 01:19:12,320
the code is running if it sees this

2087
01:19:12,320 --> 01:19:14,000
backslash it thinks it's an escape

2088
01:19:14,000 --> 01:19:16,320
character so if you want to actually add

2089
01:19:16,320 --> 01:19:18,640
a backslash to a string you have to

2090
01:19:18,640 --> 01:19:21,360
escape the backslash so now it's be

2091
01:19:21,360 --> 01:19:24,080
backslash au

2092
01:19:24,080 --> 01:19:26,159
okay we're done talking about escape

2093
01:19:26,159 --> 01:19:28,880
characters now i'm going to tell you how

2094
01:19:28,880 --> 01:19:32,159
you can get a specific character in a

2095
01:19:32,159 --> 01:19:35,440
string so given a string you can get its

2096
01:19:35,440 --> 01:19:38,000
character using square brackets to get a

2097
01:19:38,000 --> 01:19:41,120
specific item given its index starting

2098
01:19:41,120 --> 01:19:42,800
from zero

2099
01:19:42,800 --> 01:19:43,760
so

2100
01:19:43,760 --> 01:19:46,080
one thing to know about programming is

2101
01:19:46,080 --> 01:19:47,199
that

2102
01:19:47,199 --> 01:19:49,920
whenever you're counting from in most

2103
01:19:49,920 --> 01:19:52,400
programming languages you start counting

2104
01:19:52,400 --> 01:19:55,760
starting at zero so this is going to get

2105
01:19:55,760 --> 01:19:59,120
the letter at index one so this is index

2106
01:19:59,120 --> 01:20:02,400
zero the b the e is at index one index

2107
01:20:02,400 --> 01:20:05,840
two index three so if i run that we can

2108
01:20:05,840 --> 01:20:09,120
see we are getting the e that's at index

2109
01:20:09,120 --> 01:20:12,080
one if i want to get the b i just put a

2110
01:20:12,080 --> 01:20:15,520
zero in the brackets and we get the b

2111
01:20:15,520 --> 01:20:18,159
and then we can use a negative number to

2112
01:20:18,159 --> 01:20:21,120
start counting at the end so if i put

2113
01:20:21,120 --> 01:20:23,120
negative one it's going to start here

2114
01:20:23,120 --> 01:20:24,400
zero

2115
01:20:24,400 --> 01:20:27,600
one and that's going to be a oh you okay

2116
01:20:27,600 --> 01:20:29,679
i guess when it's going backwards it's

2117
01:20:29,679 --> 01:20:31,440
not going to start zero because there is

2118
01:20:31,440 --> 01:20:33,360
no negative zero that makes sense so

2119
01:20:33,360 --> 01:20:35,040
negative one is going to be the last

2120
01:20:35,040 --> 01:20:37,040
character in the string so negative one

2121
01:20:37,040 --> 01:20:40,719
negative two negative three and so on

2122
01:20:40,719 --> 01:20:43,360
we can also use a range using what we

2123
01:20:43,360 --> 01:20:47,840
call slicing so if i put 1 colon 2

2124
01:20:47,840 --> 01:20:50,159
this is going to be every character

2125
01:20:50,159 --> 01:20:52,719
starting at index 1

2126
01:20:52,719 --> 01:20:56,480
and ending before index 2. so it starts

2127
01:20:56,480 --> 01:20:58,159
at index 1 so it starts with that

2128
01:20:58,159 --> 01:21:00,400
character and it ends before an x2 which

2129
01:21:00,400 --> 01:21:02,000
is a so that's actually only going to

2130
01:21:02,000 --> 01:21:05,280
return an e

2131
01:21:05,280 --> 01:21:08,560
but if i put 3 here

2132
01:21:08,560 --> 01:21:11,440
now we can return a u

2133
01:21:11,440 --> 01:21:15,280
and if i put bo is cool we can put one

2134
01:21:15,280 --> 01:21:17,600
further down i'm going to put 7

2135
01:21:17,600 --> 01:21:18,960
and we can see

2136
01:21:18,960 --> 01:21:24,320
it's going to return part of this string

2137
01:21:24,320 --> 01:21:27,440
and then you can also start if you just

2138
01:21:27,440 --> 01:21:30,320
put a blank before the colon then it's

2139
01:21:30,320 --> 01:21:32,320
going to turn everything up to it's

2140
01:21:32,320 --> 01:21:33,679
going to start at the beginning and

2141
01:21:33,679 --> 01:21:36,239
return everything up to character seven

2142
01:21:36,239 --> 01:21:37,679
and you can also do in the opposite

2143
01:21:37,679 --> 01:21:40,080
direction so if i put a blank after the

2144
01:21:40,080 --> 01:21:42,560
colon it's going to go to the end of the

2145
01:21:42,560 --> 01:21:45,199
string so it's going to say is cool

2146
01:21:45,199 --> 01:21:46,960
so let's talk about

2147
01:21:46,960 --> 01:21:48,400
booleans well we already talked more

2148
01:21:48,400 --> 01:21:50,159
about we already talked about booleans

2149
01:21:50,159 --> 01:21:51,520
but we're going to talk a little bit

2150
01:21:51,520 --> 01:21:54,000
more about boolean which is considered

2151
01:21:54,000 --> 01:21:56,880
the bool type and this can have two

2152
01:21:56,880 --> 01:22:01,600
values true or false so i can say done

2153
01:22:01,600 --> 01:22:03,679
equals

2154
01:22:03,679 --> 01:22:04,719
true

2155
01:22:04,719 --> 01:22:06,560
or you can do done

2156
01:22:06,560 --> 01:22:09,440
equals false now

2157
01:22:09,440 --> 01:22:11,520
notice that it always has a capital t or

2158
01:22:11,520 --> 01:22:13,600
a capital f so

2159
01:22:13,600 --> 01:22:15,520
if you don't put a capital t or capital

2160
01:22:15,520 --> 01:22:17,520
f it won't be considered the the true

2161
01:22:17,520 --> 01:22:19,840
boolean value in python

2162
01:22:19,840 --> 01:22:22,320
and booleans can be especially useful

2163
01:22:22,320 --> 01:22:24,239
with the conditional co

2164
01:22:24,239 --> 01:22:26,639
with conditional control structures like

2165
01:22:26,639 --> 01:22:28,320
if statements

2166
01:22:28,320 --> 01:22:30,400
well we already discussed if statements

2167
01:22:30,400 --> 01:22:31,600
in the first part of the course and

2168
01:22:31,600 --> 01:22:34,000
we'll be discussing them more in detail

2169
01:22:34,000 --> 01:22:35,760
later but let me just show you an

2170
01:22:35,760 --> 01:22:38,960
example so if done and i'm going to

2171
01:22:38,960 --> 01:22:41,120
erase this done because we want to be

2172
01:22:41,120 --> 01:22:43,679
true so if done

2173
01:22:43,679 --> 01:22:47,440
and then we'll say print

2174
01:22:48,239 --> 01:22:50,600
yes

2175
01:22:50,600 --> 01:22:53,199
[Music]

2176
01:22:53,199 --> 01:22:54,800
else

2177
01:22:54,800 --> 01:22:57,199
print

2178
01:23:00,960 --> 01:23:02,159
no

2179
01:23:02,159 --> 01:23:04,560
okay so i can run that and it's going to

2180
01:23:04,560 --> 01:23:06,960
print yes because done

2181
01:23:06,960 --> 01:23:10,760
equals true but if done equals false

2182
01:23:10,760 --> 01:23:13,440
[Music]

2183
01:23:13,440 --> 01:23:15,120
then it's just going to say

2184
01:23:15,120 --> 01:23:15,920
no

2185
01:23:15,920 --> 01:23:18,880
so when evaluating a value for true or

2186
01:23:18,880 --> 01:23:22,080
false if the value is not a bool or

2187
01:23:22,080 --> 01:23:24,159
boolean like if it's not true or false

2188
01:23:24,159 --> 01:23:26,639
we have some rules depending on the type

2189
01:23:26,639 --> 01:23:29,679
we're checking so numbers are always

2190
01:23:29,679 --> 01:23:30,560
true

2191
01:23:30,560 --> 01:23:33,840
except for the number zero

2192
01:23:33,840 --> 01:23:37,199
if i put 0 here it's going to evaluate

2193
01:23:37,199 --> 01:23:40,800
to false but if i put any other number

2194
01:23:40,800 --> 01:23:44,080
here it's going to be true even like

2195
01:23:44,080 --> 01:23:46,400
negative 1 or anything like that it's

2196
01:23:46,400 --> 01:23:49,360
going to be true oh i guess

2197
01:23:49,360 --> 01:23:50,800
that i didn't put negative 1 i put

2198
01:23:50,800 --> 01:23:53,440
equals 1. so if it's negative 1 that's

2199
01:23:53,440 --> 01:23:55,120
going to be true

2200
01:23:55,120 --> 01:23:59,520
so strings are always false

2201
01:23:59,520 --> 01:24:00,239
oh

2202
01:24:00,239 --> 01:24:04,480
strings are false only when empty

2203
01:24:04,480 --> 01:24:06,480
so if i say

2204
01:24:06,480 --> 01:24:08,159
bow here this is going to be true

2205
01:24:08,159 --> 01:24:10,320
because it's not an empty string but if

2206
01:24:10,320 --> 01:24:12,960
i make an empty string then it's going

2207
01:24:12,960 --> 01:24:13,840
to be

2208
01:24:13,840 --> 01:24:15,360
false

2209
01:24:15,360 --> 01:24:18,080
lists tuples and sets and dictionaries

2210
01:24:18,080 --> 01:24:20,000
which we'll talk about more later are

2211
01:24:20,000 --> 01:24:22,639
false only when empty so it's going to

2212
01:24:22,639 --> 01:24:25,040
be if a list double star dictionary is

2213
01:24:25,040 --> 01:24:28,560
is filled with something that is true

2214
01:24:28,560 --> 01:24:30,400
and then also you can

2215
01:24:30,400 --> 01:24:33,760
check if a value is a boolean so if i

2216
01:24:33,760 --> 01:24:36,400
say done equals true

2217
01:24:36,400 --> 01:24:38,159
i can do

2218
01:24:38,159 --> 01:24:40,639
print

2219
01:24:41,520 --> 01:24:44,080
type we're going to check the type we're

2220
01:24:44,080 --> 01:24:47,679
going to check if the type of done

2221
01:24:47,679 --> 01:24:49,120
equals

2222
01:24:49,120 --> 01:24:52,080
bool so let's check it does that equal

2223
01:24:52,080 --> 01:24:53,760
boolean

2224
01:24:53,760 --> 01:24:57,679
true it does now let's see let's

2225
01:24:57,679 --> 01:25:00,400
change this to a different type and it's

2226
01:25:00,400 --> 01:25:02,159
going to say false so it can still

2227
01:25:02,159 --> 01:25:04,719
evaluate whether this is true or false

2228
01:25:04,719 --> 01:25:07,120
but the type is not a boolean the type

2229
01:25:07,120 --> 01:25:08,800
is a string

2230
01:25:08,800 --> 01:25:12,719
and let me show you another example code

2231
01:25:12,800 --> 01:25:14,560
so the global

2232
01:25:14,560 --> 01:25:17,280
the any function it's a global function

2233
01:25:17,280 --> 01:25:18,639
it's very useful when working with

2234
01:25:18,639 --> 01:25:20,000
booleans

2235
01:25:20,000 --> 01:25:23,120
it returns true if any of the values of

2236
01:25:23,120 --> 01:25:26,480
the iterable such as a list if any of

2237
01:25:26,480 --> 01:25:28,719
them are true it's going to return true

2238
01:25:28,719 --> 01:25:30,480
for all of them so

2239
01:25:30,480 --> 01:25:32,719
for instance book one read that's true

2240
01:25:32,719 --> 01:25:35,520
but book two read that's false but this

2241
01:25:35,520 --> 01:25:38,560
is going to return true because it's

2242
01:25:38,560 --> 01:25:40,480
checking if any of them are true and

2243
01:25:40,480 --> 01:25:44,000
then it's going to set this to true

2244
01:25:44,000 --> 01:25:46,880
now the all function is is similar but

2245
01:25:46,880 --> 01:25:48,480
returns true if

2246
01:25:48,480 --> 01:25:52,480
all of the values are true so

2247
01:25:52,480 --> 01:25:55,920
we see we have this value as true

2248
01:25:55,920 --> 01:25:58,719
we have this value as false

2249
01:25:58,719 --> 01:26:00,960
whereas any would have returned true

2250
01:26:00,960 --> 01:26:02,880
this is going to return false because it

2251
01:26:02,880 --> 01:26:05,760
only returns true if all of the values

2252
01:26:05,760 --> 01:26:08,000
are true

2253
01:26:08,000 --> 01:26:10,000
okay now let's talk about more

2254
01:26:10,000 --> 01:26:12,560
number data ties we already talked about

2255
01:26:12,560 --> 01:26:14,719
int an integer whole number we've

2256
01:26:14,719 --> 01:26:18,239
already talked about float which is any

2257
01:26:18,239 --> 01:26:20,159
number with a decimal point there's

2258
01:26:20,159 --> 01:26:22,880
another type called complex

2259
01:26:22,880 --> 01:26:25,440
complex numbers are an extension of the

2260
01:26:25,440 --> 01:26:28,239
familiar real number system in which all

2261
01:26:28,239 --> 01:26:30,880
numbers are expressed as a sum of a real

2262
01:26:30,880 --> 01:26:31,760
part

2263
01:26:31,760 --> 01:26:33,920
and an imaginary part

2264
01:26:33,920 --> 01:26:35,840
imaginary numbers are real multiples of

2265
01:26:35,840 --> 01:26:38,000
the imaginary unit which is the square

2266
01:26:38,000 --> 01:26:40,639
root of negative one often written

2267
01:26:40,639 --> 01:26:44,080
i in mathematics or j in engineering

2268
01:26:44,080 --> 01:26:46,400
python is built in support for complex

2269
01:26:46,400 --> 01:26:48,320
numbers which are written with

2270
01:26:48,320 --> 01:26:52,080
the the j notation so the imaginary part

2271
01:26:52,080 --> 01:26:55,600
is written with a s with a j suffix

2272
01:26:55,600 --> 01:26:58,080
so you can combine it you can use a

2273
01:26:58,080 --> 01:27:02,000
literal value like complex

2274
01:27:02,239 --> 01:27:03,600
equals

2275
01:27:03,600 --> 01:27:05,199
two plus

2276
01:27:05,199 --> 01:27:08,239
three j so the the j means it's the

2277
01:27:08,239 --> 01:27:11,199
imaginary part of the number or you can

2278
01:27:11,199 --> 01:27:14,639
use the complex constructor so i can put

2279
01:27:14,639 --> 01:27:15,920
num

2280
01:27:15,920 --> 01:27:17,199
equals

2281
01:27:17,199 --> 01:27:18,639
complex

2282
01:27:18,639 --> 01:27:20,719
and then i can pass in

2283
01:27:20,719 --> 01:27:23,920
two comma three so

2284
01:27:23,920 --> 01:27:26,639
the three part is the imaginary part the

2285
01:27:26,639 --> 01:27:29,520
two is the the real part the integer

2286
01:27:29,520 --> 01:27:30,560
part

2287
01:27:30,560 --> 01:27:34,400
and then once you have a complex number

2288
01:27:34,400 --> 01:27:37,120
you can get it's real or imaginary part

2289
01:27:37,120 --> 01:27:39,400
like this so i can say print

2290
01:27:39,400 --> 01:27:40,639
[Music]

2291
01:27:40,639 --> 01:27:41,920
num

2292
01:27:41,920 --> 01:27:43,600
dot real

2293
01:27:43,600 --> 01:27:45,360
or num

2294
01:27:45,360 --> 01:27:47,199
dot match

2295
01:27:47,199 --> 01:27:50,080
so this is going to be the 2 this is

2296
01:27:50,080 --> 01:27:52,800
going to be the 3. so if i just

2297
01:27:52,800 --> 01:27:54,239
uh

2298
01:27:54,239 --> 01:27:55,920
let me

2299
01:27:55,920 --> 01:28:00,000
i think the problem was

2300
01:28:00,000 --> 01:28:00,800
num

2301
01:28:00,800 --> 01:28:03,440
num one no so i'll do num one and num

2302
01:28:03,440 --> 01:28:06,000
two and we're gonna do this as num two

2303
01:28:06,000 --> 01:28:08,239
okay let's check this so

2304
01:28:08,239 --> 01:28:10,159
this is the real part this is the

2305
01:28:10,159 --> 01:28:12,159
imaginary part you can see they're being

2306
01:28:12,159 --> 01:28:15,520
returned as floats

2307
01:28:15,520 --> 01:28:18,080
and you can use the type function to

2308
01:28:18,080 --> 01:28:20,159
check the type

2309
01:28:20,159 --> 01:28:21,920
so now let's talk about some built-in

2310
01:28:21,920 --> 01:28:24,560
functions that help with numbers so one

2311
01:28:24,560 --> 01:28:27,760
of them is abs abs will return the

2312
01:28:27,760 --> 01:28:31,920
absolute value of a number so if i say

2313
01:28:31,920 --> 01:28:33,679
5.5

2314
01:28:33,679 --> 01:28:35,280
that's just going to be

2315
01:28:35,280 --> 01:28:39,440
5.5 but if i put negative 5.5 well

2316
01:28:39,440 --> 01:28:42,440
it will be 5.5 so

2317
01:28:42,440 --> 01:28:44,880
[Music]

2318
01:28:44,880 --> 01:28:47,440
so if i print this see 5.5 basically it

2319
01:28:47,440 --> 01:28:49,440
just makes it so it's not negative

2320
01:28:49,440 --> 01:28:51,120
then you can also use

2321
01:28:51,120 --> 01:28:55,280
round so if we do round

2322
01:28:55,280 --> 01:28:59,120
let's make this just 5.5 round is going

2323
01:28:59,120 --> 01:29:01,840
to round to the nearest integer so if i

2324
01:29:01,840 --> 01:29:04,000
do this it's just gonna be six so point

2325
01:29:04,000 --> 01:29:06,480
five is going to round up but if we did

2326
01:29:06,480 --> 01:29:07,760
uh

2327
01:29:07,760 --> 01:29:09,280
four nine

2328
01:29:09,280 --> 01:29:11,840
it's going to go down to five

2329
01:29:11,840 --> 01:29:14,800
you can also specify a second parameter

2330
01:29:14,800 --> 01:29:18,639
to set the decimal points precision so

2331
01:29:18,639 --> 01:29:21,199
i can

2332
01:29:21,360 --> 01:29:23,120
go to if i do

2333
01:29:23,120 --> 01:29:26,719
one here and i round it it's going to

2334
01:29:26,719 --> 01:29:28,000
instead of rounding to the nearest

2335
01:29:28,000 --> 01:29:29,920
integer it's now going to round to the

2336
01:29:29,920 --> 01:29:33,120
nearest tenths place value or one

2337
01:29:33,120 --> 01:29:34,560
decimal point

2338
01:29:34,560 --> 01:29:36,239
there are several other math utility

2339
01:29:36,239 --> 01:29:37,600
functions and constants that are

2340
01:29:37,600 --> 01:29:39,760
provided by the math standard library

2341
01:29:39,760 --> 01:29:41,600
like there's a math package a c math

2342
01:29:41,600 --> 01:29:44,880
package decimal pages fractions package

2343
01:29:44,880 --> 01:29:47,040
that makes it easier to work with

2344
01:29:47,040 --> 01:29:49,199
different types of numbers we'll explore

2345
01:29:49,199 --> 01:29:50,960
some of those more later on

2346
01:29:50,960 --> 01:29:53,040
now let's talk about in nums and noms

2347
01:29:53,040 --> 01:29:55,520
are readable names that are bound to a

2348
01:29:55,520 --> 01:29:58,080
constant value so to use a noms we're

2349
01:29:58,080 --> 01:29:59,679
going to have to import and numbs from

2350
01:29:59,679 --> 01:30:02,159
the inum standard library module

2351
01:30:02,159 --> 01:30:06,560
like this from enum import enum and now

2352
01:30:06,560 --> 01:30:08,560
we'll be talking more about

2353
01:30:08,560 --> 01:30:10,400
importing

2354
01:30:10,400 --> 01:30:13,120
stuff from modules later but once you

2355
01:30:13,120 --> 01:30:15,360
import it then we can initialize a new

2356
01:30:15,360 --> 01:30:18,840
and nom in this way so do class

2357
01:30:18,840 --> 01:30:22,400
state enum

2358
01:30:23,760 --> 01:30:27,140
and so we can have inactive

2359
01:30:27,140 --> 01:30:28,880
[Music]

2360
01:30:28,880 --> 01:30:30,320
equals 0

2361
01:30:30,320 --> 01:30:31,390
and active

2362
01:30:31,390 --> 01:30:32,719
[Music]

2363
01:30:32,719 --> 01:30:35,040
equals one

2364
01:30:35,040 --> 01:30:37,760
so basically the the word state this can

2365
01:30:37,760 --> 01:30:39,679
be anywhere any

2366
01:30:39,679 --> 01:30:42,719
word we like so we're setting

2367
01:30:42,719 --> 01:30:44,080
uh

2368
01:30:44,080 --> 01:30:45,360
basically a variable called

2369
01:30:45,360 --> 01:30:46,880
state.inactive

2370
01:30:46,880 --> 01:30:48,000
which is going to equal 0 or

2371
01:30:48,000 --> 01:30:50,239
state.active to equal 1.

2372
01:30:50,239 --> 01:30:51,679
so

2373
01:30:51,679 --> 01:30:52,960
you can reference this how you would

2374
01:30:52,960 --> 01:30:55,920
reference it you can do print

2375
01:30:55,920 --> 01:30:56,960
state

2376
01:30:56,960 --> 01:30:57,760
dot

2377
01:30:57,760 --> 01:30:59,840
active

2378
01:30:59,840 --> 01:31:02,320
and then if i just run the program we'll

2379
01:31:02,320 --> 01:31:03,360
see

2380
01:31:03,360 --> 01:31:04,239
now you can see it's just going to

2381
01:31:04,239 --> 01:31:07,440
return state to active instead of one

2382
01:31:07,440 --> 01:31:09,280
so to actually get the value you use

2383
01:31:09,280 --> 01:31:11,679
state to active dot value

2384
01:31:11,679 --> 01:31:13,920
and then we run that and then we'll see

2385
01:31:13,920 --> 01:31:15,520
one here

2386
01:31:15,520 --> 01:31:16,880
if you we want to just return

2387
01:31:16,880 --> 01:31:19,280
state.active that the sa that value can

2388
01:31:19,280 --> 01:31:21,040
be reached by the number assigned in the

2389
01:31:21,040 --> 01:31:24,159
num so state we can do

2390
01:31:24,159 --> 01:31:25,520
one

2391
01:31:25,520 --> 01:31:27,280
and if i print that it's now going to

2392
01:31:27,280 --> 01:31:29,199
say state.active

2393
01:31:29,199 --> 01:31:31,360
same for using the square brackets

2394
01:31:31,360 --> 01:31:35,679
notation so i could do states

2395
01:31:35,679 --> 01:31:38,400
i'll do see square brackets and put

2396
01:31:38,400 --> 01:31:39,920
active

2397
01:31:39,920 --> 01:31:42,000
if i print that it's going to print

2398
01:31:42,000 --> 01:31:46,000
state that active so this is basically

2399
01:31:46,000 --> 01:31:49,360
the only way to create constants in

2400
01:31:49,360 --> 01:31:50,639
python

2401
01:31:50,639 --> 01:31:53,120
python is no way to enforce the variable

2402
01:31:53,120 --> 01:31:56,080
should be a constant so some people use

2403
01:31:56,080 --> 01:31:59,280
enums to create a constant

2404
01:31:59,280 --> 01:32:01,679
and then nobody can reassign the value

2405
01:32:01,679 --> 01:32:02,560
so

2406
01:32:02,560 --> 01:32:03,840
when we do

2407
01:32:03,840 --> 01:32:05,840
state

2408
01:32:05,840 --> 01:32:08,560
or state active dot

2409
01:32:08,560 --> 01:32:10,159
value

2410
01:32:10,159 --> 01:32:11,679
so this is it's not going to be able to

2411
01:32:11,679 --> 01:32:14,320
be reassigned so basically there's two

2412
01:32:14,320 --> 01:32:15,440
ways to do we can do this bracket

2413
01:32:15,440 --> 01:32:18,000
notation or we can go back to the other

2414
01:32:18,000 --> 01:32:19,360
way

2415
01:32:19,360 --> 01:32:20,719
active

2416
01:32:20,719 --> 01:32:22,800
now we can also list all the possible

2417
01:32:22,800 --> 01:32:25,040
values for enum so

2418
01:32:25,040 --> 01:32:27,280
our num is called state and we can now

2419
01:32:27,280 --> 01:32:30,719
just print all the values oh i actually

2420
01:32:30,719 --> 01:32:31,760
did that wrong it's supposed to be a

2421
01:32:31,760 --> 01:32:33,120
list

2422
01:32:33,120 --> 01:32:35,840
so this is going to list the values of

2423
01:32:35,840 --> 01:32:37,360
the state

2424
01:32:37,360 --> 01:32:40,719
and we can see we have inactive 0 and

2425
01:32:40,719 --> 01:32:44,159
active is 1. and we can also count them

2426
01:32:44,159 --> 01:32:46,320
using the length function so we're going

2427
01:32:46,320 --> 01:32:49,120
to print the result of a length state

2428
01:32:49,120 --> 01:32:51,120
and that's just going to give us 2.

2429
01:32:51,120 --> 01:32:53,040
okay let's talk about more about user

2430
01:32:53,040 --> 01:32:54,960
input now we already discussed a little

2431
01:32:54,960 --> 01:32:56,880
bit in our first program

2432
01:32:56,880 --> 01:33:00,080
but you can do get user input by using

2433
01:33:00,080 --> 01:33:02,560
the input function so let's just get rid

2434
01:33:02,560 --> 01:33:04,000
of all this

2435
01:33:04,000 --> 01:33:06,639
and we'll do

2436
01:33:06,639 --> 01:33:07,520
age

2437
01:33:07,520 --> 01:33:10,320
equals input

2438
01:33:10,320 --> 01:33:12,400
and we can say

2439
01:33:12,400 --> 01:33:14,800
print

2440
01:33:14,880 --> 01:33:18,000
your age is

2441
01:33:18,000 --> 01:33:20,840
and then we just can concatenate that

2442
01:33:20,840 --> 01:33:22,639
with the

2443
01:33:22,639 --> 01:33:25,520
variable age and then also if you want

2444
01:33:25,520 --> 01:33:26,560
to

2445
01:33:26,560 --> 01:33:28,800
so let's just do a quick test and right

2446
01:33:28,800 --> 01:33:30,800
now it's looking for the age right now i

2447
01:33:30,800 --> 01:33:33,120
can put five your age is five so there's

2448
01:33:33,120 --> 01:33:35,520
two ways to make it say what is your age

2449
01:33:35,520 --> 01:33:37,199
we can do a print statement right before

2450
01:33:37,199 --> 01:33:38,239
here

2451
01:33:38,239 --> 01:33:41,600
and do what is

2452
01:33:41,600 --> 01:33:43,920
your age

2453
01:33:43,920 --> 01:33:45,040
and then

2454
01:33:45,040 --> 01:33:48,239
now we can put four your age is four

2455
01:33:48,239 --> 01:33:51,520
now you can also ins instead of

2456
01:33:51,520 --> 01:33:52,800
putting the print statement right before

2457
01:33:52,800 --> 01:33:55,600
here i'm going to copy this delete that

2458
01:33:55,600 --> 01:33:58,000
and we can put it right in this input

2459
01:33:58,000 --> 01:33:59,199
function

2460
01:33:59,199 --> 01:34:01,040
and then i'll say it'll still say what

2461
01:34:01,040 --> 01:34:03,280
is your age and i can

2462
01:34:03,280 --> 01:34:06,719
put an age here

2463
01:34:09,199 --> 01:34:11,600
so one thing to really realize about

2464
01:34:11,600 --> 01:34:13,679
this is that it gets the input at

2465
01:34:13,679 --> 01:34:16,080
runtime meaning the program will stop

2466
01:34:16,080 --> 01:34:18,480
execution and will wait until the user

2467
01:34:18,480 --> 01:34:20,719
types something and presses the enter

2468
01:34:20,719 --> 01:34:21,679
key

2469
01:34:21,679 --> 01:34:23,600
you can also do more complex input

2470
01:34:23,600 --> 01:34:26,400
processing and accept input at program

2471
01:34:26,400 --> 01:34:28,639
invocation time and we'll see how to do

2472
01:34:28,639 --> 01:34:30,320
that later on

2473
01:34:30,320 --> 01:34:32,239
if you want to get the input when the

2474
01:34:32,239 --> 01:34:33,840
program is run that's going to work

2475
01:34:33,840 --> 01:34:35,679
better for command line applications

2476
01:34:35,679 --> 01:34:37,440
other kinds of applications will need a

2477
01:34:37,440 --> 01:34:39,600
different way of accepting input

2478
01:34:39,600 --> 01:34:42,239
let's look more at control statements

2479
01:34:42,239 --> 01:34:43,520
this is another thing we've already

2480
01:34:43,520 --> 01:34:46,000
discussed earlier but we're going to

2481
01:34:46,000 --> 01:34:48,159
review it and and look at it in a little

2482
01:34:48,159 --> 01:34:50,400
more detail so a control statement is

2483
01:34:50,400 --> 01:34:52,639
like an if statement so if condition

2484
01:34:52,639 --> 01:34:54,560
that's this variable here equals true

2485
01:34:54,560 --> 01:34:56,639
then it's going to run everything in the

2486
01:34:56,639 --> 01:34:58,960
block a block is

2487
01:34:58,960 --> 01:35:01,679
the part that is indented one level

2488
01:35:01,679 --> 01:35:03,520
usually it's going to be either four or

2489
01:35:03,520 --> 01:35:05,679
two spaces in this case it's four spaces

2490
01:35:05,679 --> 01:35:07,520
sometimes it's two spaces it doesn't

2491
01:35:07,520 --> 01:35:08,880
matter it could even be one space as

2492
01:35:08,880 --> 01:35:11,679
long as it's the same as long as every

2493
01:35:11,679 --> 01:35:13,760
line of code is indented the same amount

2494
01:35:13,760 --> 01:35:15,199
so if i just run that

2495
01:35:15,199 --> 01:35:18,000
the condition was true the block can be

2496
01:35:18,000 --> 01:35:19,679
formed by a single line or multiple

2497
01:35:19,679 --> 01:35:21,600
lines and it ends whenever you move back

2498
01:35:21,600 --> 01:35:24,320
to the previous indentation level

2499
01:35:24,320 --> 01:35:25,280
so

2500
01:35:25,280 --> 01:35:28,080
for instance if once we are not indented

2501
01:35:28,080 --> 01:35:30,639
i can say print

2502
01:35:30,639 --> 01:35:32,000
outside

2503
01:35:32,000 --> 01:35:32,960
if

2504
01:35:32,960 --> 01:35:34,080
so then

2505
01:35:34,080 --> 01:35:35,920
that's always going to pres it's always

2506
01:35:35,920 --> 01:35:37,520
going to print this because it's not in

2507
01:35:37,520 --> 01:35:39,119
that if statement

2508
01:35:39,119 --> 01:35:41,280
and then we have the if else statements

2509
01:35:41,280 --> 01:35:43,520
where the else is if

2510
01:35:43,520 --> 01:35:45,280
if this does not true then it's going to

2511
01:35:45,280 --> 01:35:48,080
do whatever is in here so if i just

2512
01:35:48,080 --> 01:35:49,600
change this to false

2513
01:35:49,600 --> 01:35:51,040
then it's going to

2514
01:35:51,040 --> 01:35:54,480
print whatever the condition was false

2515
01:35:54,480 --> 01:35:56,080
and then we can have this series this is

2516
01:35:56,080 --> 01:35:57,520
something that we showed in the per the

2517
01:35:57,520 --> 01:36:00,080
program earlier but if and then elif

2518
01:36:00,080 --> 01:36:02,080
combines else and if so

2519
01:36:02,080 --> 01:36:04,560
if this is not true then i'll move on to

2520
01:36:04,560 --> 01:36:06,320
this line and else

2521
01:36:06,320 --> 01:36:08,560
if this is true then i'll do this else

2522
01:36:08,560 --> 01:36:10,560
if this is true and it'll just keep

2523
01:36:10,560 --> 01:36:13,520
going on and then it will always do the

2524
01:36:13,520 --> 01:36:14,960
this is if none of the other ones were

2525
01:36:14,960 --> 01:36:18,080
true it's going to do this

2526
01:36:18,080 --> 01:36:19,440
so since

2527
01:36:19,440 --> 01:36:21,199
it was testing this it's not even going

2528
01:36:21,199 --> 01:36:25,280
to evaluate anything later but if we

2529
01:36:25,280 --> 01:36:27,520
move this to false

2530
01:36:27,520 --> 01:36:30,080
and we change this to bow

2531
01:36:30,080 --> 01:36:32,080
then it's actually going to skip all the

2532
01:36:32,080 --> 01:36:33,360
way down

2533
01:36:33,360 --> 01:36:36,000
all the way to this else here

2534
01:36:36,000 --> 01:36:39,840
and if we do flavio

2535
01:36:39,840 --> 01:36:41,600
you can print that and then it's going

2536
01:36:41,600 --> 01:36:44,239
to say hello flavio from right here

2537
01:36:44,239 --> 01:36:45,199
okay that's all we're going to talk

2538
01:36:45,199 --> 01:36:46,560
about for this for now since we've

2539
01:36:46,560 --> 01:36:48,320
already covered it earlier in the course

2540
01:36:48,320 --> 01:36:50,159
now i'm going to go into more detail

2541
01:36:50,159 --> 01:36:53,600
about lists lists are an essential

2542
01:36:53,600 --> 01:36:57,040
python data structure and so an example

2543
01:36:57,040 --> 01:36:58,560
of a list would be let's create a list

2544
01:36:58,560 --> 01:37:02,400
called dogs so we're going to create

2545
01:37:02,400 --> 01:37:06,159
the dog names we have roger we have sid

2546
01:37:06,159 --> 01:37:08,639
and this allows you to group together

2547
01:37:08,639 --> 01:37:10,880
multiple values and reference them all

2548
01:37:10,880 --> 01:37:13,440
with a common name so we have a list of

2549
01:37:13,440 --> 01:37:16,400
dogs and this is just two strings so the

2550
01:37:16,400 --> 01:37:17,679
list always going to have the opening

2551
01:37:17,679 --> 01:37:19,119
closing brackets and each item in the

2552
01:37:19,119 --> 01:37:21,119
list is going to be separated with a

2553
01:37:21,119 --> 01:37:23,360
comma and a list can hold different

2554
01:37:23,360 --> 01:37:26,080
types of values so these are all strings

2555
01:37:26,080 --> 01:37:27,280
but we can

2556
01:37:27,280 --> 01:37:28,880
have a string

2557
01:37:28,880 --> 01:37:31,920
an integer a string a

2558
01:37:31,920 --> 01:37:33,119
boolean

2559
01:37:33,119 --> 01:37:36,480
and you can mix different types of data

2560
01:37:36,480 --> 01:37:37,520
types

2561
01:37:37,520 --> 01:37:39,520
in a single list

2562
01:37:39,520 --> 01:37:41,600
and then you can check if an item is

2563
01:37:41,600 --> 01:37:45,520
contained in a list with the in operator

2564
01:37:45,520 --> 01:37:47,119
so we talked about the in operator

2565
01:37:47,119 --> 01:37:48,480
earlier but let me show you how that

2566
01:37:48,480 --> 01:37:50,880
works so we're going to print here's

2567
01:37:50,880 --> 01:37:53,360
where we can use the in operator we're

2568
01:37:53,360 --> 01:37:55,440
going to check if roger

2569
01:37:55,440 --> 01:37:56,320
is

2570
01:37:56,320 --> 01:37:57,440
in

2571
01:37:57,440 --> 01:37:58,960
dogs

2572
01:37:58,960 --> 01:38:00,080
so let's see

2573
01:38:00,080 --> 01:38:03,040
so run that true but now let's check if

2574
01:38:03,040 --> 01:38:05,679
bo is in dogs well

2575
01:38:05,679 --> 01:38:08,000
false because it's checking

2576
01:38:08,000 --> 01:38:10,000
so this is how you can check if an item

2577
01:38:10,000 --> 01:38:11,840
is in a list

2578
01:38:11,840 --> 01:38:14,719
you can also define a list as an empty

2579
01:38:14,719 --> 01:38:16,800
string so i could actually just

2580
01:38:16,800 --> 01:38:19,280
remove all this and now we just have an

2581
01:38:19,280 --> 01:38:21,280
empty list and this is obviously still

2582
01:38:21,280 --> 01:38:22,480
going to be false because there's

2583
01:38:22,480 --> 01:38:24,800
nothing in that list

2584
01:38:24,800 --> 01:38:27,760
but let's go back to when we had some

2585
01:38:27,760 --> 01:38:29,600
items in the list

2586
01:38:29,600 --> 01:38:32,880
and you can reference items in a list by

2587
01:38:32,880 --> 01:38:36,480
their indexes starting with zero so i'm

2588
01:38:36,480 --> 01:38:38,719
going to do dogs and then i can use

2589
01:38:38,719 --> 01:38:40,800
these brackets so and now i'm going to

2590
01:38:40,800 --> 01:38:42,639
put the so this is where we're going to

2591
01:38:42,639 --> 01:38:43,840
reference the thing

2592
01:38:43,840 --> 01:38:45,760
an item from the list and i'm going to

2593
01:38:45,760 --> 01:38:48,719
type in 0 which will be this item right

2594
01:38:48,719 --> 01:38:52,400
here roger or i could put 2 and it's

2595
01:38:52,400 --> 01:38:55,199
going to do 0 1 2 and now we're going to

2596
01:38:55,199 --> 01:38:57,040
have sid

2597
01:38:57,040 --> 01:39:00,159
and the same

2598
01:39:00,159 --> 01:39:04,320
and you can use this same notation to

2599
01:39:04,320 --> 01:39:06,159
update an item

2600
01:39:06,159 --> 01:39:08,480
in a list so i'm going to add another

2601
01:39:08,480 --> 01:39:11,520
line of code here and put dogs 2 is

2602
01:39:11,520 --> 01:39:14,320
going to equal

2603
01:39:18,080 --> 01:39:19,040
bo

2604
01:39:19,040 --> 01:39:20,719
and now i'm just going to print the

2605
01:39:20,719 --> 01:39:23,679
entire list here and now

2606
01:39:23,679 --> 01:39:25,280
instead of

2607
01:39:25,280 --> 01:39:28,239
being roger 1 said true to roger 1 bow

2608
01:39:28,239 --> 01:39:29,199
true

2609
01:39:29,199 --> 01:39:32,719
because we've updated the item at index

2610
01:39:32,719 --> 01:39:36,880
2 to be bo instead of sid

2611
01:39:38,400 --> 01:39:42,080
now you can also use the index method

2612
01:39:42,080 --> 01:39:42,800
so

2613
01:39:42,800 --> 01:39:45,280
um instead of

2614
01:39:45,280 --> 01:39:47,119
like if i want to find the first item in

2615
01:39:47,119 --> 01:39:49,520
the list i could do it like this

2616
01:39:49,520 --> 01:39:52,960
so you can also use a negative number

2617
01:39:52,960 --> 01:39:53,760
here

2618
01:39:53,760 --> 01:39:55,119
just how we saw on the string so

2619
01:39:55,119 --> 01:39:56,960
negative 2 is going to start with one

2620
01:39:56,960 --> 01:39:58,560
two

2621
01:39:58,560 --> 01:40:00,320
actually let's do negative one so it

2622
01:40:00,320 --> 01:40:02,560
should return true here

2623
01:40:02,560 --> 01:40:04,800
okay true so it starts with this one if

2624
01:40:04,800 --> 01:40:07,520
you put a negative number

2625
01:40:07,520 --> 01:40:10,800
you can also extract part of a list now

2626
01:40:10,800 --> 01:40:13,280
this is very similar to what we showed

2627
01:40:13,280 --> 01:40:14,320
using

2628
01:40:14,320 --> 01:40:16,320
with the string let me just add another

2629
01:40:16,320 --> 01:40:17,950
item here

2630
01:40:17,950 --> 01:40:21,679
[Music]

2631
01:40:21,679 --> 01:40:25,199
now i am going to

2632
01:40:25,199 --> 01:40:27,119
use the colon to do part of a list so

2633
01:40:27,119 --> 01:40:28,800
i'm going to 2

2634
01:40:28,800 --> 01:40:29,679
4

2635
01:40:29,679 --> 01:40:32,480
and so this is a slice

2636
01:40:32,480 --> 01:40:35,520
so it's going to start at the second or

2637
01:40:35,520 --> 01:40:36,719
zero

2638
01:40:36,719 --> 01:40:39,040
one

2639
01:40:39,119 --> 01:40:40,480
two

2640
01:40:40,480 --> 01:40:42,639
which is now bow because we change it to

2641
01:40:42,639 --> 01:40:45,040
bow and it's going to go through four

2642
01:40:45,040 --> 01:40:46,960
it's going to go through four but not

2643
01:40:46,960 --> 01:40:49,199
over pat not including four so it's

2644
01:40:49,199 --> 01:40:50,800
going to be 2

2645
01:40:50,800 --> 01:40:51,679
3

2646
01:40:51,679 --> 01:40:54,000
and then not 4 so it's just sid and true

2647
01:40:54,000 --> 01:40:56,239
or bow and true because we updated 2 to

2648
01:40:56,239 --> 01:40:57,440
bow

2649
01:40:57,440 --> 01:40:59,360
and you can also just leave this blank

2650
01:40:59,360 --> 01:41:00,639
so it's going to go through the end of

2651
01:41:00,639 --> 01:41:02,719
the list or if you

2652
01:41:02,719 --> 01:41:05,119
leave the first number blank

2653
01:41:05,119 --> 01:41:07,520
it's going to go it's going to start at

2654
01:41:07,520 --> 01:41:09,600
the beginning of the list and we can go

2655
01:41:09,600 --> 01:41:12,080
through for instance index three

2656
01:41:12,080 --> 01:41:15,119
and so that's a way to slice the list

2657
01:41:15,119 --> 01:41:17,360
you can also

2658
01:41:17,360 --> 01:41:20,159
use the the length function so let's

2659
01:41:20,159 --> 01:41:22,480
find out how many items are in the list

2660
01:41:22,480 --> 01:41:25,440
i'll use the length the length of dogs

2661
01:41:25,440 --> 01:41:28,159
is six or six items in the list we can

2662
01:41:28,159 --> 01:41:31,119
also add items to the list by using the

2663
01:41:31,119 --> 01:41:35,119
append method so i'm going to do dogs

2664
01:41:35,119 --> 01:41:36,960
dot append

2665
01:41:36,960 --> 01:41:39,840
and then i can

2666
01:41:39,840 --> 01:41:42,560
add an item so i can say something like

2667
01:41:42,560 --> 01:41:44,880
judah and now if we see the length

2668
01:41:44,880 --> 01:41:47,199
there's now going to be 7 and if we just

2669
01:41:47,199 --> 01:41:48,159
print

2670
01:41:48,159 --> 01:41:50,080
the full list

2671
01:41:50,080 --> 01:41:52,800
then we can see that we can see all the

2672
01:41:52,800 --> 01:41:54,480
items including the one that was just

2673
01:41:54,480 --> 01:41:58,639
added we can also use the extend method

2674
01:41:58,639 --> 01:42:02,000
the extend is another way to add an item

2675
01:42:02,000 --> 01:42:05,679
to a list so if i do instead of dogs

2676
01:42:05,679 --> 01:42:09,040
append i can do dogs that extend

2677
01:42:09,040 --> 01:42:11,520
and then i'm going to pass in

2678
01:42:11,520 --> 01:42:13,520
instead of just passing in the string

2679
01:42:13,520 --> 01:42:15,199
i'm gonna pass in

2680
01:42:15,199 --> 01:42:19,440
the item as a list so i'm gonna and it's

2681
01:42:19,440 --> 01:42:21,760
gonna add it just the same but now i can

2682
01:42:21,760 --> 01:42:23,040
actually

2683
01:42:23,040 --> 01:42:26,159
combine two lists together so i'm gonna

2684
01:42:26,159 --> 01:42:29,840
put a five so if i do this we can see

2685
01:42:29,840 --> 01:42:32,400
now we are taking this list and

2686
01:42:32,400 --> 01:42:35,520
extending it by adding this list on the

2687
01:42:35,520 --> 01:42:37,440
end this is a two item list and we have

2688
01:42:37,440 --> 01:42:38,880
that six m list and now we have the

2689
01:42:38,880 --> 01:42:40,480
eight item list

2690
01:42:40,480 --> 01:42:42,400
you can also use the

2691
01:42:42,400 --> 01:42:46,239
plus equals operator so

2692
01:42:46,239 --> 01:42:48,960
to use the plus equals operator i'm

2693
01:42:48,960 --> 01:42:50,800
going to do dogs it's the same it's

2694
01:42:50,800 --> 01:42:53,119
going to do the same thing as extend

2695
01:42:53,119 --> 01:42:55,520
so plus equals

2696
01:42:55,520 --> 01:42:58,080
and then we have this list take this

2697
01:42:58,080 --> 01:43:00,239
parentheses off here and it should look

2698
01:43:00,239 --> 01:43:02,320
exactly the same see it's showing up the

2699
01:43:02,320 --> 01:43:03,840
same thing up here

2700
01:43:03,840 --> 01:43:06,400
so the plus equals is going to be the

2701
01:43:06,400 --> 01:43:09,119
same thing as extend where it takes the

2702
01:43:09,119 --> 01:43:12,239
list that's already exists and adds this

2703
01:43:12,239 --> 01:43:15,040
other list to the end

2704
01:43:15,040 --> 01:43:17,840
and when you're using the extend or the

2705
01:43:17,840 --> 01:43:19,520
plus equals

2706
01:43:19,520 --> 01:43:21,679
you don't want to forget the square

2707
01:43:21,679 --> 01:43:22,840
brackets

2708
01:43:22,840 --> 01:43:25,600
here so if you if you forget the square

2709
01:43:25,600 --> 01:43:26,800
brackets and let's say i'm just going to

2710
01:43:26,800 --> 01:43:29,199
add this iron to the list

2711
01:43:29,199 --> 01:43:31,119
it's now actually going to put each

2712
01:43:31,119 --> 01:43:33,360
letter individually here

2713
01:43:33,360 --> 01:43:35,679
so if i you can kind of see it better if

2714
01:43:35,679 --> 01:43:39,280
i move over here

2715
01:43:39,280 --> 01:43:41,280
so it so that so you want to make sure

2716
01:43:41,280 --> 01:43:44,000
you put the the brackets

2717
01:43:44,000 --> 01:43:47,440
and another thing you can do is remove

2718
01:43:47,440 --> 01:43:50,000
you can remove an item using the remove

2719
01:43:50,000 --> 01:43:52,480
method so i'm gonna do

2720
01:43:52,480 --> 01:43:55,679
dogs dot remove

2721
01:43:55,679 --> 01:43:57,440
sid

2722
01:43:57,440 --> 01:44:01,199
okay now i'm gonna play it here and

2723
01:44:01,199 --> 01:44:04,600
it's saying

2724
01:44:07,119 --> 01:44:10,480
what did i do wrong here

2725
01:44:11,679 --> 01:44:14,239
oh obviously um i'm moving sid but we've

2726
01:44:14,239 --> 01:44:16,639
already changed the element of sid to

2727
01:44:16,639 --> 01:44:18,840
bow so let's remove

2728
01:44:18,840 --> 01:44:22,159
quincy and let's try that

2729
01:44:22,159 --> 01:44:25,920
okay so now there's no quincy

2730
01:44:25,920 --> 01:44:28,719
so another common thing to do another

2731
01:44:28,719 --> 01:44:32,320
common list method is pop so if i do

2732
01:44:32,320 --> 01:44:34,320
dogs.pop

2733
01:44:34,320 --> 01:44:37,679
it's going to remove and return a single

2734
01:44:37,679 --> 01:44:40,670
item so first i'm going to

2735
01:44:40,670 --> 01:44:43,119
[Music]

2736
01:44:43,119 --> 01:44:44,239
do dot

2737
01:44:44,239 --> 01:44:45,760
print dogs that pop and then i'm going

2738
01:44:45,760 --> 01:44:47,520
to print dog so if i

2739
01:44:47,520 --> 01:44:50,719
so first it's going to return 5 that was

2740
01:44:50,719 --> 01:44:52,639
the last item that we added onto the

2741
01:44:52,639 --> 01:44:54,960
list and now when i print the list that

2742
01:44:54,960 --> 01:44:57,119
item's not in the list so pop is going

2743
01:44:57,119 --> 01:45:00,239
to remove the last item from the list

2744
01:45:00,239 --> 01:45:03,119
and it's going to return the last item

2745
01:45:03,119 --> 01:45:04,880
it's going to return and remove the last

2746
01:45:04,880 --> 01:45:06,800
item from the list and then it's not on

2747
01:45:06,800 --> 01:45:09,360
the list anymore

2748
01:45:09,360 --> 01:45:11,119
now let's make this

2749
01:45:11,119 --> 01:45:13,040
let's let's simplify this just go back

2750
01:45:13,040 --> 01:45:14,800
to the initial list and i'm going to

2751
01:45:14,800 --> 01:45:16,800
change this to items

2752
01:45:16,800 --> 01:45:18,320
now i'm going to show you how to add an

2753
01:45:18,320 --> 01:45:20,400
item in the middle of the list at a

2754
01:45:20,400 --> 01:45:23,600
specific index you can use the insert

2755
01:45:23,600 --> 01:45:26,239
method so i'm going to do items dot

2756
01:45:26,239 --> 01:45:27,360
insert

2757
01:45:27,360 --> 01:45:28,639
i'm going to put the index which is

2758
01:45:28,639 --> 01:45:30,320
going we're going to insert at the index

2759
01:45:30,320 --> 01:45:32,880
number two and the item is going to be

2760
01:45:32,880 --> 01:45:33,920
test

2761
01:45:33,920 --> 01:45:35,840
and then i'm just going to print that

2762
01:45:35,840 --> 01:45:37,119
print

2763
01:45:37,119 --> 01:45:38,560
items

2764
01:45:38,560 --> 01:45:40,719
and then i'll run that and then we can

2765
01:45:40,719 --> 01:45:42,800
see it index number two we now see the

2766
01:45:42,800 --> 01:45:44,639
item test

2767
01:45:44,639 --> 01:45:47,119
now to add multiple items at a specific

2768
01:45:47,119 --> 01:45:50,719
index you need to use slices so

2769
01:45:50,719 --> 01:45:52,880
let me show you how you do that so we're

2770
01:45:52,880 --> 01:45:56,400
going to do a slice

2771
01:45:56,560 --> 01:45:59,600
and i'm going to set that equal to

2772
01:45:59,600 --> 01:46:00,639
test

2773
01:46:00,639 --> 01:46:03,040
1

2774
01:46:03,520 --> 01:46:06,000
test

2775
01:46:06,000 --> 01:46:07,199
2.

2776
01:46:07,199 --> 01:46:08,639
we print that

2777
01:46:08,639 --> 01:46:10,400
so now you can see we have test 1 and

2778
01:46:10,400 --> 01:46:12,239
test 2 right here

2779
01:46:12,239 --> 01:46:14,800
right behind this search thing here

2780
01:46:14,800 --> 01:46:17,760
and we've inserted multiple items into

2781
01:46:17,760 --> 01:46:21,119
the list starting at index 1.

2782
01:46:21,119 --> 01:46:24,480
now you can also sort a list

2783
01:46:24,480 --> 01:46:26,960
so if i do

2784
01:46:26,960 --> 01:46:28,800
here we go um

2785
01:46:28,800 --> 01:46:31,840
items dot sort

2786
01:46:31,840 --> 01:46:35,360
it will sort the list

2787
01:46:36,400 --> 01:46:38,080
but you have to make sure okay we have

2788
01:46:38,080 --> 01:46:40,400
an error it's not supported between

2789
01:46:40,400 --> 01:46:44,080
we have a combination of ins and strings

2790
01:46:44,080 --> 01:46:45,199
so let's

2791
01:46:45,199 --> 01:46:49,520
make it so it's all strings in the list

2792
01:46:49,760 --> 01:46:51,520
and

2793
01:46:51,520 --> 01:46:53,040
then it should

2794
01:46:53,040 --> 01:46:55,840
be able to sort it

2795
01:46:57,040 --> 01:46:58,159
okay

2796
01:46:58,159 --> 01:46:59,440
now the

2797
01:46:59,440 --> 01:47:02,000
strings are in alphabetical order and if

2798
01:47:02,000 --> 01:47:03,760
we're using integers or floats and they

2799
01:47:03,760 --> 01:47:06,719
would just be in numerical order

2800
01:47:06,719 --> 01:47:08,800
now one thing that's interesting about

2801
01:47:08,800 --> 01:47:11,840
that if i put change this to

2802
01:47:11,840 --> 01:47:13,440
bow

2803
01:47:13,440 --> 01:47:15,199
you'll see now we have this at the

2804
01:47:15,199 --> 01:47:18,480
beginning and this at the end

2805
01:47:18,480 --> 01:47:19,280
so

2806
01:47:19,280 --> 01:47:21,760
a the sort method orders uppercase

2807
01:47:21,760 --> 01:47:24,560
letters first and then lowercase letters

2808
01:47:24,560 --> 01:47:27,520
so to fix that actually to make it

2809
01:47:27,520 --> 01:47:28,639
make more sense we're going to change

2810
01:47:28,639 --> 01:47:29,840
that to

2811
01:47:29,840 --> 01:47:32,639
bob and to fix that

2812
01:47:32,639 --> 01:47:34,880
within the sort i'm going to i'm going

2813
01:47:34,880 --> 01:47:40,560
to put key equals str dot lower

2814
01:47:40,800 --> 01:47:42,480
and now

2815
01:47:42,480 --> 01:47:44,800
it's going to sort these correctly how

2816
01:47:44,800 --> 01:47:46,719
you would imagine not caring about

2817
01:47:46,719 --> 01:47:50,400
uppercase or lowercase letters

2818
01:47:50,400 --> 01:47:52,320
sorting modifies the original list

2819
01:47:52,320 --> 01:47:55,440
content so to avoid that you can copy

2820
01:47:55,440 --> 01:47:58,159
the list content using

2821
01:47:58,159 --> 01:48:02,480
so let me show you if we do

2822
01:48:03,520 --> 01:48:06,080
items

2823
01:48:06,080 --> 01:48:08,719
items

2824
01:48:09,040 --> 01:48:10,239
copy

2825
01:48:10,239 --> 01:48:11,440
equals

2826
01:48:11,440 --> 01:48:12,560
items

2827
01:48:12,560 --> 01:48:15,040
and then we make a slice

2828
01:48:15,040 --> 01:48:16,960
with with nothing at the beginning and

2829
01:48:16,960 --> 01:48:18,159
nothing at the end so it's going to

2830
01:48:18,159 --> 01:48:19,679
start at the beginning of the list to

2831
01:48:19,679 --> 01:48:22,400
the end of the list and now we can have

2832
01:48:22,400 --> 01:48:26,239
a copy and i can print

2833
01:48:26,239 --> 01:48:28,080
items copy

2834
01:48:28,080 --> 01:48:30,800
so if i print that so now we see we have

2835
01:48:30,800 --> 01:48:33,520
the sorted list that's that we ran the

2836
01:48:33,520 --> 01:48:36,239
sort on but we also still have

2837
01:48:36,239 --> 01:48:40,000
the original list

2838
01:48:40,159 --> 01:48:42,239
so it with all the words in the original

2839
01:48:42,239 --> 01:48:44,560
order

2840
01:48:45,360 --> 01:48:48,639
and there is also a way to sort a list

2841
01:48:48,639 --> 01:48:51,360
without returning a

2842
01:48:51,360 --> 01:48:53,520
new list

2843
01:48:53,520 --> 01:48:56,400
there is also a way to sort a list

2844
01:48:56,400 --> 01:48:59,600
without modifying the original list so

2845
01:48:59,600 --> 01:49:02,239
instead of copying a list

2846
01:49:02,239 --> 01:49:04,639
um what i'm going to do

2847
01:49:04,639 --> 01:49:06,560
is

2848
01:49:06,560 --> 01:49:08,320
i items

2849
01:49:08,320 --> 01:49:11,440
instead of doing items dot sort

2850
01:49:11,440 --> 01:49:13,199
we are going to do

2851
01:49:13,199 --> 01:49:14,800
we're going to use a global function

2852
01:49:14,800 --> 01:49:16,960
called sorted

2853
01:49:16,960 --> 01:49:19,360
so in the sorted function

2854
01:49:19,360 --> 01:49:22,560
we are going to pass in two parameters

2855
01:49:22,560 --> 01:49:26,320
so first is the list items

2856
01:49:26,560 --> 01:49:28,639
and then the second is how we're sorting

2857
01:49:28,639 --> 01:49:30,239
it so this just makes

2858
01:49:30,239 --> 01:49:33,040
sure that the key the case of the

2859
01:49:33,040 --> 01:49:35,119
letters don't matter and then i'm just

2860
01:49:35,119 --> 01:49:38,159
going to print that

2861
01:49:40,560 --> 01:49:44,239
now if i run this you can see we it

2862
01:49:44,239 --> 01:49:46,719
we print printed the sorted list

2863
01:49:46,719 --> 01:49:49,520
and now we're printing the list and it's

2864
01:49:49,520 --> 01:49:51,840
not it's no longer sorted because this

2865
01:49:51,840 --> 01:49:55,199
creates a new list without modifying the

2866
01:49:55,199 --> 01:49:58,480
original list

2867
01:49:58,480 --> 01:50:00,639
okay now let's learn about another data

2868
01:50:00,639 --> 01:50:02,320
structure called

2869
01:50:02,320 --> 01:50:03,520
couples

2870
01:50:03,520 --> 01:50:04,719
so

2871
01:50:04,719 --> 01:50:06,800
this time i'm going to put

2872
01:50:06,800 --> 01:50:08,159
tuples

2873
01:50:08,159 --> 01:50:11,119
so we're using a comment here so tuples

2874
01:50:11,119 --> 01:50:12,880
are another fundamental python data

2875
01:50:12,880 --> 01:50:14,880
structure they allow you to create

2876
01:50:14,880 --> 01:50:17,360
immutable groups of objects this means

2877
01:50:17,360 --> 01:50:19,520
that once a tuple is created it cannot

2878
01:50:19,520 --> 01:50:21,440
be modified so we already saw that we

2879
01:50:21,440 --> 01:50:24,239
could modify lists but tuple you can't

2880
01:50:24,239 --> 01:50:26,560
even add or remove items

2881
01:50:26,560 --> 01:50:28,320
they're created in a way similar to

2882
01:50:28,320 --> 01:50:30,800
lists but using parentheses instead of

2883
01:50:30,800 --> 01:50:33,199
square brackets so

2884
01:50:33,199 --> 01:50:35,040
for instance i'm going to do names

2885
01:50:35,040 --> 01:50:36,960
equals instead of using square brackets

2886
01:50:36,960 --> 01:50:39,920
we're going to do parentheses roger

2887
01:50:39,920 --> 01:50:42,000
and

2888
01:50:42,000 --> 01:50:43,280
sid

2889
01:50:43,280 --> 01:50:45,679
okay so a tuple's order like a list so

2890
01:50:45,679 --> 01:50:47,840
you can get its values by referencing an

2891
01:50:47,840 --> 01:50:49,280
index

2892
01:50:49,280 --> 01:50:52,000
an index so i could say for instance

2893
01:50:52,000 --> 01:50:54,639
names and if i do the bracket i could

2894
01:50:54,639 --> 01:50:57,920
put a zero here to return

2895
01:50:57,920 --> 01:50:58,960
roger

2896
01:50:58,960 --> 01:51:00,480
and then you can also use the index

2897
01:51:00,480 --> 01:51:03,760
method for instance names

2898
01:51:03,760 --> 01:51:05,440
dot

2899
01:51:05,440 --> 01:51:07,520
index

2900
01:51:07,520 --> 01:51:09,199
and then i can

2901
01:51:09,199 --> 01:51:11,119
pass in something like

2902
01:51:11,119 --> 01:51:14,800
roger and then this is going to

2903
01:51:14,800 --> 01:51:16,719
return 0

2904
01:51:16,719 --> 01:51:18,560
because it's going to get the the index

2905
01:51:18,560 --> 01:51:21,520
number of that so as with strings and

2906
01:51:21,520 --> 01:51:23,840
lists using a negative index we'll start

2907
01:51:23,840 --> 01:51:28,320
searching from the end so i could do

2908
01:51:28,480 --> 01:51:31,599
that i can do negative one to start

2909
01:51:31,599 --> 01:51:33,520
not negative zero negative one to start

2910
01:51:33,520 --> 01:51:35,679
searching from the end here

2911
01:51:35,679 --> 01:51:37,679
and you can count the items in a tuple

2912
01:51:37,679 --> 01:51:39,760
with the length function so i could do

2913
01:51:39,760 --> 01:51:43,040
if i do length and then do names it's if

2914
01:51:43,040 --> 01:51:45,360
i printed that it would just print 2

2915
01:51:45,360 --> 01:51:47,280
because there are two items in that

2916
01:51:47,280 --> 01:51:48,480
tuple

2917
01:51:48,480 --> 01:51:50,400
then you can also check if an item is

2918
01:51:50,400 --> 01:51:51,920
contained in a tuple with the in

2919
01:51:51,920 --> 01:51:54,000
operators very similar to a list so i

2920
01:51:54,000 --> 01:51:56,400
can do this time i will print it i'll do

2921
01:51:56,400 --> 01:51:57,360
print

2922
01:51:57,360 --> 01:51:59,440
roger

2923
01:51:59,440 --> 01:52:00,320
in

2924
01:52:00,320 --> 01:52:02,880
names so if i print that and run it

2925
01:52:02,880 --> 01:52:05,440
we'll see true because roger is in the

2926
01:52:05,440 --> 01:52:06,800
names

2927
01:52:06,800 --> 01:52:08,480
and then you can extract part of a tuple

2928
01:52:08,480 --> 01:52:10,000
using slices

2929
01:52:10,000 --> 01:52:12,639
just like we could do with with strings

2930
01:52:12,639 --> 01:52:16,400
and lists so i could do names and then i

2931
01:52:16,400 --> 01:52:17,440
could do

2932
01:52:17,440 --> 01:52:21,119
0 starting at the whoops

2933
01:52:21,119 --> 01:52:23,360
0

2934
01:52:23,360 --> 01:52:24,560
2

2935
01:52:24,560 --> 01:52:26,080
so that's just going to start at the

2936
01:52:26,080 --> 01:52:29,440
zero index and be done at the index 2

2937
01:52:29,440 --> 01:52:30,480
and then

2938
01:52:30,480 --> 01:52:32,239
and then you can use the so you can get

2939
01:52:32,239 --> 01:52:34,480
a sorted version of the tuple using the

2940
01:52:34,480 --> 01:52:36,960
sorted global function so

2941
01:52:36,960 --> 01:52:39,520
remember when we were looking at lists

2942
01:52:39,520 --> 01:52:42,000
when we used the sorted function it

2943
01:52:42,000 --> 01:52:46,639
created a new a new list or so when

2944
01:52:46,639 --> 01:52:48,400
we're creating using the sorted function

2945
01:52:48,400 --> 01:52:51,360
for tuples it creates a new tuple so i

2946
01:52:51,360 --> 01:52:53,070
can say sorted

2947
01:52:53,070 --> 01:52:54,719
[Music]

2948
01:52:54,719 --> 01:52:56,080
names

2949
01:52:56,080 --> 01:52:58,800
and this would put them in alphabetical

2950
01:52:58,800 --> 01:52:59,840
order they already in are in

2951
01:52:59,840 --> 01:53:01,360
alphabetical order but say there is one

2952
01:53:01,360 --> 01:53:02,560
more

2953
01:53:02,560 --> 01:53:04,320
word in this list

2954
01:53:04,320 --> 01:53:05,520
and then

2955
01:53:05,520 --> 01:53:07,600
i can print this

2956
01:53:07,600 --> 01:53:09,599
[Music]

2957
01:53:09,599 --> 01:53:12,000
to print the sorted version but it's not

2958
01:53:12,000 --> 01:53:14,000
actually going to modify the list

2959
01:53:14,000 --> 01:53:16,639
because you cannot modify

2960
01:53:16,639 --> 01:53:18,960
a tuple

2961
01:53:18,960 --> 01:53:22,159
and then you can create a new tuple from

2962
01:53:22,159 --> 01:53:24,560
existing tuples using the plus operator

2963
01:53:24,560 --> 01:53:26,400
so i could say something like

2964
01:53:26,400 --> 01:53:27,900
new tuple

2965
01:53:27,900 --> 01:53:29,360
[Music]

2966
01:53:29,360 --> 01:53:32,239
equals names and then i can use the plus

2967
01:53:32,239 --> 01:53:33,360
operator

2968
01:53:33,360 --> 01:53:36,080
and then i would say i would just say

2969
01:53:36,080 --> 01:53:37,280
tina

2970
01:53:37,280 --> 01:53:38,400
and

2971
01:53:38,400 --> 01:53:41,440
quincy i could add a few i could add so

2972
01:53:41,440 --> 01:53:43,520
these will combine two tuples into a new

2973
01:53:43,520 --> 01:53:45,760
tuple but you can never like i said you

2974
01:53:45,760 --> 01:53:50,239
can't actually modify the original tuple

2975
01:53:50,239 --> 01:53:52,560
now let's learn about dictionaries

2976
01:53:52,560 --> 01:53:55,040
dictionaries are another very important

2977
01:53:55,040 --> 01:53:56,880
python data structure

2978
01:53:56,880 --> 01:53:58,239
while lists allow you to create

2979
01:53:58,239 --> 01:54:00,159
collections of values dictionaries allow

2980
01:54:00,159 --> 01:54:03,199
you to create key value pairs we already

2981
01:54:03,199 --> 01:54:05,119
discussed dictionaries a little bit but

2982
01:54:05,119 --> 01:54:06,560
now we're going to discuss even more

2983
01:54:06,560 --> 01:54:09,679
about dictionaries so let me give you an

2984
01:54:09,679 --> 01:54:11,199
example of a dictionary with just one

2985
01:54:11,199 --> 01:54:14,560
key value pair so dog equals and then

2986
01:54:14,560 --> 01:54:16,239
we're going to use the curly braces to

2987
01:54:16,239 --> 01:54:19,520
create the dictionary and i'll put name

2988
01:54:19,520 --> 01:54:21,280
and then i will put

2989
01:54:21,280 --> 01:54:23,440
roger and just like any type of strings

2990
01:54:23,440 --> 01:54:25,840
we could make these single quotes or

2991
01:54:25,840 --> 01:54:28,560
they could be double quotes and the

2992
01:54:28,560 --> 01:54:31,840
spaces here are not very important but

2993
01:54:31,840 --> 01:54:33,840
it's common to put spaces in between

2994
01:54:33,840 --> 01:54:36,719
these things for better readability

2995
01:54:36,719 --> 01:54:39,840
and the key can be any immutable

2996
01:54:39,840 --> 01:54:41,760
value so this is the key this is the

2997
01:54:41,760 --> 01:54:44,000
value and the key can be any immutable

2998
01:54:44,000 --> 01:54:45,199
value

2999
01:54:45,199 --> 01:54:48,639
such as a string a number or a tuple

3000
01:54:48,639 --> 01:54:50,880
the value can be anything you want so a

3001
01:54:50,880 --> 01:54:52,880
dictionary can contain multiple key

3002
01:54:52,880 --> 01:54:55,119
value pairs so like for instance we got

3003
01:54:55,119 --> 01:54:57,920
the name we can have

3004
01:54:57,920 --> 01:54:59,840
age

3005
01:54:59,840 --> 01:55:02,719
and that's going to be

3006
01:55:02,840 --> 01:55:06,480
8. and you can access individual key

3007
01:55:06,480 --> 01:55:09,440
values using the notation like this so i

3008
01:55:09,440 --> 01:55:10,719
can say

3009
01:55:10,719 --> 01:55:12,000
dog

3010
01:55:12,000 --> 01:55:14,719
so i'm using the bracket notation i can

3011
01:55:14,719 --> 01:55:17,199
do name so if i print this it's just

3012
01:55:17,199 --> 01:55:19,119
going to

3013
01:55:19,119 --> 01:55:22,080
print roger

3014
01:55:22,960 --> 01:55:24,719
and then again i can use the single

3015
01:55:24,719 --> 01:55:27,520
quotes 2 if i want

3016
01:55:27,520 --> 01:55:30,080
and it still prints roger

3017
01:55:30,080 --> 01:55:32,000
and then you can use the same notation

3018
01:55:32,000 --> 01:55:35,040
to change the value stored at a specific

3019
01:55:35,040 --> 01:55:36,080
index

3020
01:55:36,080 --> 01:55:39,119
so let's say i want to change the name

3021
01:55:39,119 --> 01:55:41,280
so if i do dog

3022
01:55:41,280 --> 01:55:43,760
and i'm going to say that the name

3023
01:55:43,760 --> 01:55:47,360
is now going to equal

3024
01:55:47,360 --> 01:55:48,560
sid

3025
01:55:48,560 --> 01:55:50,960
now i'm just going to print the whole

3026
01:55:50,960 --> 01:55:52,880
the whole thing

3027
01:55:52,880 --> 01:55:54,880
and we can see the name is now sid

3028
01:55:54,880 --> 01:55:56,719
instead of roger

3029
01:55:56,719 --> 01:55:59,760
so another way to get a specific element

3030
01:55:59,760 --> 01:56:03,920
is to use the get method so if i do a

3031
01:56:03,920 --> 01:56:05,679
dog dot

3032
01:56:05,679 --> 01:56:06,719
get

3033
01:56:06,719 --> 01:56:08,400
and then i

3034
01:56:08,400 --> 01:56:10,719
do name so i'm going to try to get the

3035
01:56:10,719 --> 01:56:12,080
name here

3036
01:56:12,080 --> 01:56:14,960
it's going to return roger so

3037
01:56:14,960 --> 01:56:16,800
one good thing about this is that you

3038
01:56:16,800 --> 01:56:19,920
can add a default value like let's say

3039
01:56:19,920 --> 01:56:24,000
i'm going i'm searching for color

3040
01:56:24,000 --> 01:56:27,040
and it's saying none it's giving it none

3041
01:56:27,040 --> 01:56:28,400
because there is no color

3042
01:56:28,400 --> 01:56:30,960
but what if i want a default value so

3043
01:56:30,960 --> 01:56:33,599
i'm going to put comma and then i'll put

3044
01:56:33,599 --> 01:56:36,000
brown

3045
01:56:36,239 --> 01:56:39,199
so now if it cannot find the color in

3046
01:56:39,199 --> 01:56:41,440
the dictionary it's going to return

3047
01:56:41,440 --> 01:56:44,639
brown but if it can find the color like

3048
01:56:44,639 --> 01:56:46,560
let's say

3049
01:56:46,560 --> 01:56:48,320
color

3050
01:56:48,320 --> 01:56:50,400
and this is a

3051
01:56:50,400 --> 01:56:53,119
green dog

3052
01:56:53,119 --> 01:56:54,560
okay we'll return

3053
01:56:54,560 --> 01:56:55,520
green

3054
01:56:55,520 --> 01:56:57,360
so with the bracket notation that was

3055
01:56:57,360 --> 01:56:59,199
showing you earlier you cannot have a

3056
01:56:59,199 --> 01:57:01,040
default value so that's one good thing

3057
01:57:01,040 --> 01:57:02,639
about the get method

3058
01:57:02,639 --> 01:57:05,440
now you can also use the pop method to

3059
01:57:05,440 --> 01:57:07,599
retrieve the value of a key and delete

3060
01:57:07,599 --> 01:57:09,840
the item from the dictionary we also

3061
01:57:09,840 --> 01:57:13,599
showed the pop method for lists so for

3062
01:57:13,599 --> 01:57:15,679
instance i can say

3063
01:57:15,679 --> 01:57:17,199
get dot

3064
01:57:17,199 --> 01:57:18,480
pop

3065
01:57:18,480 --> 01:57:20,719
and then i will pass in

3066
01:57:20,719 --> 01:57:21,599
name

3067
01:57:21,599 --> 01:57:23,360
and then right after that i'm just going

3068
01:57:23,360 --> 01:57:25,840
to print

3069
01:57:26,000 --> 01:57:28,960
dog that the the whole dictionary so

3070
01:57:28,960 --> 01:57:30,719
first we're going to get roger and then

3071
01:57:30,719 --> 01:57:32,719
when i print the dictionary here it's

3072
01:57:32,719 --> 01:57:35,360
not going to show roger anymore because

3073
01:57:35,360 --> 01:57:37,840
we we deleted it pop will return the

3074
01:57:37,840 --> 01:57:40,400
item and delete the item

3075
01:57:40,400 --> 01:57:43,920
now you can also use a function a method

3076
01:57:43,920 --> 01:57:47,280
called pop item the pop item method well

3077
01:57:47,280 --> 01:57:49,760
let me show you that one pop item

3078
01:57:49,760 --> 01:57:51,920
it's going to retrieve and remove the

3079
01:57:51,920 --> 01:57:54,639
last key value pair inserted into the

3080
01:57:54,639 --> 01:57:56,320
dictionary

3081
01:57:56,320 --> 01:57:57,040
so

3082
01:57:57,040 --> 01:58:00,080
in this case it should be color so if i

3083
01:58:00,080 --> 01:58:02,800
run this

3084
01:58:02,800 --> 01:58:05,440
it's going to return color green and now

3085
01:58:05,440 --> 01:58:07,520
when i print out the dictionary it's not

3086
01:58:07,520 --> 01:58:08,639
going to show color green because that

3087
01:58:08,639 --> 01:58:10,400
was already removed it removed the last

3088
01:58:10,400 --> 01:58:12,239
item

3089
01:58:12,239 --> 01:58:14,480
you can also check if a key is contained

3090
01:58:14,480 --> 01:58:17,920
in a dictionary by using the in operator

3091
01:58:17,920 --> 01:58:20,159
so we're going to say we're going to try

3092
01:58:20,159 --> 01:58:23,199
to find out if

3093
01:58:23,520 --> 01:58:25,280
color

3094
01:58:25,280 --> 01:58:27,280
is in

3095
01:58:27,280 --> 01:58:29,920
dog if there's a key called color in dog

3096
01:58:29,920 --> 01:58:32,840
we run that and it says

3097
01:58:32,840 --> 01:58:35,599
true another thing we can do is get a

3098
01:58:35,599 --> 01:58:37,760
list with the keys in the dictionary

3099
01:58:37,760 --> 01:58:41,360
using the keys method so if i do dog dot

3100
01:58:41,360 --> 01:58:43,360
keys

3101
01:58:43,360 --> 01:58:45,599
and then we'll run that it's going to

3102
01:58:45,599 --> 01:58:48,880
show the keys so the keys are name age

3103
01:58:48,880 --> 01:58:49,679
and

3104
01:58:49,679 --> 01:58:51,199
color

3105
01:58:51,199 --> 01:58:53,360
we can see that it's inside the thing

3106
01:58:53,360 --> 01:58:56,239
called dick keys but we can also pass

3107
01:58:56,239 --> 01:58:59,760
this into list so we return an actual

3108
01:58:59,760 --> 01:59:03,199
just the list part so now we can see

3109
01:59:03,199 --> 01:59:06,400
it's just an actual list name age and

3110
01:59:06,400 --> 01:59:07,440
color

3111
01:59:07,440 --> 01:59:09,440
then we can do the same thing with

3112
01:59:09,440 --> 01:59:11,520
values so

3113
01:59:11,520 --> 01:59:15,679
instead of dog.keys let's do

3114
01:59:15,679 --> 01:59:17,760
values

3115
01:59:17,760 --> 01:59:18,960
print that

3116
01:59:18,960 --> 01:59:21,679
and you can see we have roger 8 green we

3117
01:59:21,679 --> 01:59:24,480
can pass it into a list

3118
01:59:24,480 --> 01:59:25,599
to

3119
01:59:25,599 --> 01:59:28,480
return the app just the list here

3120
01:59:28,480 --> 01:59:31,280
roger 8 green

3121
01:59:31,280 --> 01:59:34,240
and then finally if we just do items

3122
01:59:34,240 --> 01:59:35,599
[Music]

3123
01:59:35,599 --> 01:59:37,840
it's going to return all the items in

3124
01:59:37,840 --> 01:59:39,599
the list or all the items in the

3125
01:59:39,599 --> 01:59:42,080
dictionary

3126
01:59:42,080 --> 01:59:46,719
and convert it into a list

3127
01:59:46,800 --> 01:59:48,400
so you can see

3128
01:59:48,400 --> 01:59:50,719
this is the first item in the list this

3129
01:59:50,719 --> 01:59:53,199
is the second item and then we have the

3130
01:59:53,199 --> 01:59:55,760
third item here so

3131
01:59:55,760 --> 01:59:58,480
we can see each item of the list each

3132
01:59:58,480 --> 02:00:01,440
item of the dictionary is now in a list

3133
02:00:01,440 --> 02:00:03,440
and then like a lot of the other things

3134
02:00:03,440 --> 02:00:05,840
we can use the length function and i'll

3135
02:00:05,840 --> 02:00:08,639
just put dog

3136
02:00:08,800 --> 02:00:10,560
and we can see that there are three

3137
02:00:10,560 --> 02:00:14,080
items in dog now you can also add a new

3138
02:00:14,080 --> 02:00:16,800
key value pair to the dictionary so

3139
02:00:16,800 --> 02:00:19,679
let's say i want to do

3140
02:00:19,679 --> 02:00:22,080
dog

3141
02:00:23,040 --> 02:00:24,719
food

3142
02:00:24,719 --> 02:00:26,560
or i it doesn't even have to be a single

3143
02:00:26,560 --> 02:00:28,719
word i could put favorite

3144
02:00:28,719 --> 02:00:30,960
food

3145
02:00:30,960 --> 02:00:32,480
and i'm going to say

3146
02:00:32,480 --> 02:00:34,800
meet

3147
02:00:34,800 --> 02:00:37,679
and now we're going to print

3148
02:00:37,679 --> 02:00:40,679
that

3149
02:00:40,880 --> 02:00:43,040
let's see what do we oh

3150
02:00:43,040 --> 02:00:45,440
this was supposed to i did that a little

3151
02:00:45,440 --> 02:00:47,760
wrong

3152
02:00:48,159 --> 02:00:49,840
there we go this is actually how you do

3153
02:00:49,840 --> 02:00:51,840
it you put use the bracket notation

3154
02:00:51,840 --> 02:00:53,520
equals and let's put what it equals

3155
02:00:53,520 --> 02:00:56,639
there okay now you can see that we now

3156
02:00:56,639 --> 02:00:58,719
have a new item on the list favorite

3157
02:00:58,719 --> 02:00:59,679
food

3158
02:00:59,679 --> 02:01:00,960
meet

3159
02:01:00,960 --> 02:01:03,599
then you can also delete an item from a

3160
02:01:03,599 --> 02:01:06,159
list or a delete a key value pair so i'm

3161
02:01:06,159 --> 02:01:09,679
going to d e l means delete dog

3162
02:01:09,679 --> 02:01:10,400
or

3163
02:01:10,400 --> 02:01:12,800
dog there we go and this time i'm going

3164
02:01:12,800 --> 02:01:14,400
to delete

3165
02:01:14,400 --> 02:01:16,159
color and i'm just going to use single

3166
02:01:16,159 --> 02:01:17,520
quotes instead of double quotes to show

3167
02:01:17,520 --> 02:01:19,040
you that doesn't really matter the type

3168
02:01:19,040 --> 02:01:21,119
of quote and now you can see we don't

3169
02:01:21,119 --> 02:01:22,400
know what color

3170
02:01:22,400 --> 02:01:25,760
this dog is it's no longer a green dog

3171
02:01:25,760 --> 02:01:28,159
and then you can also copy a dictionary

3172
02:01:28,159 --> 02:01:29,760
so if you want to make two copies of a

3173
02:01:29,760 --> 02:01:32,159
dictionary you can do

3174
02:01:32,159 --> 02:01:34,400
do like this dog copy that's the name of

3175
02:01:34,400 --> 02:01:38,159
the new dictionary i'll do dog dot copy

3176
02:01:38,159 --> 02:01:40,159
and that would be the new

3177
02:01:40,159 --> 02:01:42,560
copied version of the dictionary

3178
02:01:42,560 --> 02:01:45,119
okay now we are going to talk about a

3179
02:01:45,119 --> 02:01:47,920
new thing called sets

3180
02:01:47,920 --> 02:01:50,159
sets are another important python data

3181
02:01:50,159 --> 02:01:51,440
structure

3182
02:01:51,440 --> 02:01:53,599
sets kind of work like tuples but

3183
02:01:53,599 --> 02:01:55,760
they're not ordered and they are

3184
02:01:55,760 --> 02:01:58,639
immutable so you can change them

3185
02:01:58,639 --> 02:01:59,920
you can also say that they kind of work

3186
02:01:59,920 --> 02:02:01,599
like dictionaries but they don't have

3187
02:02:01,599 --> 02:02:02,719
keys

3188
02:02:02,719 --> 02:02:05,119
they're all they have an immutable

3189
02:02:05,119 --> 02:02:08,080
version of a set called a frozen set so

3190
02:02:08,080 --> 02:02:10,000
let me show you how you would create a

3191
02:02:10,000 --> 02:02:12,639
set so let's do names

3192
02:02:12,639 --> 02:02:14,480
and you we're going to use

3193
02:02:14,480 --> 02:02:16,880
curly brackets just like that

3194
02:02:16,880 --> 02:02:19,679
and

3195
02:02:19,679 --> 02:02:21,920
just like that so we have two names so

3196
02:02:21,920 --> 02:02:24,080
you can see the differences the a

3197
02:02:24,080 --> 02:02:25,280
dictionary

3198
02:02:25,280 --> 02:02:27,040
you use the curly brackets but there's

3199
02:02:27,040 --> 02:02:29,119
going to be key value pairs but this

3200
02:02:29,119 --> 02:02:31,599
doesn't have key value pairs in a list

3201
02:02:31,599 --> 02:02:33,199
it's just going to be a

3202
02:02:33,199 --> 02:02:35,280
item after item like this but there's

3203
02:02:35,280 --> 02:02:37,599
going to be brackets instead of curly

3204
02:02:37,599 --> 02:02:38,800
braces

3205
02:02:38,800 --> 02:02:40,239
so

3206
02:02:40,239 --> 02:02:42,239
one thing about the sets is that they

3207
02:02:42,239 --> 02:02:44,239
are not ordered

3208
02:02:44,239 --> 02:02:46,080
so sets work well when you think about

3209
02:02:46,080 --> 02:02:48,719
them as mathematical sets

3210
02:02:48,719 --> 02:02:50,880
so for instance let's have we're going

3211
02:02:50,880 --> 02:02:53,119
to create a set 1

3212
02:02:53,119 --> 02:02:55,679
with roger and sid and we're going to

3213
02:02:55,679 --> 02:02:57,360
have a set

3214
02:02:57,360 --> 02:02:58,400
2

3215
02:02:58,400 --> 02:03:01,040
which is just going to have

3216
02:03:01,040 --> 02:03:02,400
roger

3217
02:03:02,400 --> 02:03:06,480
and so you can intersect two sets so

3218
02:03:06,480 --> 02:03:09,840
uh the inner intersect

3219
02:03:10,080 --> 02:03:12,719
the intersection of these two sets will

3220
02:03:12,719 --> 02:03:15,679
be set one

3221
02:03:15,679 --> 02:03:16,880
and

3222
02:03:16,880 --> 02:03:17,920
set

3223
02:03:17,920 --> 02:03:22,000
two so if i just print that out print

3224
02:03:22,000 --> 02:03:23,920
intersect

3225
02:03:23,920 --> 02:03:25,520
and then we can just run that and we're

3226
02:03:25,520 --> 02:03:27,599
gonna see what so it's just roger so the

3227
02:03:27,599 --> 02:03:29,119
intersection of these two sets are just

3228
02:03:29,119 --> 02:03:31,040
roger the all the items that they have

3229
02:03:31,040 --> 02:03:34,560
in common you can also create a union of

3230
02:03:34,560 --> 02:03:36,960
two sets so

3231
02:03:36,960 --> 02:03:39,119
instead of just calling this union i'll

3232
02:03:39,119 --> 02:03:40,159
put

3233
02:03:40,159 --> 02:03:43,360
mod for modification and so i can show a

3234
02:03:43,360 --> 02:03:44,400
few different things with the same

3235
02:03:44,400 --> 02:03:47,040
variable name and the union symbol is

3236
02:03:47,040 --> 02:03:48,400
just the

3237
02:03:48,400 --> 02:03:50,800
straight line like this it's not an i

3238
02:03:50,800 --> 02:03:51,920
it's just the

3239
02:03:51,920 --> 02:03:53,199
straight line

3240
02:03:53,199 --> 02:03:55,520
it's on the same key as a

3241
02:03:55,520 --> 02:03:57,360
as the was it the forward slash

3242
02:03:57,360 --> 02:03:59,199
backslash one of the slashes

3243
02:03:59,199 --> 02:04:01,280
now we're going to get every single item

3244
02:04:01,280 --> 02:04:03,199
in both sets which happens to in this

3245
02:04:03,199 --> 02:04:04,639
case just happen to be the same as set

3246
02:04:04,639 --> 02:04:07,520
one but if we change this one to the

3247
02:04:07,520 --> 02:04:10,079
word luna it's just a different name and

3248
02:04:10,079 --> 02:04:12,159
now we're going to get each item

3249
02:04:12,159 --> 02:04:15,520
in both sets or said luna roger for the

3250
02:04:15,520 --> 02:04:17,760
intersection and then we can also get

3251
02:04:17,760 --> 02:04:19,520
the difference the difference between

3252
02:04:19,520 --> 02:04:21,599
two sets so let me change this to back

3253
02:04:21,599 --> 02:04:24,320
to roger and for the difference between

3254
02:04:24,320 --> 02:04:27,280
two sets i'll use a the minus

3255
02:04:27,280 --> 02:04:28,239
and

3256
02:04:28,239 --> 02:04:30,400
the difference is just going to be sid

3257
02:04:30,400 --> 02:04:31,679
that's the only thing that's different

3258
02:04:31,679 --> 02:04:33,520
between the two sets

3259
02:04:33,520 --> 02:04:35,520
you can also check if a set is a

3260
02:04:35,520 --> 02:04:38,079
superset of another and if a set is a

3261
02:04:38,079 --> 02:04:40,320
subset of another so how you would do

3262
02:04:40,320 --> 02:04:42,800
that is

3263
02:04:42,800 --> 02:04:44,639
so we're just saying like is this

3264
02:04:44,639 --> 02:04:46,239
greater than that which means it has

3265
02:04:46,239 --> 02:04:49,040
everything of the in the other set true

3266
02:04:49,040 --> 02:04:51,280
now if we put the other direction

3267
02:04:51,280 --> 02:04:53,360
is does this set have everything in this

3268
02:04:53,360 --> 02:04:55,679
one no it doesn't

3269
02:04:55,679 --> 02:04:58,159
you can also count items in a set with

3270
02:04:58,159 --> 02:05:00,000
the length function that's pretty

3271
02:05:00,000 --> 02:05:01,679
self-explanatory i won't even show it to

3272
02:05:01,679 --> 02:05:03,119
you we've seen the link function so many

3273
02:05:03,119 --> 02:05:04,320
times

3274
02:05:04,320 --> 02:05:06,239
you can also get you can also get a list

3275
02:05:06,239 --> 02:05:08,880
from the items in a set by passing the

3276
02:05:08,880 --> 02:05:12,239
set to the list constructor so

3277
02:05:12,239 --> 02:05:14,320
i'm just going to remove this

3278
02:05:14,320 --> 02:05:16,079
and we will do

3279
02:05:16,079 --> 02:05:18,000
list

3280
02:05:18,000 --> 02:05:19,280
set

3281
02:05:19,280 --> 02:05:20,960
one

3282
02:05:20,960 --> 02:05:23,760
okay so now we have a list of the set

3283
02:05:23,760 --> 02:05:25,440
and then you can check if an item is

3284
02:05:25,440 --> 02:05:27,280
contained in a set with the in operator

3285
02:05:27,280 --> 02:05:28,960
just like the

3286
02:05:28,960 --> 02:05:32,000
list and the other way we the other

3287
02:05:32,000 --> 02:05:34,400
places we use the in operator and then

3288
02:05:34,400 --> 02:05:37,440
one more final thing about a set a set

3289
02:05:37,440 --> 02:05:40,239
cannot have two of the same item so

3290
02:05:40,239 --> 02:05:42,079
that's another thing that's useful about

3291
02:05:42,079 --> 02:05:44,880
sets so if i type in rogers now we have

3292
02:05:44,880 --> 02:05:47,679
roger sid roger if i play this we'll see

3293
02:05:47,679 --> 02:05:49,280
it's only going to

3294
02:05:49,280 --> 02:05:52,239
print sid roger it's not going to add

3295
02:05:52,239 --> 02:05:54,480
the roger twice to the set

3296
02:05:54,480 --> 02:05:56,000
so that's another

3297
02:05:56,000 --> 02:05:57,920
useful thing about sets is that make

3298
02:05:57,920 --> 02:06:00,840
sure there's only one of each item in

3299
02:06:00,840 --> 02:06:03,920
the the set so if you have a list that

3300
02:06:03,920 --> 02:06:05,520
has multiple items you can convert it to

3301
02:06:05,520 --> 02:06:06,639
a set

3302
02:06:06,639 --> 02:06:07,920
um and then i'll just make sure there's

3303
02:06:07,920 --> 02:06:10,800
only one of each thing in that set

3304
02:06:10,800 --> 02:06:14,639
now let's talk more about functions

3305
02:06:14,639 --> 02:06:16,400
we already talked about functions in the

3306
02:06:16,400 --> 02:06:17,920
last section but we're going to do a

3307
02:06:17,920 --> 02:06:20,719
review and then go into even more detail

3308
02:06:20,719 --> 02:06:23,119
about functions so a function lets us

3309
02:06:23,119 --> 02:06:25,040
create a set of instructions that we can

3310
02:06:25,040 --> 02:06:27,920
run when needed and i'm just going to

3311
02:06:27,920 --> 02:06:30,719
paste in a function and again the

3312
02:06:30,719 --> 02:06:33,440
indentation it can be either four spaces

3313
02:06:33,440 --> 02:06:36,000
two spaces

3314
02:06:36,000 --> 02:06:38,079
as long as it's indented the exact same

3315
02:06:38,079 --> 02:06:39,119
amount

3316
02:06:39,119 --> 02:06:41,360
so functions are essential in python and

3317
02:06:41,360 --> 02:06:43,440
in many other programming languages they

3318
02:06:43,440 --> 02:06:45,119
help us create meaningful programs

3319
02:06:45,119 --> 02:06:46,960
because they allow us to decompose a

3320
02:06:46,960 --> 02:06:49,679
program into manageable parts and they

3321
02:06:49,679 --> 02:06:52,880
promote readability and code reuse

3322
02:06:52,880 --> 02:06:55,280
so this one is a function called hello

3323
02:06:55,280 --> 02:06:58,000
that just prints hello this is the

3324
02:06:58,000 --> 02:06:59,760
function definition

3325
02:06:59,760 --> 02:07:02,079
so there's a name called hello this is

3326
02:07:02,079 --> 02:07:04,639
the name here and then the body of the

3327
02:07:04,639 --> 02:07:06,000
function

3328
02:07:06,000 --> 02:07:08,400
which is the the set of instructions

3329
02:07:08,400 --> 02:07:10,079
and the body of the function is

3330
02:07:10,079 --> 02:07:12,400
everything that's after the colon

3331
02:07:12,400 --> 02:07:15,679
and everything that's indented one level

3332
02:07:15,679 --> 02:07:16,880
on the right

3333
02:07:16,880 --> 02:07:19,520
so to run this function we must call it

3334
02:07:19,520 --> 02:07:22,480
so i can just type in hello

3335
02:07:22,480 --> 02:07:24,639
hello

3336
02:07:24,639 --> 02:07:27,679
and then this is the syntax to to call

3337
02:07:27,679 --> 02:07:29,920
the function and i can call it multiple

3338
02:07:29,920 --> 02:07:32,079
times so i can just copy this and paste

3339
02:07:32,079 --> 02:07:34,800
it and now if i just run this program

3340
02:07:34,800 --> 02:07:36,880
it's going to print hello

3341
02:07:36,880 --> 02:07:38,719
three times

3342
02:07:38,719 --> 02:07:40,880
the name of the function is very

3343
02:07:40,880 --> 02:07:43,360
important so the name of the function is

3344
02:07:43,360 --> 02:07:46,159
hello it should be the function name

3345
02:07:46,159 --> 02:07:47,920
should be descriptive so anyone calling

3346
02:07:47,920 --> 02:07:51,280
it can imagine what the function does

3347
02:07:51,280 --> 02:07:53,760
a function can accept one or more

3348
02:07:53,760 --> 02:07:55,760
parameters this is something else that

3349
02:07:55,760 --> 02:07:56,800
we saw

3350
02:07:56,800 --> 02:07:57,920
before

3351
02:07:57,920 --> 02:07:58,960
but

3352
02:07:58,960 --> 02:08:01,760
i can type in a parameter right here and

3353
02:08:01,760 --> 02:08:03,840
this becomes a variable that we can use

3354
02:08:03,840 --> 02:08:06,719
in the function so i can change this

3355
02:08:06,719 --> 02:08:08,560
instead of printing hello

3356
02:08:08,560 --> 02:08:11,599
it's going to print hello

3357
02:08:11,599 --> 02:08:14,320
and then we'll just put name

3358
02:08:14,320 --> 02:08:17,280
and now i can call the function with the

3359
02:08:17,280 --> 02:08:19,599
name

3360
02:08:19,760 --> 02:08:22,639
and i can actually um call it with

3361
02:08:22,639 --> 02:08:25,280
different names so we'll do bow

3362
02:08:25,280 --> 02:08:26,480
and we'll do

3363
02:08:26,480 --> 02:08:27,599
quincy

3364
02:08:27,599 --> 02:08:29,840
and then if i just play that we see

3365
02:08:29,840 --> 02:08:30,960
hello bo

3366
02:08:30,960 --> 02:08:32,960
hello quincy

3367
02:08:32,960 --> 02:08:33,760
so

3368
02:08:33,760 --> 02:08:36,480
as you can see we call the function by

3369
02:08:36,480 --> 02:08:38,880
passing the argument

3370
02:08:38,880 --> 02:08:41,599
and again you can use single quote or

3371
02:08:41,599 --> 02:08:44,079
double quotes here it's better to be

3372
02:08:44,079 --> 02:08:47,280
consistent just always use single quotes

3373
02:08:47,280 --> 02:08:49,119
or always use double quotes

3374
02:08:49,119 --> 02:08:51,840
but for teaching i like to switch it up

3375
02:08:51,840 --> 02:08:54,159
to just to emphasize that you can use

3376
02:08:54,159 --> 02:08:55,920
either so let me tell you about the

3377
02:08:55,920 --> 02:08:58,159
difference between parameters and

3378
02:08:58,159 --> 02:08:59,679
arguments

3379
02:08:59,679 --> 02:09:01,679
these two words parameters and arguments

3380
02:09:01,679 --> 02:09:04,480
are sometimes used interchangeably

3381
02:09:04,480 --> 02:09:07,119
and it's common to get confused about

3382
02:09:07,119 --> 02:09:08,639
the distinction

3383
02:09:08,639 --> 02:09:10,079
we call

3384
02:09:10,079 --> 02:09:11,440
parameters

3385
02:09:11,440 --> 02:09:14,239
the values accepted by the function

3386
02:09:14,239 --> 02:09:16,719
inside the function definition

3387
02:09:16,719 --> 02:09:20,079
and arguments are the values we pass to

3388
02:09:20,079 --> 02:09:22,719
the function when we call it also an

3389
02:09:22,719 --> 02:09:25,840
argument can have a default value

3390
02:09:25,840 --> 02:09:28,079
that's applied if the argument is not

3391
02:09:28,079 --> 02:09:30,719
specified so let me show you how i would

3392
02:09:30,719 --> 02:09:34,079
do that so we have it name so right now

3393
02:09:34,079 --> 02:09:36,719
it always needs to be get a name well

3394
02:09:36,719 --> 02:09:38,000
first let me show you what would happen

3395
02:09:38,000 --> 02:09:40,719
if i called the function without passing

3396
02:09:40,719 --> 02:09:43,199
the name

3397
02:09:43,199 --> 02:09:45,119
i'm just going to run that and we can

3398
02:09:45,119 --> 02:09:47,599
see we're going to get an error hello

3399
02:09:47,599 --> 02:09:50,320
missing one required positional argument

3400
02:09:50,320 --> 02:09:53,040
name but we can make it so you can call

3401
02:09:53,040 --> 02:09:54,800
this function without passing in a name

3402
02:09:54,800 --> 02:09:56,159
where it's optional you can't if you

3403
02:09:56,159 --> 02:09:58,719
want so i'm going to put an equal sign

3404
02:09:58,719 --> 02:10:02,320
and then i'm gonna type in my friend

3405
02:10:02,320 --> 02:10:04,320
and just to make consistent make this

3406
02:10:04,320 --> 02:10:06,719
consistent i'm gonna make this all

3407
02:10:06,719 --> 02:10:09,440
double quotes

3408
02:10:10,719 --> 02:10:15,119
okay so this is now an optional argument

3409
02:10:15,119 --> 02:10:17,280
so it's it's you can pass in the name

3410
02:10:17,280 --> 02:10:19,040
but if you don't pass a name it's going

3411
02:10:19,040 --> 02:10:21,679
to default to my friend so i'll just run

3412
02:10:21,679 --> 02:10:23,840
this again with that default

3413
02:10:23,840 --> 02:10:26,159
value and now it's hello bow hill quincy

3414
02:10:26,159 --> 02:10:28,639
hello my friend because we called this

3415
02:10:28,639 --> 02:10:31,119
and we didn't specify any argument or

3416
02:10:31,119 --> 02:10:33,440
parameter and then we can also accept

3417
02:10:33,440 --> 02:10:35,360
multiple parameters so i'm just going to

3418
02:10:35,360 --> 02:10:37,679
get rid of this default value and i'll

3419
02:10:37,679 --> 02:10:40,639
put 8 so now we're accepting a name and

3420
02:10:40,639 --> 02:10:44,560
an age so we can now use both parameters

3421
02:10:44,560 --> 02:10:48,159
in our function so i can do plus

3422
02:10:48,159 --> 02:10:49,840
hello

3423
02:10:49,840 --> 02:10:51,050
name

3424
02:10:51,050 --> 02:10:53,920
[Music]

3425
02:10:53,920 --> 02:10:57,280
you are

3426
02:10:57,280 --> 02:10:58,719
and we're going to add

3427
02:10:58,719 --> 02:11:01,040
the age

3428
02:11:01,040 --> 02:11:03,280
and now it's going to be passed in as a

3429
02:11:03,280 --> 02:11:05,040
number but we're going to convert it to

3430
02:11:05,040 --> 02:11:06,400
a string

3431
02:11:06,400 --> 02:11:09,080
so you are

3432
02:11:09,080 --> 02:11:13,440
[Music]

3433
02:11:13,440 --> 02:11:15,599
years old

3434
02:11:15,599 --> 02:11:17,199
and then we have to make sure we have to

3435
02:11:17,199 --> 02:11:19,599
make sure to add a space in here so

3436
02:11:19,599 --> 02:11:21,840
there'll be a space space after this

3437
02:11:21,840 --> 02:11:24,159
word then the number then a space and

3438
02:11:24,159 --> 02:11:26,159
then years old

3439
02:11:26,159 --> 02:11:29,280
so i'm gonna now have to pass in the

3440
02:11:29,280 --> 02:11:30,719
number

3441
02:11:30,719 --> 02:11:34,800
and now i can run this function

3442
02:11:34,800 --> 02:11:36,840
now showing the red

3443
02:11:36,840 --> 02:11:39,360
squiggly lines

3444
02:11:39,360 --> 02:11:41,520
i sometimes the the red squiggly lines

3445
02:11:41,520 --> 02:11:43,440
will appear when it's

3446
02:11:43,440 --> 02:11:45,679
actually correct

3447
02:11:45,679 --> 02:11:47,840
so let me what am i am i doing something

3448
02:11:47,840 --> 02:11:48,960
wrong here

3449
02:11:48,960 --> 02:11:52,960
oh i need to put the parentheses

3450
02:11:52,960 --> 02:11:55,280
if the red squiggly lines appears when

3451
02:11:55,280 --> 02:11:57,440
it's actually correct they'll it they'll

3452
02:11:57,440 --> 02:11:58,639
go away

3453
02:11:58,639 --> 02:12:01,199
usually within a few seconds or if you

3454
02:12:01,199 --> 02:12:02,639
hit enter

3455
02:12:02,639 --> 02:12:04,480
so that actually was a problem i forgot

3456
02:12:04,480 --> 02:12:07,679
the parentheses at the end um so

3457
02:12:07,679 --> 02:12:08,960
you can see this is what the whole

3458
02:12:08,960 --> 02:12:11,119
function looks like

3459
02:12:11,119 --> 02:12:13,440
if it's all on one line but i'm just

3460
02:12:13,440 --> 02:12:14,400
going to

3461
02:12:14,400 --> 02:12:18,000
move that over so hello bo you are 39

3462
02:12:18,000 --> 02:12:20,800
years old so we've used the name and the

3463
02:12:20,800 --> 02:12:21,840
age

3464
02:12:21,840 --> 02:12:25,920
so parameters are passed by reference

3465
02:12:25,920 --> 02:12:28,800
all types in python are objects but some

3466
02:12:28,800 --> 02:12:31,280
of them are immutable including integers

3467
02:12:31,280 --> 02:12:33,920
booleans floats strings and tuples this

3468
02:12:33,920 --> 02:12:35,679
means that if you pass them as

3469
02:12:35,679 --> 02:12:38,239
parameters and you modify their value

3470
02:12:38,239 --> 02:12:40,719
inside the function the new value is not

3471
02:12:40,719 --> 02:12:43,360
reflected outside of the function

3472
02:12:43,360 --> 02:12:45,599
let me just give you an example of that

3473
02:12:45,599 --> 02:12:47,199
so if i just i'm just going to paste in

3474
02:12:47,199 --> 02:12:49,920
some new code here and we can see we

3475
02:12:49,920 --> 02:12:52,560
have this function called change and

3476
02:12:52,560 --> 02:12:54,800
we're going to pass in this value if we

3477
02:12:54,800 --> 02:12:57,760
pass in this this valve variable 1 to

3478
02:12:57,760 --> 02:13:00,159
the change function and we set value to

3479
02:13:00,159 --> 02:13:01,280
2

3480
02:13:01,280 --> 02:13:03,440
well then we're going to print the value

3481
02:13:03,440 --> 02:13:05,599
and see what happens

3482
02:13:05,599 --> 02:13:08,320
and you can see it's now just 1 here so

3483
02:13:08,320 --> 02:13:11,520
so it didn't change the value

3484
02:13:11,520 --> 02:13:14,159
the value so what we change inside the

3485
02:13:14,159 --> 02:13:16,960
function doesn't affect anything from

3486
02:13:16,960 --> 02:13:18,880
outside the function

3487
02:13:18,880 --> 02:13:20,719
and then you can see we have these

3488
02:13:20,719 --> 02:13:22,320
orange squiggly lines here local

3489
02:13:22,320 --> 02:13:24,159
variable value is assigned but never

3490
02:13:24,159 --> 02:13:25,920
used it's just showing that actually

3491
02:13:25,920 --> 02:13:27,840
this isn't really doing anything once

3492
02:13:27,840 --> 02:13:29,679
it's inside the function and we change

3493
02:13:29,679 --> 02:13:31,280
it doesn't change anything outside the

3494
02:13:31,280 --> 02:13:32,880
function

3495
02:13:32,880 --> 02:13:34,880
so if you pass an object that's not

3496
02:13:34,880 --> 02:13:36,800
immutable you do change one of its

3497
02:13:36,800 --> 02:13:38,159
properties and the change will be

3498
02:13:38,159 --> 02:13:40,800
reflected outside so this was

3499
02:13:40,800 --> 02:13:43,520
mutable this is immutable an object that

3500
02:13:43,520 --> 02:13:44,800
would be

3501
02:13:44,800 --> 02:13:47,040
mutable would be like a dictionary so if

3502
02:13:47,040 --> 02:13:49,599
i change this to a dictionary and i put

3503
02:13:49,599 --> 02:13:51,840
name

3504
02:13:52,639 --> 02:13:54,320
and i set it to bow

3505
02:13:54,320 --> 02:13:57,599
but then inside the change i do value

3506
02:13:57,599 --> 02:14:00,719
dot name or not i'll put the the

3507
02:14:00,719 --> 02:14:03,440
brackets value name

3508
02:14:03,440 --> 02:14:07,040
so the key of this dictionary and i set

3509
02:14:07,040 --> 02:14:09,679
that to sid

3510
02:14:09,679 --> 02:14:12,719
and i run this we'll see now the name

3511
02:14:12,719 --> 02:14:15,520
has changed to sin so we changed we use

3512
02:14:15,520 --> 02:14:17,199
the change function to change name to

3513
02:14:17,199 --> 02:14:19,599
sid and now it actually is changed

3514
02:14:19,599 --> 02:14:22,400
because a dictionary is mutable

3515
02:14:22,400 --> 02:14:26,719
so a function can also return a value

3516
02:14:26,719 --> 02:14:29,199
using the return statement

3517
02:14:29,199 --> 02:14:30,800
so i'm going to update this whole thing

3518
02:14:30,800 --> 02:14:33,040
and talk about return statements a

3519
02:14:33,040 --> 02:14:35,599
function can return a value using the

3520
02:14:35,599 --> 02:14:38,719
return statement so it's going to return

3521
02:14:38,719 --> 02:14:40,880
this name that we then can continue to

3522
02:14:40,880 --> 02:14:43,199
use in our in our program it doesn't

3523
02:14:43,199 --> 02:14:44,480
have to return name it can return

3524
02:14:44,480 --> 02:14:46,639
anything that happens inside the

3525
02:14:46,639 --> 02:14:47,679
function

3526
02:14:47,679 --> 02:14:48,719
and

3527
02:14:48,719 --> 02:14:51,040
the when the function meets the return

3528
02:14:51,040 --> 02:14:53,520
statement the function ends so you can

3529
02:14:53,520 --> 02:14:55,440
have a return statement have code after

3530
02:14:55,440 --> 02:14:57,280
it but it will just end like for

3531
02:14:57,280 --> 02:14:58,480
instance if you have the return

3532
02:14:58,480 --> 02:15:00,800
statement in a conditional like in an if

3533
02:15:00,800 --> 02:15:03,599
statement we can also omit

3534
02:15:03,599 --> 02:15:06,320
the return the return value

3535
02:15:06,320 --> 02:15:08,320
so it's just going to end the function

3536
02:15:08,320 --> 02:15:11,280
and not return anything so i had

3537
02:15:11,280 --> 02:15:13,440
mentioned having the return statement in

3538
02:15:13,440 --> 02:15:16,079
a conditional so that's a common way to

3539
02:15:16,079 --> 02:15:18,239
end a function if the starting condition

3540
02:15:18,239 --> 02:15:19,599
is not met

3541
02:15:19,599 --> 02:15:21,119
like for instance if we update the

3542
02:15:21,119 --> 02:15:22,560
function to

3543
02:15:22,560 --> 02:15:27,520
this so if not name return this so if i

3544
02:15:27,520 --> 02:15:30,079
mean if not name return

3545
02:15:30,079 --> 02:15:30,880
or

3546
02:15:30,880 --> 02:15:31,840
else

3547
02:15:31,840 --> 02:15:33,920
you don't even need an else because this

3548
02:15:33,920 --> 02:15:35,599
will just in the function and you don't

3549
02:15:35,599 --> 02:15:37,679
even need an else this will happen if

3550
02:15:37,679 --> 02:15:40,079
there is a name now we just said that

3551
02:15:40,079 --> 02:15:42,400
you have to pass in something if you

3552
02:15:42,400 --> 02:15:44,480
don't have a default value so the way to

3553
02:15:44,480 --> 02:15:47,119
get to that would just be to call the

3554
02:15:47,119 --> 02:15:48,239
function

3555
02:15:48,239 --> 02:15:51,840
with false

3556
02:15:51,840 --> 02:15:53,840
so if we call with false then it's just

3557
02:15:53,840 --> 02:15:55,840
going to return it doesn't do anything

3558
02:15:55,840 --> 02:15:57,679
but if we call it with

3559
02:15:57,679 --> 02:15:58,719
bo

3560
02:15:58,719 --> 02:16:00,639
then let's see

3561
02:16:00,639 --> 02:16:04,000
hello bo so you can also return multiple

3562
02:16:04,000 --> 02:16:07,840
values by using comma separated values

3563
02:16:07,840 --> 02:16:08,639
so

3564
02:16:08,639 --> 02:16:11,280
for instance i can i'm just going to

3565
02:16:11,280 --> 02:16:13,760
take this part off here and then add a

3566
02:16:13,760 --> 02:16:15,920
return statement

3567
02:16:15,920 --> 02:16:19,199
return and then i can return the name i

3568
02:16:19,199 --> 02:16:21,679
can return

3569
02:16:21,679 --> 02:16:23,920
bo in case that's not the name i can

3570
02:16:23,920 --> 02:16:24,960
return

3571
02:16:24,960 --> 02:16:27,119
8 and then i can call this and i'm just

3572
02:16:27,119 --> 02:16:29,360
going to call this with sid

3573
02:16:29,360 --> 02:16:31,199
and we can see what happens

3574
02:16:31,199 --> 02:16:32,638
now

3575
02:16:32,638 --> 02:16:33,439
oh

3576
02:16:33,439 --> 02:16:34,959
it doesn't it's not it doesn't actually

3577
02:16:34,959 --> 02:16:37,439
print what's been returned but if i

3578
02:16:37,439 --> 02:16:39,519
print this

3579
02:16:39,519 --> 02:16:40,959
here we go then we can really see what

3580
02:16:40,959 --> 02:16:42,398
happens so

3581
02:16:42,398 --> 02:16:43,920
in this function it's going to print

3582
02:16:43,920 --> 02:16:46,799
this but now we're also going to print

3583
02:16:46,799 --> 02:16:49,599
what's returned so let's see what that

3584
02:16:49,599 --> 02:16:50,799
looks like so

3585
02:16:50,799 --> 02:16:52,959
this is what when we print what was

3586
02:16:52,959 --> 02:16:55,840
returned it looks like this so it's sid

3587
02:16:55,840 --> 02:16:56,799
bo

3588
02:16:56,799 --> 02:16:57,679
8

3589
02:16:57,679 --> 02:16:59,920
so one thing related to functions and

3590
02:16:59,920 --> 02:17:03,920
also related to other parts of python is

3591
02:17:03,920 --> 02:17:05,840
variable scope

3592
02:17:05,840 --> 02:17:07,599
so let's look at this

3593
02:17:07,599 --> 02:17:10,318
we've declared a variable up here and

3594
02:17:10,318 --> 02:17:12,318
when you declare a variable that

3595
02:17:12,318 --> 02:17:14,000
variable is visible in parts of your

3596
02:17:14,000 --> 02:17:16,799
program depending on where you declare

3597
02:17:16,799 --> 02:17:17,599
it

3598
02:17:17,599 --> 02:17:20,240
so if you declare a variable outside of

3599
02:17:20,240 --> 02:17:22,558
a function the variable is visible to

3600
02:17:22,558 --> 02:17:25,200
any code running after the declare after

3601
02:17:25,200 --> 02:17:28,000
the declaration including functions so

3602
02:17:28,000 --> 02:17:30,638
we call this a global variable so we've

3603
02:17:30,638 --> 02:17:33,040
declared this before the function so we

3604
02:17:33,040 --> 02:17:35,840
can now access it inside a function and

3605
02:17:35,840 --> 02:17:39,679
also outside the function so if i

3606
02:17:39,679 --> 02:17:42,080
so we can see 8 and 8 and it shows right

3607
02:17:42,080 --> 02:17:43,920
here what's going to

3608
02:17:43,920 --> 02:17:44,959
show in the

3609
02:17:44,959 --> 02:17:46,240
console here

3610
02:17:46,240 --> 02:17:48,799
but if we declare a variable inside a

3611
02:17:48,799 --> 02:17:50,240
function let me give you an example if

3612
02:17:50,240 --> 02:17:51,439
we declare

3613
02:17:51,439 --> 02:17:53,599
this variable

3614
02:17:53,599 --> 02:17:54,879
inside the function i'm just going to

3615
02:17:54,879 --> 02:17:56,879
move it down to here

3616
02:17:56,879 --> 02:17:58,398
now it's a

3617
02:17:58,398 --> 02:18:01,359
local variable and it's only visible

3618
02:18:01,359 --> 02:18:03,040
inside the function so let me just

3619
02:18:03,040 --> 02:18:04,398
delete with this because it's not

3620
02:18:04,398 --> 02:18:06,478
actually going to be

3621
02:18:06,478 --> 02:18:08,879
doing that so if i run this we're going

3622
02:18:08,879 --> 02:18:12,000
to see there's there's an error

3623
02:18:12,000 --> 02:18:12,799
name

3624
02:18:12,799 --> 02:18:15,439
age is not defined we're trying to print

3625
02:18:15,439 --> 02:18:17,200
the age here but since the age was

3626
02:18:17,200 --> 02:18:19,920
declared inside the function it's not

3627
02:18:19,920 --> 02:18:21,840
available outside the function it's only

3628
02:18:21,840 --> 02:18:23,120
available

3629
02:18:23,120 --> 02:18:25,439
inside the function

3630
02:18:25,439 --> 02:18:27,920
so you just have to be aware sometimes

3631
02:18:27,920 --> 02:18:29,679
there's local variables that only apply

3632
02:18:29,679 --> 02:18:31,200
inside the function and there's global

3633
02:18:31,200 --> 02:18:33,439
variables if you that can apply inside a

3634
02:18:33,439 --> 02:18:35,519
function and outside a function

3635
02:18:35,519 --> 02:18:36,959
okay now let's look at something else

3636
02:18:36,959 --> 02:18:39,679
with functions and this is nested

3637
02:18:39,679 --> 02:18:41,519
functions

3638
02:18:41,519 --> 02:18:44,478
functions in python can be nested

3639
02:18:44,478 --> 02:18:46,799
inside other functions

3640
02:18:46,799 --> 02:18:49,120
a function defined inside a function is

3641
02:18:49,120 --> 02:18:51,760
visible only inside that function this

3642
02:18:51,760 --> 02:18:53,280
is useful to create utilities that are

3643
02:18:53,280 --> 02:18:55,200
useful to a function but not useful

3644
02:18:55,200 --> 02:18:57,439
outside of it so you might ask why

3645
02:18:57,439 --> 02:18:59,040
should i be hiding this function if it

3646
02:18:59,040 --> 02:19:00,318
does no harm

3647
02:19:00,318 --> 02:19:02,398
well one because it's always best to

3648
02:19:02,398 --> 02:19:04,718
hide functionality that's local to a

3649
02:19:04,718 --> 02:19:07,840
function if it's not useful elsewhere

3650
02:19:07,840 --> 02:19:10,240
also because we can make use of closures

3651
02:19:10,240 --> 02:19:12,879
which we'll talk more about later so so

3652
02:19:12,879 --> 02:19:15,439
look at this example so we have this

3653
02:19:15,439 --> 02:19:18,638
function talk and inside the function we

3654
02:19:18,638 --> 02:19:22,000
defined another function called say

3655
02:19:22,000 --> 02:19:23,519
and then

3656
02:19:23,519 --> 02:19:24,478
what we

3657
02:19:24,478 --> 02:19:27,679
what we do is that we can call that say

3658
02:19:27,679 --> 02:19:28,638
function

3659
02:19:28,638 --> 02:19:31,760
inside the function and so the way this

3660
02:19:31,760 --> 02:19:34,558
works is we pass in the phrase so here's

3661
02:19:34,558 --> 02:19:36,080
the phrase and the phrase i'm going to

3662
02:19:36,080 --> 02:19:37,280
buy the milk

3663
02:19:37,280 --> 02:19:41,840
and here we do we we split it so split

3664
02:19:41,840 --> 02:19:43,439
is a way to

3665
02:19:43,439 --> 02:19:45,200
create a list

3666
02:19:45,200 --> 02:19:47,519
of out of this string so we have this

3667
02:19:47,519 --> 02:19:49,840
string but it's going to split it on

3668
02:19:49,840 --> 02:19:51,920
every space so it's going to create a

3669
02:19:51,920 --> 02:19:54,960
list of each word individually and then

3670
02:19:54,960 --> 02:19:57,760
we're going to run this loop

3671
02:19:57,760 --> 02:19:59,439
more on loops later

3672
02:19:59,439 --> 02:20:02,319
and we're going to for every word in the

3673
02:20:02,319 --> 02:20:04,800
the words list we're going to say

3674
02:20:04,800 --> 02:20:06,240
the word we're going to say the word

3675
02:20:06,240 --> 02:20:07,920
it's just going to print the word so if

3676
02:20:07,920 --> 02:20:10,479
i just run that i am going to buy the

3677
02:20:10,479 --> 02:20:12,560
milk and every time it prints it it

3678
02:20:12,560 --> 02:20:15,040
prints it on a new line so this would

3679
02:20:15,040 --> 02:20:16,240
just be an example because we're never

3680
02:20:16,240 --> 02:20:18,000
going to want to use this save function

3681
02:20:18,000 --> 02:20:19,840
outside the talk function so it's better

3682
02:20:19,840 --> 02:20:23,600
just to put it inside the talk function

3683
02:20:23,600 --> 02:20:25,600
and then i'll just paste in

3684
02:20:25,600 --> 02:20:27,760
another example here if you want to

3685
02:20:27,760 --> 02:20:30,560
access a variable defined in the outer

3686
02:20:30,560 --> 02:20:32,960
function from the inner function

3687
02:20:32,960 --> 02:20:35,359
you first need to declare it as

3688
02:20:35,359 --> 02:20:36,960
non-local

3689
02:20:36,960 --> 02:20:37,760
so

3690
02:20:37,760 --> 02:20:40,960
we're using non-local here at non-local

3691
02:20:40,960 --> 02:20:44,319
count and this allows us to access this

3692
02:20:44,319 --> 02:20:47,600
variable that was declared inside the

3693
02:20:47,600 --> 02:20:49,680
out so this is the outer function count

3694
02:20:49,680 --> 02:20:52,000
and we have this variable called count

3695
02:20:52,000 --> 02:20:53,600
and to be able to access that variable

3696
02:20:53,600 --> 02:20:56,080
in the inner function we have to

3697
02:20:56,080 --> 02:20:58,319
call non-local or we already talked

3698
02:20:58,319 --> 02:21:02,160
about variable scope and if we didn't

3699
02:21:02,160 --> 02:21:03,040
call

3700
02:21:03,040 --> 02:21:04,880
call this non-local then we could not

3701
02:21:04,880 --> 02:21:07,920
access the count variable from inside

3702
02:21:07,920 --> 02:21:09,439
the function so like for instance i'm

3703
02:21:09,439 --> 02:21:11,120
going to run this it's going to print

3704
02:21:11,120 --> 02:21:13,280
the count which is just count plus 1 is

3705
02:21:13,280 --> 02:21:15,680
just adding 1 to this number that's all

3706
02:21:15,680 --> 02:21:18,000
the function does but if i take off this

3707
02:21:18,000 --> 02:21:20,560
word non-local here and i run this we're

3708
02:21:20,560 --> 02:21:23,040
going to get an error because it doesn't

3709
02:21:23,040 --> 02:21:25,040
know what count is it doesn't know that

3710
02:21:25,040 --> 02:21:26,560
we're referring to this count in the

3711
02:21:26,560 --> 02:21:28,720
inner function so we'll just put that

3712
02:21:28,720 --> 02:21:31,120
back on there and then it should work

3713
02:21:31,120 --> 02:21:32,560
again

3714
02:21:32,560 --> 02:21:35,520
this is especially useful with closures

3715
02:21:35,520 --> 02:21:37,680
which we're just about to talk about

3716
02:21:37,680 --> 02:21:39,359
so closure is a special way of doing a

3717
02:21:39,359 --> 02:21:41,760
function in python if you return a

3718
02:21:41,760 --> 02:21:44,080
nested function from a function that

3719
02:21:44,080 --> 02:21:45,920
nested function has access to the

3720
02:21:45,920 --> 02:21:48,800
variables defined in that function even

3721
02:21:48,800 --> 02:21:51,280
if that function is not active anymore

3722
02:21:51,280 --> 02:21:52,960
so let me show you an example i'm going

3723
02:21:52,960 --> 02:21:54,560
to paste some code that'll be very

3724
02:21:54,560 --> 02:21:56,800
similar to this code but just a a little

3725
02:21:56,800 --> 02:21:59,439
different and then i'll explain it so

3726
02:21:59,439 --> 02:22:02,160
now instead of count it's a counter so

3727
02:22:02,160 --> 02:22:04,720
we're returning count from this nested

3728
02:22:04,720 --> 02:22:07,359
function and from the outer function

3729
02:22:07,359 --> 02:22:10,080
we're returning the nested function

3730
02:22:10,080 --> 02:22:12,319
we're returning the increment function

3731
02:22:12,319 --> 02:22:14,319
and then here instead of just calling

3732
02:22:14,319 --> 02:22:16,720
the function directory the outer

3733
02:22:16,720 --> 02:22:18,720
function we're assigning it to this

3734
02:22:18,720 --> 02:22:22,000
variable and now we're going to print

3735
02:22:22,000 --> 02:22:23,760
we're just going to call we're going to

3736
02:22:23,760 --> 02:22:27,040
call this variable which is the returned

3737
02:22:27,040 --> 02:22:28,960
inner function so we're basically

3738
02:22:28,960 --> 02:22:30,800
calling the inner function and it's

3739
02:22:30,800 --> 02:22:32,640
still going it's because we're calling

3740
02:22:32,640 --> 02:22:35,120
the inner function it's not going to

3741
02:22:35,120 --> 02:22:38,160
reset the count to zero every time and

3742
02:22:38,160 --> 02:22:40,880
it can keep track of that value and we

3743
02:22:40,880 --> 02:22:42,080
have this

3744
02:22:42,080 --> 02:22:43,280
using a comment what it's going to

3745
02:22:43,280 --> 02:22:45,520
return but we can also

3746
02:22:45,520 --> 02:22:48,399
run the program and we can see one two

3747
02:22:48,399 --> 02:22:51,840
three just like that so we return the

3748
02:22:51,840 --> 02:22:54,000
increment inner function and that still

3749
02:22:54,000 --> 02:22:55,920
has access to the state of the count

3750
02:22:55,920 --> 02:22:57,920
variable even though the counter

3751
02:22:57,920 --> 02:22:59,920
function has ended

3752
02:22:59,920 --> 02:23:02,560
so let's move on to

3753
02:23:02,560 --> 02:23:04,260
objects

3754
02:23:04,260 --> 02:23:06,399
[Music]

3755
02:23:06,399 --> 02:23:09,600
everything in python is an object

3756
02:23:09,600 --> 02:23:12,000
even values of basic prim of types like

3757
02:23:12,000 --> 02:23:14,640
integers strings floats are objects

3758
02:23:14,640 --> 02:23:16,720
lists are objects as well as tuples

3759
02:23:16,720 --> 02:23:19,359
dictionaries and pretty much everything

3760
02:23:19,359 --> 02:23:22,319
so objects have attributes and methods

3761
02:23:22,319 --> 02:23:24,319
that can be accessed using the dot

3762
02:23:24,319 --> 02:23:27,280
syntax for example let's define a new

3763
02:23:27,280 --> 02:23:29,600
variable of type int so i'm going to do

3764
02:23:29,600 --> 02:23:32,399
age equals eight

3765
02:23:32,399 --> 02:23:34,800
age now has access to the properties and

3766
02:23:34,800 --> 02:23:38,560
methods defined for all int objects

3767
02:23:38,560 --> 02:23:40,319
this includes for example access to the

3768
02:23:40,319 --> 02:23:42,800
real and imaginary part of that number

3769
02:23:42,800 --> 02:23:44,240
so i can do

3770
02:23:44,240 --> 02:23:46,160
a print

3771
02:23:46,160 --> 02:23:48,479
age dot real

3772
02:23:48,479 --> 02:23:50,560
and then if i just run that

3773
02:23:50,560 --> 02:23:53,520
the real part is eight i can also print

3774
02:23:53,520 --> 02:23:55,040
the imaginary

3775
02:23:55,040 --> 02:23:57,200
part of the number

3776
02:23:57,200 --> 02:23:58,840
and manage

3777
02:23:58,840 --> 02:24:01,439
and there is no imaginary part of the

3778
02:24:01,439 --> 02:24:02,880
number so it just

3779
02:24:02,880 --> 02:24:06,319
does zero i can also get the the bit

3780
02:24:06,319 --> 02:24:08,960
length age dot

3781
02:24:08,960 --> 02:24:09,840
bit

3782
02:24:09,840 --> 02:24:12,319
length

3783
02:24:13,600 --> 02:24:15,359
and if i run that

3784
02:24:15,359 --> 02:24:18,800
we can see the bit length is four so the

3785
02:24:18,800 --> 02:24:20,960
bit length method returns the number of

3786
02:24:20,960 --> 02:24:23,280
bits necessary to represent this number

3787
02:24:23,280 --> 02:24:25,600
in binary notation

3788
02:24:25,600 --> 02:24:27,680
so there's just a lot of

3789
02:24:27,680 --> 02:24:29,840
things that you can use for all int

3790
02:24:29,840 --> 02:24:32,399
objects and these are just a few of them

3791
02:24:32,399 --> 02:24:35,280
so a variable holding a list value has

3792
02:24:35,280 --> 02:24:38,479
access to a different set of methods so

3793
02:24:38,479 --> 02:24:40,000
i'm going to

3794
02:24:40,000 --> 02:24:41,760
update this again we're going to do

3795
02:24:41,760 --> 02:24:43,120
items

3796
02:24:43,120 --> 02:24:45,040
equals and we're going to create a list

3797
02:24:45,040 --> 02:24:46,080
one

3798
02:24:46,080 --> 02:24:47,040
two

3799
02:24:47,040 --> 02:24:48,240
so

3800
02:24:48,240 --> 02:24:49,359
i can do

3801
02:24:49,359 --> 02:24:51,040
items dot

3802
02:24:51,040 --> 02:24:52,240
append

3803
02:24:52,240 --> 02:24:54,319
i can append a three i can append

3804
02:24:54,319 --> 02:24:56,479
another item i can do

3805
02:24:56,479 --> 02:24:58,560
items dot pop

3806
02:24:58,560 --> 02:25:00,479
which is going to

3807
02:25:00,479 --> 02:25:03,200
remove and return the last item which is

3808
02:25:03,200 --> 02:25:04,720
the three

3809
02:25:04,720 --> 02:25:07,520
and the methods so so these are the

3810
02:25:07,520 --> 02:25:09,439
methods of pin and pop and the methods

3811
02:25:09,439 --> 02:25:12,479
available to an object depend on the

3812
02:25:12,479 --> 02:25:14,800
type of value

3813
02:25:14,800 --> 02:25:17,120
the id global function provided by

3814
02:25:17,120 --> 02:25:19,760
python lets you inspect the location in

3815
02:25:19,760 --> 02:25:22,560
memory for a particular object so for

3816
02:25:22,560 --> 02:25:25,280
instance i could do a print and i'm

3817
02:25:25,280 --> 02:25:28,080
going to do id what's the id of the

3818
02:25:28,080 --> 02:25:29,439
items

3819
02:25:29,439 --> 02:25:31,120
object

3820
02:25:31,120 --> 02:25:33,920
and we can see this is the location in

3821
02:25:33,920 --> 02:25:35,280
memory

3822
02:25:35,280 --> 02:25:37,840
so some val some objects are mutable

3823
02:25:37,840 --> 02:25:39,520
while others are immutable this is

3824
02:25:39,520 --> 02:25:41,280
something that we already talked about a

3825
02:25:41,280 --> 02:25:43,520
little bit that depends on the object

3826
02:25:43,520 --> 02:25:46,800
itself if the object provides methods to

3827
02:25:46,800 --> 02:25:48,960
change its content then it's mutable

3828
02:25:48,960 --> 02:25:50,800
otherwise it's immutable

3829
02:25:50,800 --> 02:25:52,960
most most types defined by python are

3830
02:25:52,960 --> 02:25:54,880
immutable for example an int is

3831
02:25:54,880 --> 02:25:56,800
immutable there are no methods to change

3832
02:25:56,800 --> 02:25:59,359
its value so if you increment the value

3833
02:25:59,359 --> 02:26:01,840
like with um

3834
02:26:01,840 --> 02:26:04,399
age equals age

3835
02:26:04,399 --> 02:26:05,520
plus

3836
02:26:05,520 --> 02:26:06,479
one

3837
02:26:06,479 --> 02:26:08,319
it's actually going to create an

3838
02:26:08,319 --> 02:26:09,600
entirely

3839
02:26:09,600 --> 02:26:11,200
new value

3840
02:26:11,200 --> 02:26:13,920
so it it's not going to even be the same

3841
02:26:13,920 --> 02:26:16,319
object at all because age you it has to

3842
02:26:16,319 --> 02:26:18,479
create a whole new one to reassign it

3843
02:26:18,479 --> 02:26:22,080
but something like a in in a dictionary

3844
02:26:22,080 --> 02:26:24,240
it would actually be the same object but

3845
02:26:24,240 --> 02:26:25,920
you could just change different parts of

3846
02:26:25,920 --> 02:26:28,640
it now let's talk more about

3847
02:26:28,640 --> 02:26:30,240
loops

3848
02:26:30,240 --> 02:26:31,760
so this song we already discussed a

3849
02:26:31,760 --> 02:26:34,240
little bit in the previous section but

3850
02:26:34,240 --> 02:26:35,520
loops are

3851
02:26:35,520 --> 02:26:37,680
one essential part of programming

3852
02:26:37,680 --> 02:26:41,120
and in python we have two kinds of loops

3853
02:26:41,120 --> 02:26:44,080
while loops and for loops

3854
02:26:44,080 --> 02:26:47,120
so before i um show i'm going to paste

3855
02:26:47,120 --> 02:26:49,760
in this code but i just want to show

3856
02:26:49,760 --> 02:26:52,000
something really quick see how there's a

3857
02:26:52,000 --> 02:26:54,000
line like dotted line here and a dotted

3858
02:26:54,000 --> 02:26:56,319
line here this is showing the default

3859
02:26:56,319 --> 02:26:59,040
indentation which we can change so i'm

3860
02:26:59,040 --> 02:27:01,120
actually going to go and change

3861
02:27:01,120 --> 02:27:03,200
that really quick let me wait i think

3862
02:27:03,200 --> 02:27:04,880
i'm gonna have to yeah i'm gonna zoom

3863
02:27:04,880 --> 02:27:06,800
out so i can get to this and i'm gonna

3864
02:27:06,800 --> 02:27:10,000
change the indent to four and now it's

3865
02:27:10,000 --> 02:27:11,680
not going to have a little line right in

3866
02:27:11,680 --> 02:27:14,800
there so now i'm going to go back here

3867
02:27:14,800 --> 02:27:18,640
and let's zoom in again

3868
02:27:19,120 --> 02:27:21,520
okay so let's talk about

3869
02:27:21,520 --> 02:27:22,880
while loops

3870
02:27:22,880 --> 02:27:25,439
while loops are defined using the

3871
02:27:25,439 --> 02:27:26,319
while

3872
02:27:26,319 --> 02:27:27,359
keyword

3873
02:27:27,359 --> 02:27:30,080
and they repeat their block until the

3874
02:27:30,080 --> 02:27:33,200
the condition is evaluated as false so

3875
02:27:33,200 --> 02:27:36,560
while condition equals true so

3876
02:27:36,560 --> 02:27:40,560
this particular example is an infinite

3877
02:27:40,560 --> 02:27:43,680
loop it never ends because this

3878
02:27:43,680 --> 02:27:45,840
condition is always going to so if we

3879
02:27:45,840 --> 02:27:47,760
run this program which i'm not going to

3880
02:27:47,760 --> 02:27:49,920
do right now because it just goes on

3881
02:27:49,920 --> 02:27:52,319
forever while this condition is true

3882
02:27:52,319 --> 02:27:55,840
keep running the code inside the loop

3883
02:27:55,840 --> 02:27:57,439
all the lines of code that are indented

3884
02:27:57,439 --> 02:27:58,399
the same amount

3885
02:27:58,399 --> 02:28:00,880
so let's halt the loop right after the

3886
02:28:00,880 --> 02:28:05,680
first iteration i can do condition

3887
02:28:05,680 --> 02:28:06,800
equals

3888
02:28:06,800 --> 02:28:09,800
false

3889
02:28:10,140 --> 02:28:12,560
[Music]

3890
02:28:12,560 --> 02:28:16,720
so now if i run it it just runs the loop

3891
02:28:16,720 --> 02:28:17,920
one time

3892
02:28:17,920 --> 02:28:19,840
so in this case the first iteration is

3893
02:28:19,840 --> 02:28:22,800
run as the condition is evaluated true

3894
02:28:22,800 --> 02:28:24,800
and then at the second iteration the

3895
02:28:24,800 --> 02:28:27,840
condition test evaluates to false so the

3896
02:28:27,840 --> 02:28:30,319
control goes to the next instruction

3897
02:28:30,319 --> 02:28:32,720
after the loop which in this case there

3898
02:28:32,720 --> 02:28:36,000
is no next instruction after the loop

3899
02:28:36,000 --> 02:28:37,760
it's common to have a counter to stop

3900
02:28:37,760 --> 02:28:40,240
the iteration after some number of

3901
02:28:40,240 --> 02:28:42,720
cycles

3902
02:28:42,800 --> 02:28:46,160
so here's a while loop with a counter so

3903
02:28:46,160 --> 02:28:48,880
you you start the counter at zero and

3904
02:28:48,880 --> 02:28:52,800
then while count is less than 10.

3905
02:28:52,800 --> 02:28:54,479
we're we're gonna print this count

3906
02:28:54,479 --> 02:28:56,319
equals count plus one so it's going to

3907
02:28:56,319 --> 02:28:58,800
increment the counter every time

3908
02:28:58,800 --> 02:29:01,439
until we get to the end so it's gonna

3909
02:29:01,439 --> 02:29:03,200
see it's gonna print this until

3910
02:29:03,200 --> 02:29:07,359
eventually the count is

3911
02:29:07,439 --> 02:29:09,359
greater than 10

3912
02:29:09,359 --> 02:29:12,240
so or 10 or 10 or greater while count is

3913
02:29:12,240 --> 02:29:14,560
less than 10. so once it gets to 10 the

3914
02:29:14,560 --> 02:29:18,160
loop will stop um again another way to

3915
02:29:18,160 --> 02:29:20,160
doing to do this we could have just done

3916
02:29:20,160 --> 02:29:24,000
plus equals plus equals one so if i run

3917
02:29:24,000 --> 02:29:25,600
that it's going to do the exact same

3918
02:29:25,600 --> 02:29:27,120
thing

3919
02:29:27,120 --> 02:29:30,720
and other type is the for loop so using

3920
02:29:30,720 --> 02:29:32,800
for loops we can tell python to execute

3921
02:29:32,800 --> 02:29:35,120
a block for a predetermined amount of

3922
02:29:35,120 --> 02:29:37,600
times up front and without the need of a

3923
02:29:37,600 --> 02:29:39,760
separate variable and conditional to

3924
02:29:39,760 --> 02:29:41,280
check its value

3925
02:29:41,280 --> 02:29:44,000
it's commonly used to iterate the items

3926
02:29:44,000 --> 02:29:47,120
in a list so we have this list there's

3927
02:29:47,120 --> 02:29:49,200
obviously four items here and then four

3928
02:29:49,200 --> 02:29:51,840
item in items so items is this list and

3929
02:29:51,840 --> 02:29:53,280
then for each item in the list we're

3930
02:29:53,280 --> 02:29:54,399
going to print

3931
02:29:54,399 --> 02:29:56,399
the item pretty straightforward and it

3932
02:29:56,399 --> 02:29:59,040
prints each item in the list

3933
02:29:59,040 --> 02:30:01,520
or you can iterate a specific amount of

3934
02:30:01,520 --> 02:30:04,720
times using the range function so let's

3935
02:30:04,720 --> 02:30:06,560
say we don't have we're not going to

3936
02:30:06,560 --> 02:30:08,800
define this here we're just going to do

3937
02:30:08,800 --> 02:30:11,840
4 item in and then here i'm going to

3938
02:30:11,840 --> 02:30:14,319
type in range

3939
02:30:14,319 --> 02:30:15,920
and then i'm just going to type in a

3940
02:30:15,920 --> 02:30:17,359
number how about

3941
02:30:17,359 --> 02:30:18,960
15

3942
02:30:18,960 --> 02:30:21,040
so i'm using the range function that

3943
02:30:21,040 --> 02:30:23,840
basically just returns a list and then

3944
02:30:23,840 --> 02:30:26,080
if i do that we can see it's going from

3945
02:30:26,080 --> 02:30:29,680
0 to 14. so the range function is going

3946
02:30:29,680 --> 02:30:31,120
to return a

3947
02:30:31,120 --> 02:30:33,760
a list that goes from 0 to 14 so there's

3948
02:30:33,760 --> 02:30:35,439
15 items and it's going to print the

3949
02:30:35,439 --> 02:30:36,800
items

3950
02:30:36,800 --> 02:30:39,040
now if we just go back a few steps to

3951
02:30:39,040 --> 02:30:41,600
when we had the list here

3952
02:30:41,600 --> 02:30:43,600
we can i can show you how to get the

3953
02:30:43,600 --> 02:30:47,040
index so right now it's just printing

3954
02:30:47,040 --> 02:30:49,680
the items one two three four but what if

3955
02:30:49,680 --> 02:30:52,319
we want the index of the list

3956
02:30:52,319 --> 02:30:55,840
we can do that by using the by wrapping

3957
02:30:55,840 --> 02:30:58,800
the sequence in the enumerate function

3958
02:30:58,800 --> 02:31:02,399
so for items in and then

3959
02:31:02,399 --> 02:31:03,840
i'm going to do

3960
02:31:03,840 --> 02:31:06,640
enumerate

3961
02:31:06,960 --> 02:31:10,080
i'm going to pass in

3962
02:31:10,880 --> 02:31:13,439
so this is going to return

3963
02:31:13,439 --> 02:31:15,439
each item and

3964
02:31:15,439 --> 02:31:17,439
the index of the item and since there's

3965
02:31:17,439 --> 02:31:19,280
going to be an item in an index

3966
02:31:19,280 --> 02:31:20,960
but it's actually the index and then the

3967
02:31:20,960 --> 02:31:24,160
item i'm going to type an index comma

3968
02:31:24,160 --> 02:31:26,960
item so this enumerate is going to get

3969
02:31:26,960 --> 02:31:29,840
the index and the item so now i can

3970
02:31:29,840 --> 02:31:33,840
print the index and the item here and if

3971
02:31:33,840 --> 02:31:35,600
i run that

3972
02:31:35,600 --> 02:31:38,240
so index zero item one index one item

3973
02:31:38,240 --> 02:31:41,840
two index two item three and so on and

3974
02:31:41,840 --> 02:31:43,920
it doesn't even have to be numbers we

3975
02:31:43,920 --> 02:31:46,240
can

3976
02:31:46,399 --> 02:31:48,190
do names

3977
02:31:48,190 --> 02:31:52,599
[Music]

3978
02:31:52,880 --> 02:31:55,359
and if i just run that whoops not that

3979
02:31:55,359 --> 02:31:57,200
one

3980
02:31:57,200 --> 02:32:00,080
and then we can see the the index and

3981
02:32:00,080 --> 02:32:02,399
the item then let me put in some more

3982
02:32:02,399 --> 02:32:05,760
code here so i can talk about break and

3983
02:32:05,760 --> 02:32:07,120
continue

3984
02:32:07,120 --> 02:32:09,040
both while and for loops can be

3985
02:32:09,040 --> 02:32:11,200
interrupted inside the block using

3986
02:32:11,200 --> 02:32:13,280
either break or continue

3987
02:32:13,280 --> 02:32:15,920
continue stops the current iteration and

3988
02:32:15,920 --> 02:32:18,640
tells python to execute the next one

3989
02:32:18,640 --> 02:32:21,200
and break stops the loop altogether and

3990
02:32:21,200 --> 02:32:23,520
goes on with the next instruction after

3991
02:32:23,520 --> 02:32:26,399
the loop ends so i'm going to just play

3992
02:32:26,399 --> 02:32:28,800
this so here we're saying if item equals

3993
02:32:28,800 --> 02:32:30,800
two continues that means it's going to

3994
02:32:30,800 --> 02:32:32,880
skip that iteration so if i play this

3995
02:32:32,880 --> 02:32:35,760
one three four so it's not going to it's

3996
02:32:35,760 --> 02:32:37,120
not going to get to the print item

3997
02:32:37,120 --> 02:32:38,960
because it's actually skipped that

3998
02:32:38,960 --> 02:32:40,800
iteration it just

3999
02:32:40,800 --> 02:32:43,680
doesn't run any code after the continue

4000
02:32:43,680 --> 02:32:45,200
if this is true

4001
02:32:45,200 --> 02:32:47,760
and so it doesn't print 2. so if we

4002
02:32:47,760 --> 02:32:49,760
change this to break it will be very

4003
02:32:49,760 --> 02:32:52,240
it'll be a little different here this

4004
02:32:52,240 --> 02:32:55,040
time it's going to just print one

4005
02:32:55,040 --> 02:32:56,800
because now it's breaking out of the

4006
02:32:56,800 --> 02:32:57,760
loop

4007
02:32:57,760 --> 02:32:59,600
entirely and it's not going to run any

4008
02:32:59,600 --> 02:33:02,399
more iteration of the loop

4009
02:33:02,399 --> 02:33:04,840
okay let's talk about another thing

4010
02:33:04,840 --> 02:33:08,960
classes classes in python

4011
02:33:08,960 --> 02:33:11,439
so in addition to using the python

4012
02:33:11,439 --> 02:33:13,600
provided types we can declare our own

4013
02:33:13,600 --> 02:33:14,800
classes

4014
02:33:14,800 --> 02:33:17,840
and from the classes we can instantiate

4015
02:33:17,840 --> 02:33:19,040
objects

4016
02:33:19,040 --> 02:33:22,080
an object is an instance of a class

4017
02:33:22,080 --> 02:33:25,920
a class is the type of an object so

4018
02:33:25,920 --> 02:33:27,760
here's an example i'm going to create a

4019
02:33:27,760 --> 02:33:30,160
class called

4020
02:33:30,160 --> 02:33:32,160
dog

4021
02:33:32,160 --> 02:33:33,120
so

4022
02:33:33,120 --> 02:33:35,200
uh to create a class you just put the

4023
02:33:35,200 --> 02:33:37,359
word class and then put the the class

4024
02:33:37,359 --> 02:33:38,319
name

4025
02:33:38,319 --> 02:33:39,600
and

4026
02:33:39,600 --> 02:33:40,479
now

4027
02:33:40,479 --> 02:33:42,479
i can i can

4028
02:33:42,479 --> 02:33:45,840
add a method for the class so to define

4029
02:33:45,840 --> 02:33:48,860
a method i'll just do define bark

4030
02:33:48,860 --> 02:33:50,080
[Music]

4031
02:33:50,080 --> 02:33:53,680
and i'm going to put the word self here

4032
02:33:53,680 --> 02:33:57,600
and inside this i'll print

4033
02:33:59,350 --> 02:34:01,520
[Music]

4034
02:34:01,520 --> 02:34:02,620
woof

4035
02:34:02,620 --> 02:34:05,870
[Music]

4036
02:34:05,920 --> 02:34:08,640
okay so self as an argument of the

4037
02:34:08,640 --> 02:34:10,080
method

4038
02:34:10,080 --> 02:34:12,160
will point to the current object

4039
02:34:12,160 --> 02:34:14,720
instance and must be specified when

4040
02:34:14,720 --> 02:34:17,120
defining a method so when you're

4041
02:34:17,120 --> 02:34:18,560
creating a method inside a class you're

4042
02:34:18,560 --> 02:34:21,680
always going to start with self so we

4043
02:34:21,680 --> 02:34:24,080
create an instance of a class

4044
02:34:24,080 --> 02:34:25,760
which is an object

4045
02:34:25,760 --> 02:34:26,800
like this

4046
02:34:26,800 --> 02:34:28,840
so i'm just going to put

4047
02:34:28,840 --> 02:34:30,800
roger

4048
02:34:30,800 --> 02:34:32,000
equals

4049
02:34:32,000 --> 02:34:33,600
dog

4050
02:34:33,600 --> 02:34:36,640
okay so i've created a dog just like

4051
02:34:36,640 --> 02:34:37,600
this

4052
02:34:37,600 --> 02:34:40,479
and then i can

4053
02:34:40,479 --> 02:34:42,319
print

4054
02:34:42,319 --> 02:34:43,359
type

4055
02:34:43,359 --> 02:34:46,399
roger so let's see what the type of this

4056
02:34:46,399 --> 02:34:49,520
roger is we can see it's the class to

4057
02:34:49,520 --> 02:34:51,040
dog class

4058
02:34:51,040 --> 02:34:54,319
roger is a dog

4059
02:34:54,319 --> 02:34:57,120
a special type of method

4060
02:34:57,120 --> 02:34:59,040
called in there's a special type of

4061
02:34:59,040 --> 02:35:01,680
method called init which is a

4062
02:35:01,680 --> 02:35:03,200
constructor

4063
02:35:03,200 --> 02:35:05,760
so let me show you how to create a

4064
02:35:05,760 --> 02:35:07,920
constructor

4065
02:35:07,920 --> 02:35:10,920
deaf

4066
02:35:14,479 --> 02:35:16,399
so we can use this

4067
02:35:16,399 --> 02:35:18,240
a constructor like this

4068
02:35:18,240 --> 02:35:20,479
to initialize one more properties when

4069
02:35:20,479 --> 02:35:23,439
we create a new object from that class

4070
02:35:23,439 --> 02:35:25,359
so you can see we always have to add

4071
02:35:25,359 --> 02:35:28,560
self but now these are the two

4072
02:35:28,560 --> 02:35:31,280
variables we can pass in when we create

4073
02:35:31,280 --> 02:35:34,399
a dog and that will associate be

4074
02:35:34,399 --> 02:35:36,399
associated with that

4075
02:35:36,399 --> 02:35:37,200
that

4076
02:35:37,200 --> 02:35:38,880
object

4077
02:35:38,880 --> 02:35:42,160
so down here i can call um i can call

4078
02:35:42,160 --> 02:35:46,319
dog but i can pass in roger for the name

4079
02:35:46,319 --> 02:35:47,359
and

4080
02:35:47,359 --> 02:35:48,560
the age

4081
02:35:48,560 --> 02:35:51,200
and now when we create this

4082
02:35:51,200 --> 02:35:54,960
dog it's going to assign the name to

4083
02:35:54,960 --> 02:35:56,880
self.name and it's going to assign the

4084
02:35:56,880 --> 02:35:59,920
age to self.age and let me show you how

4085
02:35:59,920 --> 02:36:02,640
you can access that information

4086
02:36:02,640 --> 02:36:04,479
so i'm going to print instead of

4087
02:36:04,479 --> 02:36:07,120
printing the type i'm going to do roger

4088
02:36:07,120 --> 02:36:09,359
dot name

4089
02:36:09,359 --> 02:36:11,120
and now it's going to when i do

4090
02:36:11,120 --> 02:36:14,560
roger.name that's self.name so self is

4091
02:36:14,560 --> 02:36:17,200
roger and we do self.name it's going to

4092
02:36:17,200 --> 02:36:19,359
be the name that was passed in

4093
02:36:19,359 --> 02:36:21,680
and then we can also

4094
02:36:21,680 --> 02:36:23,280
do the age

4095
02:36:23,280 --> 02:36:25,920
and then we can finally

4096
02:36:25,920 --> 02:36:28,479
call the bark method so we have bark

4097
02:36:28,479 --> 02:36:30,720
here now we can see what that does so

4098
02:36:30,720 --> 02:36:32,960
i'm just going to run that

4099
02:36:32,960 --> 02:36:35,040
and we have roger

4100
02:36:35,040 --> 02:36:36,960
we have eight

4101
02:36:36,960 --> 02:36:38,640
and then

4102
02:36:38,640 --> 02:36:40,479
this is because i should have put

4103
02:36:40,479 --> 02:36:42,000
parentheses here so let me put

4104
02:36:42,000 --> 02:36:44,640
parentheses after bark

4105
02:36:44,640 --> 02:36:48,840
and so we have wolf here so roger 8

4106
02:36:48,840 --> 02:36:51,680
wolf and the reason why it says none

4107
02:36:51,680 --> 02:36:54,240
here is because i didn't have to put the

4108
02:36:54,240 --> 02:36:56,319
print see i i put pranks that was in

4109
02:36:56,319 --> 02:36:58,000
this groove if you're playing print on

4110
02:36:58,000 --> 02:37:00,479
everything but calling bark

4111
02:37:00,479 --> 02:37:02,960
already prints wolf

4112
02:37:02,960 --> 02:37:04,880
so when i do

4113
02:37:04,880 --> 02:37:06,479
it when it's when it's printing it's

4114
02:37:06,479 --> 02:37:07,880
printing because since

4115
02:37:07,880 --> 02:37:10,560
roger.bark doesn't return anything

4116
02:37:10,560 --> 02:37:12,800
there's no return statement that's why

4117
02:37:12,800 --> 02:37:15,359
it printed none so there'd be two ways

4118
02:37:15,359 --> 02:37:17,600
to fix that either instead of printing

4119
02:37:17,600 --> 02:37:20,240
wolf i could return wolf

4120
02:37:20,240 --> 02:37:23,040
or i could just not do the print here so

4121
02:37:23,040 --> 02:37:25,439
let me just take that off

4122
02:37:25,439 --> 02:37:27,120
okay roger 8

4123
02:37:27,120 --> 02:37:28,080
wolf

4124
02:37:28,080 --> 02:37:30,880
so one important feature of class is

4125
02:37:30,880 --> 02:37:33,520
inheritance let me show you an example

4126
02:37:33,520 --> 02:37:36,880
of inheritance i'm going to create a new

4127
02:37:36,880 --> 02:37:39,680
class before the dog class and this is

4128
02:37:39,680 --> 02:37:40,800
going to be

4129
02:37:40,800 --> 02:37:42,960
a class

4130
02:37:42,960 --> 02:37:43,920
called

4131
02:37:43,920 --> 02:37:45,359
animal

4132
02:37:45,359 --> 02:37:47,840
and the animal class i'm going to put a

4133
02:37:47,840 --> 02:37:50,080
function called walk

4134
02:37:50,080 --> 02:37:53,040
and i'm going to always pass in self

4135
02:37:53,040 --> 02:37:55,110
and this is going to print

4136
02:37:55,110 --> 02:37:56,960
[Music]

4137
02:37:56,960 --> 02:37:58,300
walking

4138
02:37:58,300 --> 02:38:00,160
[Music]

4139
02:38:00,160 --> 02:38:03,200
and then we can make the dog class

4140
02:38:03,200 --> 02:38:06,319
inherent inherit from the animal class

4141
02:38:06,319 --> 02:38:08,080
so we have class dog but if i put

4142
02:38:08,080 --> 02:38:09,520
parentheses here

4143
02:38:09,520 --> 02:38:11,920
then i can type in animal

4144
02:38:11,920 --> 02:38:14,160
and now the dog class is going to

4145
02:38:14,160 --> 02:38:17,520
inherit from the animal class and now i

4146
02:38:17,520 --> 02:38:20,399
can go down here and after roger.bark i

4147
02:38:20,399 --> 02:38:23,040
can do roger.walk

4148
02:38:23,040 --> 02:38:24,880
and if i run that

4149
02:38:24,880 --> 02:38:27,040
okay so roger 8wolf but now it's going

4150
02:38:27,040 --> 02:38:29,439
to be able to do walking and you can see

4151
02:38:29,439 --> 02:38:32,479
the dog class doesn't actually have a

4152
02:38:32,479 --> 02:38:35,280
walk method but it's getting it from

4153
02:38:35,280 --> 02:38:37,680
the animal class it's inheriting this

4154
02:38:37,680 --> 02:38:38,960
method

4155
02:38:38,960 --> 02:38:42,880
and in that way you're able to i could

4156
02:38:42,880 --> 02:38:46,319
create a class cat a class frog

4157
02:38:46,319 --> 02:38:49,200
a class bird and each of them could

4158
02:38:49,200 --> 02:38:51,280
inherit the walk

4159
02:38:51,280 --> 02:38:53,920
method and then it would have

4160
02:38:53,920 --> 02:38:55,280
walking

4161
02:38:55,280 --> 02:38:56,640
and we'll be doing a little more with

4162
02:38:56,640 --> 02:38:59,600
classes in the the final project

4163
02:38:59,600 --> 02:39:01,200
in this course

4164
02:39:01,200 --> 02:39:03,040
because we'll be going a little more

4165
02:39:03,040 --> 02:39:06,240
over object oriented programming

4166
02:39:06,240 --> 02:39:09,200
but right now let's talk about something

4167
02:39:09,200 --> 02:39:11,600
new i'm going to just delete all this

4168
02:39:11,600 --> 02:39:13,200
and we're going to be talking about

4169
02:39:13,200 --> 02:39:14,960
modules

4170
02:39:14,960 --> 02:39:18,160
so every python file is a module you can

4171
02:39:18,160 --> 02:39:20,000
import a module from other files and

4172
02:39:20,000 --> 02:39:21,520
that's the base of any program of

4173
02:39:21,520 --> 02:39:23,680
moderate complexity as it promotes a

4174
02:39:23,680 --> 02:39:26,240
sensible organization and code reuse so

4175
02:39:26,240 --> 02:39:28,640
it's basically how you can create a

4176
02:39:28,640 --> 02:39:30,720
software that has multiple python

4177
02:39:30,720 --> 02:39:33,040
programs in the same piece of software

4178
02:39:33,040 --> 02:39:35,520
so in the typical python program one

4179
02:39:35,520 --> 02:39:38,080
file acts as the entry point and the

4180
02:39:38,080 --> 02:39:40,080
other files are modules and exposed

4181
02:39:40,080 --> 02:39:42,319
functions that we can call from

4182
02:39:42,319 --> 02:39:44,720
other files so

4183
02:39:44,720 --> 02:39:47,200
let me just show you an example i am

4184
02:39:47,200 --> 02:39:48,399
going to

4185
02:39:48,399 --> 02:39:50,000
open up this

4186
02:39:50,000 --> 02:39:52,479
files tab and i'm going to create a new

4187
02:39:52,479 --> 02:39:54,640
file and this is going to be called dog

4188
02:39:54,640 --> 02:39:55,920
dot pi

4189
02:39:55,920 --> 02:39:57,840
and now i have dog dot pi open i no

4190
02:39:57,840 --> 02:40:00,240
longer have the main dot pi open and i'm

4191
02:40:00,240 --> 02:40:02,000
going to define

4192
02:40:02,000 --> 02:40:03,840
bark

4193
02:40:03,840 --> 02:40:07,040
and what bark is going to do is just

4194
02:40:07,040 --> 02:40:09,040
print

4195
02:40:09,040 --> 02:40:10,010
woof

4196
02:40:10,010 --> 02:40:11,520
[Music]

4197
02:40:11,520 --> 02:40:14,240
okay now i'm going to it's just going to

4198
02:40:14,240 --> 02:40:15,359
automatically save for me i'm going to

4199
02:40:15,359 --> 02:40:18,640
go back to the the python file and now

4200
02:40:18,640 --> 02:40:20,479
i'm going to

4201
02:40:20,479 --> 02:40:22,240
import

4202
02:40:22,240 --> 02:40:24,319
dog

4203
02:40:24,319 --> 02:40:26,319
and let's see oh it's just saying it's

4204
02:40:26,319 --> 02:40:28,160
unused i thought maybe this thing wrong

4205
02:40:28,160 --> 02:40:29,600
but that just means i import dog and i

4206
02:40:29,600 --> 02:40:30,880
haven't used it which i'm about to do

4207
02:40:30,880 --> 02:40:32,560
right now so dog

4208
02:40:32,560 --> 02:40:33,439
dot

4209
02:40:33,439 --> 02:40:35,040
bark

4210
02:40:35,040 --> 02:40:37,600
so now if i run this program

4211
02:40:37,600 --> 02:40:40,160
it's going to say wolf but that's not

4212
02:40:40,160 --> 02:40:44,160
from this file it's actually importing

4213
02:40:44,160 --> 02:40:46,880
this function from from the dog file so

4214
02:40:46,880 --> 02:40:49,040
that's a way you can

4215
02:40:49,040 --> 02:40:52,720
break up your code into multiple files

4216
02:40:52,720 --> 02:40:56,319
we can also use the from import syntax

4217
02:40:56,319 --> 02:40:58,800
and call the function directly

4218
02:40:58,800 --> 02:41:00,800
let me show you what i mean so instead

4219
02:41:00,800 --> 02:41:04,720
of import dog i'm going to say

4220
02:41:04,720 --> 02:41:06,560
from dog

4221
02:41:06,560 --> 02:41:07,840
import

4222
02:41:07,840 --> 02:41:09,520
bark

4223
02:41:09,520 --> 02:41:12,000
and then instead of calling it dog.bark

4224
02:41:12,000 --> 02:41:13,359
i can just call

4225
02:41:13,359 --> 02:41:14,319
bark

4226
02:41:14,319 --> 02:41:17,200
because we're only importing bark well

4227
02:41:17,200 --> 02:41:18,960
we've imported bark directly instead of

4228
02:41:18,960 --> 02:41:21,600
the whole dog so i can run that and it

4229
02:41:21,600 --> 02:41:22,399
says

4230
02:41:22,399 --> 02:41:23,600
wolf

4231
02:41:23,600 --> 02:41:24,880
so

4232
02:41:24,880 --> 02:41:26,800
the first strategy allows us to load

4233
02:41:26,800 --> 02:41:28,640
everything defined in a file when i just

4234
02:41:28,640 --> 02:41:29,680
said

4235
02:41:29,680 --> 02:41:31,920
import dog that

4236
02:41:31,920 --> 02:41:34,240
allows everything defined in a file so i

4237
02:41:34,240 --> 02:41:36,880
could have a bunch of function like bark

4238
02:41:36,880 --> 02:41:39,040
or walk

4239
02:41:39,040 --> 02:41:40,560
name or there could be a bunch of

4240
02:41:40,560 --> 02:41:43,200
functions if i just say import dog it

4241
02:41:43,200 --> 02:41:45,200
imports all of them but the second

4242
02:41:45,200 --> 02:41:48,720
strategy from dog import bark allows us

4243
02:41:48,720 --> 02:41:50,640
to just pick the things we need so we're

4244
02:41:50,640 --> 02:41:52,560
only going to import the specific

4245
02:41:52,560 --> 02:41:54,880
functions that we need

4246
02:41:54,880 --> 02:41:56,640
those modules are specific to your

4247
02:41:56,640 --> 02:41:58,720
program and importing depends on the

4248
02:41:58,720 --> 02:42:02,000
location of the file in the file system

4249
02:42:02,000 --> 02:42:03,040
so

4250
02:42:03,040 --> 02:42:06,880
suppose you put dog.pi in a

4251
02:42:06,880 --> 02:42:09,520
subfolder for instance let's say i

4252
02:42:09,520 --> 02:42:11,120
create a folder

4253
02:42:11,120 --> 02:42:14,399
and i call it liv for library and let's

4254
02:42:14,399 --> 02:42:18,240
say i put dog.pi in this subfolder like

4255
02:42:18,240 --> 02:42:19,600
this

4256
02:42:19,600 --> 02:42:22,479
now in this folder to make this work i'm

4257
02:42:22,479 --> 02:42:24,399
going to have to create an empty file

4258
02:42:24,399 --> 02:42:28,399
named init.pie so i'm going to add file

4259
02:42:28,399 --> 02:42:31,520
and i'll do init dot or under underscore

4260
02:42:31,520 --> 02:42:33,600
underscore init underscore underscore

4261
02:42:33,600 --> 02:42:34,960
dot pi

4262
02:42:34,960 --> 02:42:37,439
and this tells python that

4263
02:42:37,439 --> 02:42:40,479
the folder contains modules

4264
02:42:40,479 --> 02:42:43,680
now i'm going to go back to my main file

4265
02:42:43,680 --> 02:42:45,600
and i can

4266
02:42:45,600 --> 02:42:47,840
i can import dog from

4267
02:42:47,840 --> 02:42:50,399
lib so i'm going to say from

4268
02:42:50,399 --> 02:42:51,359
lib

4269
02:42:51,359 --> 02:42:54,960
that's that subfolder import

4270
02:42:54,960 --> 02:42:56,319
dog

4271
02:42:56,319 --> 02:42:57,920
and then i can do

4272
02:42:57,920 --> 02:42:59,439
dog

4273
02:42:59,439 --> 02:43:01,920
dot bark so let's run that to make sure

4274
02:43:01,920 --> 02:43:03,840
there's no errors it worked

4275
02:43:03,840 --> 02:43:06,720
correctly so i was able to import this

4276
02:43:06,720 --> 02:43:09,920
file from the subfolder

4277
02:43:09,920 --> 02:43:12,080
or you can reference the dog module

4278
02:43:12,080 --> 02:43:14,560
specific function by importing from

4279
02:43:14,560 --> 02:43:17,160
lib.dog so i can do from

4280
02:43:17,160 --> 02:43:18,960
lib.dog

4281
02:43:18,960 --> 02:43:20,000
import

4282
02:43:20,000 --> 02:43:23,600
bark and now instead of calling dog.bark

4283
02:43:23,600 --> 02:43:25,359
i can just call

4284
02:43:25,359 --> 02:43:26,479
bark

4285
02:43:26,479 --> 02:43:27,760
and it says

4286
02:43:27,760 --> 02:43:28,800
wolf

4287
02:43:28,800 --> 02:43:30,960
so i'm going to close this here

4288
02:43:30,960 --> 02:43:31,920
and

4289
02:43:31,920 --> 02:43:34,160
now let's talk about the python standard

4290
02:43:34,160 --> 02:43:38,240
library so basically there's all these

4291
02:43:38,240 --> 02:43:41,600
pre-built modules you can

4292
02:43:41,600 --> 02:43:43,520
you can load a lot of code from the

4293
02:43:43,520 --> 02:43:46,080
standard library python exposes a lot of

4294
02:43:46,080 --> 02:43:47,600
built-in functionality through its

4295
02:43:47,600 --> 02:43:48,960
standard library

4296
02:43:48,960 --> 02:43:50,800
the stand library is a huge collection

4297
02:43:50,800 --> 02:43:52,880
of all sorts of utilities ranging from

4298
02:43:52,880 --> 02:43:55,120
math utilities to debugging to creating

4299
02:43:55,120 --> 02:43:57,200
graphical user interfaces

4300
02:43:57,200 --> 02:43:59,120
so there's a bunch of them but here's

4301
02:43:59,120 --> 02:44:01,359
some of the more common ones we have

4302
02:44:01,359 --> 02:44:03,760
math for math utilities re regular

4303
02:44:03,760 --> 02:44:06,960
expressions json to work with json date

4304
02:44:06,960 --> 02:44:09,680
time sqlite 3 os for operating system

4305
02:44:09,680 --> 02:44:11,600
utilities random for random number

4306
02:44:11,600 --> 02:44:13,359
generations

4307
02:44:13,359 --> 02:44:14,800
so

4308
02:44:14,800 --> 02:44:17,680
statistics requests for http request

4309
02:44:17,680 --> 02:44:20,399
http to create servers url lib to manage

4310
02:44:20,399 --> 02:44:24,640
urls so you can import these modules

4311
02:44:24,640 --> 02:44:26,640
that allow you to get extra

4312
02:44:26,640 --> 02:44:29,120
functionality so

4313
02:44:29,120 --> 02:44:31,359
we already looked at a little bit at the

4314
02:44:31,359 --> 02:44:33,040
math one we already looked a little bit

4315
02:44:33,040 --> 02:44:35,840
at random in the the first

4316
02:44:35,840 --> 02:44:38,800
uh project that we did but let's just

4317
02:44:38,800 --> 02:44:40,399
kind of look at a little more how you

4318
02:44:40,399 --> 02:44:42,560
would do this so now we are going to use

4319
02:44:42,560 --> 02:44:45,600
the the math one we're going to import

4320
02:44:45,600 --> 02:44:47,840
math

4321
02:44:47,840 --> 02:44:48,720
and

4322
02:44:48,720 --> 02:44:50,560
so this is how you would introduce you

4323
02:44:50,560 --> 02:44:52,080
would use a module of the standard

4324
02:44:52,080 --> 02:44:55,359
library so we already saw how to import

4325
02:44:55,359 --> 02:44:57,680
modules that we created it's very stan

4326
02:44:57,680 --> 02:44:59,040
it's very similar with the standard

4327
02:44:59,040 --> 02:45:02,080
library so now that i've imported math i

4328
02:45:02,080 --> 02:45:04,080
can now use

4329
02:45:04,080 --> 02:45:06,479
functions and methods from from the math

4330
02:45:06,479 --> 02:45:09,359
module so i can do math dot

4331
02:45:09,359 --> 02:45:12,800
square root and i can pass in 4 and then

4332
02:45:12,800 --> 02:45:13,840
i can just

4333
02:45:13,840 --> 02:45:15,840
print that so we can see what the result

4334
02:45:15,840 --> 02:45:18,080
is

4335
02:45:18,960 --> 02:45:20,800
okay 2.0

4336
02:45:20,800 --> 02:45:23,200
or we can

4337
02:45:23,200 --> 02:45:24,720
just like we shall

4338
02:45:24,720 --> 02:45:27,760
we saw before instead of importing math

4339
02:45:27,760 --> 02:45:29,840
i can say

4340
02:45:29,840 --> 02:45:32,240
from math

4341
02:45:32,240 --> 02:45:33,520
import

4342
02:45:33,520 --> 02:45:35,920
square root and then instead of just

4343
02:45:35,920 --> 02:45:37,840
doing math dot square root i can just

4344
02:45:37,840 --> 02:45:38,800
call

4345
02:45:38,800 --> 02:45:39,600
this

4346
02:45:39,600 --> 02:45:41,920
square root method here and it's going

4347
02:45:41,920 --> 02:45:44,080
to do the same thing so that's basically

4348
02:45:44,080 --> 02:45:46,240
how it works for for all the modules in

4349
02:45:46,240 --> 02:45:48,080
the standard library okay now we're

4350
02:45:48,080 --> 02:45:50,000
going to start going over a few kind of

4351
02:45:50,000 --> 02:45:51,600
miscellaneous

4352
02:45:51,600 --> 02:45:54,880
slightly more advanced topics in python

4353
02:45:54,880 --> 02:45:57,040
so we're going to talk about how to

4354
02:45:57,040 --> 02:45:59,760
accept arguments from the command line

4355
02:45:59,760 --> 02:46:01,040
in python

4356
02:46:01,040 --> 02:46:03,760
well first of all let's see how to run a

4357
02:46:03,760 --> 02:46:05,840
program from the command line

4358
02:46:05,840 --> 02:46:08,560
in replit so let's say we have a program

4359
02:46:08,560 --> 02:46:11,359
it just says print

4360
02:46:11,359 --> 02:46:14,479
hello okay so we've been running it by

4361
02:46:14,479 --> 02:46:17,359
just clicking this play button but

4362
02:46:17,359 --> 02:46:19,040
there's another way to run a program in

4363
02:46:19,040 --> 02:46:21,680
replit and i go over to the shell so

4364
02:46:21,680 --> 02:46:25,040
this is the command line in replica we

4365
02:46:25,040 --> 02:46:26,399
can clear this

4366
02:46:26,399 --> 02:46:29,240
and now i'm just going to type in

4367
02:46:29,240 --> 02:46:32,000
python main dot pi

4368
02:46:32,000 --> 02:46:34,960
okay so what we call python to run the

4369
02:46:34,960 --> 02:46:37,279
python program and then we just put the

4370
02:46:37,279 --> 02:46:40,319
name of our file with main.pi

4371
02:46:40,319 --> 02:46:41,200
so

4372
02:46:41,200 --> 02:46:43,120
whether you're in replit or if you're

4373
02:46:43,120 --> 02:46:45,040
running things locally

4374
02:46:45,040 --> 02:46:46,399
you should be able to

4375
02:46:46,399 --> 02:46:48,399
run a program in the same way

4376
02:46:48,399 --> 02:46:50,479
depending on how you install the program

4377
02:46:50,479 --> 02:46:53,439
locally instead of typing python you may

4378
02:46:53,439 --> 02:46:56,720
type in python 3.

4379
02:46:56,720 --> 02:46:59,439
sometimes the way people install python

4380
02:46:59,439 --> 02:47:01,520
it will be python 3 because we're using

4381
02:47:01,520 --> 02:47:03,840
version 3 of python

4382
02:47:03,840 --> 02:47:06,399
so now let's see how you can

4383
02:47:06,399 --> 02:47:09,200
call a python a program on the command

4384
02:47:09,200 --> 02:47:12,960
line and pass in some arguments right

4385
02:47:12,960 --> 02:47:15,680
when we run the program from the command

4386
02:47:15,680 --> 02:47:17,200
line

4387
02:47:17,200 --> 02:47:18,880
so

4388
02:47:18,880 --> 02:47:21,040
a basic way to handle arguments is to

4389
02:47:21,040 --> 02:47:24,399
use the sys module from the standard

4390
02:47:24,399 --> 02:47:27,920
library so let me give you an example so

4391
02:47:27,920 --> 02:47:30,960
first of all we're going to import sys

4392
02:47:30,960 --> 02:47:33,120
now just so you know usually you're

4393
02:47:33,120 --> 02:47:34,720
always going to have import statements

4394
02:47:34,720 --> 02:47:36,960
on the first line i'm just putting this

4395
02:47:36,960 --> 02:47:38,560
comment on the first line to remind us

4396
02:47:38,560 --> 02:47:41,200
what we're working on right now so now

4397
02:47:41,200 --> 02:47:43,439
i'm going to we're going to import the

4398
02:47:43,439 --> 02:47:45,439
sys library

4399
02:47:45,439 --> 02:47:47,279
now i'm going to

4400
02:47:47,279 --> 02:47:48,479
print

4401
02:47:48,479 --> 02:47:52,880
and i'm going to first i'm going to

4402
02:47:52,880 --> 02:47:54,000
oh

4403
02:47:54,000 --> 02:47:55,200
we're going to print the argument

4404
02:47:55,200 --> 02:47:56,720
cis.arg

4405
02:47:56,720 --> 02:47:58,319
the

4406
02:47:58,319 --> 02:48:00,560
so this is how we can print all the

4407
02:48:00,560 --> 02:48:03,279
arguments that were passed in

4408
02:48:03,279 --> 02:48:05,680
when we called the program so so i'm

4409
02:48:05,680 --> 02:48:08,800
going to see we have python main.pi and

4410
02:48:08,800 --> 02:48:10,160
now i'm going to put

4411
02:48:10,160 --> 02:48:12,160
bow

4412
02:48:12,160 --> 02:48:13,680
39

4413
02:48:13,680 --> 02:48:16,560
okay so you can see it's printing the

4414
02:48:16,560 --> 02:48:19,040
list of arguments so this is basically

4415
02:48:19,040 --> 02:48:21,359
just a list the first item is the name

4416
02:48:21,359 --> 02:48:22,479
of file

4417
02:48:22,479 --> 02:48:24,000
then we have

4418
02:48:24,000 --> 02:48:26,640
the the first word and then the second

4419
02:48:26,640 --> 02:48:28,399
one and you can see they're both strings

4420
02:48:28,399 --> 02:48:31,040
even though this is a number it's coming

4421
02:48:31,040 --> 02:48:31,760
in

4422
02:48:31,760 --> 02:48:34,479
as a string so then we could do

4423
02:48:34,479 --> 02:48:37,600
something like this we could say name

4424
02:48:37,600 --> 02:48:41,040
equals cis.arg v

4425
02:48:41,040 --> 02:48:44,080
and then i would

4426
02:48:44,080 --> 02:48:47,359
get the element at index 1 which is the

4427
02:48:47,359 --> 02:48:51,520
name here and i could print

4428
02:48:51,560 --> 02:48:53,840
[Music]

4429
02:48:53,840 --> 02:48:55,439
hello

4430
02:48:55,439 --> 02:48:58,240
and then we're going to do a name oh

4431
02:48:58,240 --> 02:49:01,520
hello hello and then name so let's call

4432
02:49:01,520 --> 02:49:02,640
this again

4433
02:49:02,640 --> 02:49:04,640
and instead of i'm not going to do 39

4434
02:49:04,640 --> 02:49:08,800
it's just going to be python main.pi bow

4435
02:49:08,800 --> 02:49:11,279
hello bo so we've now been able to use

4436
02:49:11,279 --> 02:49:14,880
the argument that was passed in

4437
02:49:14,880 --> 02:49:16,880
now this is a simple way to do it but

4438
02:49:16,880 --> 02:49:17,760
you

4439
02:49:17,760 --> 02:49:19,279
really would have to do a lot of work

4440
02:49:19,279 --> 02:49:21,040
using this method because you really

4441
02:49:21,040 --> 02:49:22,640
should validate the arguments make sure

4442
02:49:22,640 --> 02:49:24,560
the type is correct and you need to

4443
02:49:24,560 --> 02:49:26,160
print feedback to the user if they're

4444
02:49:26,160 --> 02:49:29,040
not using the program correctly

4445
02:49:29,040 --> 02:49:30,560
so i got zoomed out a little bit and i'm

4446
02:49:30,560 --> 02:49:33,200
going to show you this other method

4447
02:49:33,200 --> 02:49:35,040
so python provides another package in

4448
02:49:35,040 --> 02:49:36,640
the standard library to help you called

4449
02:49:36,640 --> 02:49:39,200
arg parse so first you would insert

4450
02:49:39,200 --> 02:49:41,080
import arg parse

4451
02:49:41,080 --> 02:49:43,439
[Music]

4452
02:49:43,439 --> 02:49:45,439
and then let me show you

4453
02:49:45,439 --> 02:49:47,520
how you would use it

4454
02:49:47,520 --> 02:49:50,080
so you call arc parse dot argument

4455
02:49:50,080 --> 02:49:51,760
parser

4456
02:49:51,760 --> 02:49:54,399
and then pass in the description of the

4457
02:49:54,399 --> 02:49:56,000
program so the description of the

4458
02:49:56,000 --> 02:49:58,240
program is this program prints the name

4459
02:49:58,240 --> 02:49:59,840
of my dogs

4460
02:49:59,840 --> 02:50:00,720
then

4461
02:50:00,720 --> 02:50:03,040
you proceed to add arguments you want to

4462
02:50:03,040 --> 02:50:05,040
accept

4463
02:50:05,040 --> 02:50:07,439
so for this example program we are going

4464
02:50:07,439 --> 02:50:09,840
to accept the c option or it can be

4465
02:50:09,840 --> 02:50:11,200
slash

4466
02:50:11,200 --> 02:50:13,359
c or dash that's color

4467
02:50:13,359 --> 02:50:16,160
and we are going to

4468
02:50:16,160 --> 02:50:18,960
be calling it color and then later we

4469
02:50:18,960 --> 02:50:20,359
can we do

4470
02:50:20,359 --> 02:50:22,720
parser.parse args

4471
02:50:22,720 --> 02:50:25,279
and then we can access args

4472
02:50:25,279 --> 02:50:28,319
dot color to get the color that was

4473
02:50:28,319 --> 02:50:30,640
passed in and then you can specify

4474
02:50:30,640 --> 02:50:33,120
whether it's required and what help is

4475
02:50:33,120 --> 02:50:35,520
going to go along with that so let me

4476
02:50:35,520 --> 02:50:37,279
show you how you would do that

4477
02:50:37,279 --> 02:50:39,680
we're going to do python

4478
02:50:39,680 --> 02:50:42,640
main dot pi i'm going to put dash c and

4479
02:50:42,640 --> 02:50:44,800
then i'm just going to put red

4480
02:50:44,800 --> 02:50:46,560
okay so

4481
02:50:46,560 --> 02:50:48,160
you can see if i

4482
02:50:48,160 --> 02:50:49,920
go this out a little more you can see

4483
02:50:49,920 --> 02:50:51,200
this is the

4484
02:50:51,200 --> 02:50:53,279
command i called this is the command i

4485
02:50:53,279 --> 02:50:55,359
run i pass in red and then it just

4486
02:50:55,359 --> 02:50:57,760
printed red that's what we have right

4487
02:50:57,760 --> 02:50:58,720
here

4488
02:50:58,720 --> 02:51:00,800
and so let me show you what would happen

4489
02:51:00,800 --> 02:51:02,800
if we if we

4490
02:51:02,800 --> 02:51:06,720
don't specify the argument so if i just

4491
02:51:06,720 --> 02:51:09,279
run it without the red so it's now

4492
02:51:09,279 --> 02:51:10,399
giving me

4493
02:51:10,399 --> 02:51:14,160
some information usage well main.pi we

4494
02:51:14,160 --> 02:51:16,640
need to put dash c and then we have to

4495
02:51:16,640 --> 02:51:19,680
put a color and then it says the

4496
02:51:19,680 --> 02:51:20,880
following

4497
02:51:20,880 --> 02:51:23,760
arguments are required this dashi or

4498
02:51:23,760 --> 02:51:28,000
dash sc so it's it's showing us that we

4499
02:51:28,000 --> 02:51:29,040
need to

4500
02:51:29,040 --> 02:51:31,760
if we we've called the program wrong and

4501
02:51:31,760 --> 02:51:33,279
we're going to need to call it with the

4502
02:51:33,279 --> 02:51:34,800
dash c

4503
02:51:34,800 --> 02:51:36,399
you can also

4504
02:51:36,399 --> 02:51:38,880
set this option

4505
02:51:38,880 --> 02:51:40,720
we can set an option to have a specific

4506
02:51:40,720 --> 02:51:44,240
set of values using choices so after

4507
02:51:44,240 --> 02:51:46,640
required true after this comma i'm going

4508
02:51:46,640 --> 02:51:49,120
to type in choices and i'm going to set

4509
02:51:49,120 --> 02:51:52,080
this to equal

4510
02:51:52,319 --> 02:51:53,840
see i have this empty

4511
02:51:53,840 --> 02:51:55,200
dictionary

4512
02:51:55,200 --> 02:51:57,120
but i'm just going to well not a

4513
02:51:57,120 --> 02:51:58,479
dictionary but

4514
02:51:58,479 --> 02:51:59,520
because it's not going to key value

4515
02:51:59,520 --> 02:52:01,279
pairs i can do red

4516
02:52:01,279 --> 02:52:02,720
and yellow

4517
02:52:02,720 --> 02:52:06,319
so now it's it can only accept

4518
02:52:06,319 --> 02:52:09,279
two options so i can

4519
02:52:09,279 --> 02:52:11,279
call it here

4520
02:52:11,279 --> 02:52:13,520
with

4521
02:52:13,520 --> 02:52:15,279
red

4522
02:52:15,279 --> 02:52:17,840
but if i call with blue

4523
02:52:17,840 --> 02:52:19,040
it will say

4524
02:52:19,040 --> 02:52:21,200
invalid choice blue i need to choose

4525
02:52:21,200 --> 02:52:24,560
from red or yellow so

4526
02:52:24,560 --> 02:52:26,960
using this arc parse makes it easier to

4527
02:52:26,960 --> 02:52:29,200
deal with arguments and also makes it

4528
02:52:29,200 --> 02:52:30,479
easier to

4529
02:52:30,479 --> 02:52:33,279
communicate information back to the user

4530
02:52:33,279 --> 02:52:36,000
about what we're trying to get

4531
02:52:36,000 --> 02:52:37,920
so there are more options with this but

4532
02:52:37,920 --> 02:52:40,240
those are those are the basics

4533
02:52:40,240 --> 02:52:41,680
now let's talk about something

4534
02:52:41,680 --> 02:52:43,520
completely different

4535
02:52:43,520 --> 02:52:45,040
lambda

4536
02:52:45,040 --> 02:52:46,560
lambda

4537
02:52:46,560 --> 02:52:49,040
functions

4538
02:52:49,040 --> 02:52:51,160
so let me just give you a quick example

4539
02:52:51,160 --> 02:52:54,370
[Music]

4540
02:52:55,040 --> 02:52:57,120
lambda num

4541
02:52:57,120 --> 02:52:57,530
num

4542
02:52:57,530 --> 02:52:59,359
[Music]

4543
02:52:59,359 --> 02:53:00,640
times

4544
02:53:00,640 --> 02:53:02,479
2. so

4545
02:53:02,479 --> 02:53:03,920
lambda functions

4546
02:53:03,920 --> 02:53:06,240
also called anonymous functions are tiny

4547
02:53:06,240 --> 02:53:08,720
functions they have no name and only

4548
02:53:08,720 --> 02:53:11,040
have one expression as their body

4549
02:53:11,040 --> 02:53:12,880
so they're defined using the lambda

4550
02:53:12,880 --> 02:53:14,880
keyword and so

4551
02:53:14,880 --> 02:53:17,200
this is going to be the argument

4552
02:53:17,200 --> 02:53:20,000
and this is going to be the expression

4553
02:53:20,000 --> 02:53:22,399
the body must be a single expression and

4554
02:53:22,399 --> 02:53:23,680
it has to be an expression not a

4555
02:53:23,680 --> 02:53:25,200
statement so this difference is

4556
02:53:25,200 --> 02:53:27,600
important an expression returns a value

4557
02:53:27,600 --> 02:53:31,279
a statement does not so it has to return

4558
02:53:31,279 --> 02:53:33,600
a value so the value that's being

4559
02:53:33,600 --> 02:53:35,760
returned is the number times two the

4560
02:53:35,760 --> 02:53:37,680
number that was passed in going to

4561
02:53:37,680 --> 02:53:39,920
multiply it by 2 in this example

4562
02:53:39,920 --> 02:53:41,359
so this is basically the simplest

4563
02:53:41,359 --> 02:53:43,279
example of a lambda function it just

4564
02:53:43,279 --> 02:53:46,399
doubles the value of a number and lambda

4565
02:53:46,399 --> 02:53:49,279
functions can accept more

4566
02:53:49,279 --> 02:53:50,479
arguments so

4567
02:53:50,479 --> 02:53:52,130
so for instance i could do

4568
02:53:52,130 --> 02:53:54,080
[Music]

4569
02:53:54,080 --> 02:53:56,080
lambda

4570
02:53:56,080 --> 02:53:57,840
a comma b

4571
02:53:57,840 --> 02:54:02,640
and then we can multiply a times b

4572
02:54:02,640 --> 02:54:04,240
lambda functions cannot be invoked

4573
02:54:04,240 --> 02:54:06,640
directly but you can't assign them to

4574
02:54:06,640 --> 02:54:10,080
variables so for instance i can assign

4575
02:54:10,080 --> 02:54:12,160
this to the variable called

4576
02:54:12,160 --> 02:54:15,359
multiply so multiply is going to this

4577
02:54:15,359 --> 02:54:18,240
function is going to be assigned to this

4578
02:54:18,240 --> 02:54:20,800
variable here so then the way that i

4579
02:54:20,800 --> 02:54:23,840
would use that i could print now i'll

4580
02:54:23,840 --> 02:54:27,279
print the result of calling multiply

4581
02:54:27,279 --> 02:54:29,120
and then i pass in

4582
02:54:29,120 --> 02:54:30,240
two

4583
02:54:30,240 --> 02:54:31,600
and four

4584
02:54:31,600 --> 02:54:34,720
so if i just run that okay 2 times 4 is

4585
02:54:34,720 --> 02:54:36,720
8. we can see right in the console here

4586
02:54:36,720 --> 02:54:38,479
and then i'm going to just

4587
02:54:38,479 --> 02:54:40,160
zoom in just a little bit

4588
02:54:40,160 --> 02:54:42,640
so the utility of lambda functions comes

4589
02:54:42,640 --> 02:54:44,720
when combined with other python

4590
02:54:44,720 --> 02:54:47,200
functionality for example in combination

4591
02:54:47,200 --> 02:54:50,399
with map filter and reduce so speaking

4592
02:54:50,399 --> 02:54:52,319
of map filter and reduce that's what

4593
02:54:52,319 --> 02:54:55,760
we're going to talk about now map

4594
02:54:55,760 --> 02:54:56,880
filter

4595
02:54:56,880 --> 02:54:58,080
reduce

4596
02:54:58,080 --> 02:55:00,720
so python provides three useful global

4597
02:55:00,720 --> 02:55:02,960
functions we that we can use to work

4598
02:55:02,960 --> 02:55:05,439
with collections so this is map filter

4599
02:55:05,439 --> 02:55:08,479
reduce so first let's talk about

4600
02:55:08,479 --> 02:55:10,960
map and since their functions are going

4601
02:55:10,960 --> 02:55:12,240
to have the

4602
02:55:12,240 --> 02:55:15,279
parentheses at the end so map is used to

4603
02:55:15,279 --> 02:55:16,479
run a function

4604
02:55:16,479 --> 02:55:19,200
upon each item in an iterable item like

4605
02:55:19,200 --> 02:55:21,600
a list and create a new list with the

4606
02:55:21,600 --> 02:55:23,920
same number of items but the values of

4607
02:55:23,920 --> 02:55:27,120
each item can be changed so here's an

4608
02:55:27,120 --> 02:55:29,680
example we have this list

4609
02:55:29,680 --> 02:55:32,319
and then here's the function

4610
02:55:32,319 --> 02:55:35,040
and then we are going to map through

4611
02:55:35,040 --> 02:55:37,279
each item in the list

4612
02:55:37,279 --> 02:55:38,720
and so here's the function we're going

4613
02:55:38,720 --> 02:55:40,720
to run we're going to run this function

4614
02:55:40,720 --> 02:55:43,359
on each item in the list

4615
02:55:43,359 --> 02:55:45,760
and now we're going to get a new list so

4616
02:55:45,760 --> 02:55:47,920
i can do print

4617
02:55:47,920 --> 02:55:50,560
result now if we print that i'll just

4618
02:55:50,560 --> 02:55:53,680
run that function and we can see

4619
02:55:53,680 --> 02:55:58,359
okay we get a map object

4620
02:55:58,720 --> 02:56:01,680
so then we can always just pass it into

4621
02:56:01,680 --> 02:56:03,120
the

4622
02:56:03,120 --> 02:56:05,120
list function

4623
02:56:05,120 --> 02:56:06,960
and then we can

4624
02:56:06,960 --> 02:56:09,120
run the program again two four six so

4625
02:56:09,120 --> 02:56:11,840
one two three became two four

4626
02:56:11,840 --> 02:56:13,600
so yeah whenever you want to do run a

4627
02:56:13,600 --> 02:56:15,600
function on each item in a list you can

4628
02:56:15,600 --> 02:56:17,279
use map

4629
02:56:17,279 --> 02:56:19,920
and when the function is a one-liner

4630
02:56:19,920 --> 02:56:22,399
it's common to use a lambda function so

4631
02:56:22,399 --> 02:56:24,560
we just talked about lambda functions so

4632
02:56:24,560 --> 02:56:26,160
now let me show you how you would do

4633
02:56:26,160 --> 02:56:29,600
this as a lambda function so

4634
02:56:29,600 --> 02:56:30,560
double

4635
02:56:30,560 --> 02:56:32,080
is going this is going to be a variable

4636
02:56:32,080 --> 02:56:33,600
and we're going to assign it to a lambda

4637
02:56:33,600 --> 02:56:35,520
function

4638
02:56:35,520 --> 02:56:38,479
and i'm going to

4639
02:56:39,520 --> 02:56:41,920
so now this lambda function takes the

4640
02:56:41,920 --> 02:56:42,800
number

4641
02:56:42,800 --> 02:56:43,680
a

4642
02:56:43,680 --> 02:56:46,960
and then does a times two so and this we

4643
02:56:46,960 --> 02:56:48,240
just keep the same because now we're

4644
02:56:48,240 --> 02:56:50,479
using a lambda function here and we're

4645
02:56:50,479 --> 02:56:52,479
taking each number and passing it

4646
02:56:52,479 --> 02:56:54,000
through this function where we have the

4647
02:56:54,000 --> 02:56:55,520
the this is each number in the list and

4648
02:56:55,520 --> 02:56:57,760
we multiply it so if i run this program

4649
02:56:57,760 --> 02:57:00,240
it should look exactly the same

4650
02:57:00,240 --> 02:57:03,520
and we can even simplify it even more so

4651
02:57:03,520 --> 02:57:05,439
this is where lambda functions really

4652
02:57:05,439 --> 02:57:08,160
shine instead of assign it assigning it

4653
02:57:08,160 --> 02:57:11,680
to double first i can copy the whole

4654
02:57:11,680 --> 02:57:14,640
function i can delete this completely

4655
02:57:14,640 --> 02:57:17,359
and now i can just put it right in here

4656
02:57:17,359 --> 02:57:20,880
so now we're mapping over this function

4657
02:57:20,880 --> 02:57:22,560
and we don't even have to create the

4658
02:57:22,560 --> 02:57:24,240
function in a different line and assign

4659
02:57:24,240 --> 02:57:25,840
it to a variable first we can put the

4660
02:57:25,840 --> 02:57:28,080
lambda function right in the same line

4661
02:57:28,080 --> 02:57:30,399
right within the map and now i run this

4662
02:57:30,399 --> 02:57:32,000
and it's going to give us the same

4663
02:57:32,000 --> 02:57:34,720
result so remember we started with

4664
02:57:34,720 --> 02:57:37,040
when i first showed you this example we

4665
02:57:37,040 --> 02:57:38,880
had a much longer piece of code now

4666
02:57:38,880 --> 02:57:41,200
we've simplified it with the

4667
02:57:41,200 --> 02:57:42,720
lambda function

4668
02:57:42,720 --> 02:57:46,000
so the original list the original list

4669
02:57:46,000 --> 02:57:48,720
is left untouched in a new list with the

4670
02:57:48,720 --> 02:57:51,439
updated values is returned by map

4671
02:57:51,439 --> 02:57:53,439
the result is a map object which is an

4672
02:57:53,439 --> 02:57:54,880
iterable so

4673
02:57:54,880 --> 02:57:57,439
that's why we needed to cast it to list

4674
02:57:57,439 --> 02:57:59,760
to print its content

4675
02:57:59,760 --> 02:58:03,359
okay now let's talk about filter

4676
02:58:03,359 --> 02:58:05,439
let me put in let me just update the

4677
02:58:05,439 --> 02:58:07,840
code here it's kind of similar but now

4678
02:58:07,840 --> 02:58:09,920
we're using filter filter takes an

4679
02:58:09,920 --> 02:58:13,040
iterable and returns a filter object

4680
02:58:13,040 --> 02:58:15,200
which is another iterable but without

4681
02:58:15,200 --> 02:58:18,479
some of the original items so you can do

4682
02:58:18,479 --> 02:58:21,600
so by returning true or false from the

4683
02:58:21,600 --> 02:58:22,800
filtering

4684
02:58:22,800 --> 02:58:25,120
the filtering function so here's the

4685
02:58:25,120 --> 02:58:27,680
filtering function we are going to check

4686
02:58:27,680 --> 02:58:31,840
if the item passed in is even so

4687
02:58:31,840 --> 02:58:33,840
so here's the list here so

4688
02:58:33,840 --> 02:58:35,439
you can see we're calling filter we pass

4689
02:58:35,439 --> 02:58:37,359
in the function the filtering function

4690
02:58:37,359 --> 02:58:38,960
and then the list

4691
02:58:38,960 --> 02:58:41,120
and we're going to return true or false

4692
02:58:41,120 --> 02:58:43,840
from this function so if it can be if

4693
02:58:43,840 --> 02:58:46,080
it's divisible by if when you divide it

4694
02:58:46,080 --> 02:58:49,279
by two we have zero remainder

4695
02:58:49,279 --> 02:58:51,840
then it's even

4696
02:58:51,840 --> 02:58:52,560
so

4697
02:58:52,560 --> 02:58:54,640
that would return true so this line

4698
02:58:54,640 --> 02:58:56,560
would return true

4699
02:58:56,560 --> 02:58:58,640
and then if not it would return false if

4700
02:58:58,640 --> 02:59:02,080
it's odd so now any even number is going

4701
02:59:02,080 --> 02:59:04,160
to be added to the result and any odd

4702
02:59:04,160 --> 02:59:06,000
number is not going to be added to the

4703
02:59:06,000 --> 02:59:07,920
result so basically we're filtering the

4704
02:59:07,920 --> 02:59:10,640
list based on this function and then

4705
02:59:10,640 --> 02:59:12,160
here we just print

4706
02:59:12,160 --> 02:59:14,800
we convert that result to a list and if

4707
02:59:14,800 --> 02:59:17,439
we run that it's two and obviously if we

4708
02:59:17,439 --> 02:59:19,040
can just put in

4709
02:59:19,040 --> 02:59:21,040
uh more numbers here

4710
02:59:21,040 --> 02:59:22,880
and run that again

4711
02:59:22,880 --> 02:59:24,800
we have two four six

4712
02:59:24,800 --> 02:59:26,960
and then we can just like before we can

4713
02:59:26,960 --> 02:59:29,680
use a lambda function so

4714
02:59:29,680 --> 02:59:31,359
i'm just going to

4715
02:59:31,359 --> 02:59:33,359
copy this here we can just delete this

4716
02:59:33,359 --> 02:59:35,840
whole thing and we are going to put a

4717
02:59:35,840 --> 02:59:38,080
lambda function here so lamb

4718
02:59:38,080 --> 02:59:38,880
duh

4719
02:59:38,880 --> 02:59:41,840
[Music]

4720
02:59:41,840 --> 02:59:44,000
so now you can see we're just putting

4721
02:59:44,000 --> 02:59:46,880
the lambda function in the in line here

4722
02:59:46,880 --> 02:59:49,359
and we are checking to see if it's this

4723
02:59:49,359 --> 02:59:50,800
is going to turn true or false whether

4724
02:59:50,800 --> 02:59:52,319
it's even or not

4725
02:59:52,319 --> 02:59:54,399
and so i run the program and it's going

4726
02:59:54,399 --> 02:59:56,640
to give me the exact same result here

4727
02:59:56,640 --> 02:59:58,240
okay the final thing we're going to talk

4728
02:59:58,240 --> 03:00:00,160
about is reduce

4729
03:00:00,160 --> 03:00:03,120
reduce is used to calculate a value out

4730
03:00:03,120 --> 03:00:06,479
of a sequence like a list so for example

4731
03:00:06,479 --> 03:00:09,760
suppose we have this list of expenses

4732
03:00:09,760 --> 03:00:11,600
stored as tuples

4733
03:00:11,600 --> 03:00:13,760
and so so we had dinner 80 car repair

4734
03:00:13,760 --> 03:00:18,000
180 or 120 and we want to calculate the

4735
03:00:18,000 --> 03:00:18,800
sum

4736
03:00:18,800 --> 03:00:21,439
of this property

4737
03:00:21,439 --> 03:00:22,880
in each tuple

4738
03:00:22,880 --> 03:00:25,840
in this case the cost of the expense

4739
03:00:25,840 --> 03:00:28,240
so here's kind of the long way of doing

4740
03:00:28,240 --> 03:00:31,520
it without using reduce

4741
03:00:31,520 --> 03:00:34,000
we basically take every expense in

4742
03:00:34,000 --> 03:00:37,359
expenses and then we add to the sum here

4743
03:00:37,359 --> 03:00:39,920
and we add expense one that's going to

4744
03:00:39,920 --> 03:00:41,439
be the

4745
03:00:41,439 --> 03:00:43,920
the item at index one and then we get

4746
03:00:43,920 --> 03:00:45,760
the sum and we can print the sum so

4747
03:00:45,760 --> 03:00:47,680
that's kind of like the long way of

4748
03:00:47,680 --> 03:00:50,800
doing it without reduce but there's a

4749
03:00:50,800 --> 03:00:52,960
quicker way so

4750
03:00:52,960 --> 03:00:55,439
to use reduce reduce is a little

4751
03:00:55,439 --> 03:00:57,520
different from map and filter where it's

4752
03:00:57,520 --> 03:01:00,160
not available it's not it's not

4753
03:01:00,160 --> 03:01:02,399
available automatically we have to

4754
03:01:02,399 --> 03:01:04,399
import it from the standard library func

4755
03:01:04,399 --> 03:01:06,960
tools so i'll do from

4756
03:01:06,960 --> 03:01:08,000
funk

4757
03:01:08,000 --> 03:01:10,640
tools or function tools

4758
03:01:10,640 --> 03:01:11,680
import

4759
03:01:11,680 --> 03:01:14,160
[Music]

4760
03:01:14,160 --> 03:01:16,640
reduce

4761
03:01:17,359 --> 03:01:21,840
and now i'm going to

4762
03:01:22,319 --> 03:01:23,760
create a new i'm going to create a new

4763
03:01:23,760 --> 03:01:25,920
variable called sum

4764
03:01:25,920 --> 03:01:28,160
and we're going to set it to

4765
03:01:28,160 --> 03:01:30,319
reduce we're going to use reduce and now

4766
03:01:30,319 --> 03:01:31,680
i'm just going to

4767
03:01:31,680 --> 03:01:33,359
pass in i'm going to go directly to the

4768
03:01:33,359 --> 03:01:35,600
lambda function so

4769
03:01:35,600 --> 03:01:38,600
lambda

4770
03:01:41,439 --> 03:01:43,279
let me just kind of explain this for a

4771
03:01:43,279 --> 03:01:45,920
little bit so reduce the first is going

4772
03:01:45,920 --> 03:01:47,439
to take a function the reduction

4773
03:01:47,439 --> 03:01:48,479
function

4774
03:01:48,479 --> 03:01:49,680
and then

4775
03:01:49,680 --> 03:01:51,439
the iterable here

4776
03:01:51,439 --> 03:01:54,080
and the function has to take two

4777
03:01:54,080 --> 03:01:55,439
arguments

4778
03:01:55,439 --> 03:01:57,439
so this the first argument is the

4779
03:01:57,439 --> 03:02:00,640
accumulated value and then the the right

4780
03:02:00,640 --> 03:02:02,399
argument is

4781
03:02:02,399 --> 03:02:05,040
the updated the update value from the

4782
03:02:05,040 --> 03:02:07,920
iterable so we're going to

4783
03:02:07,920 --> 03:02:09,680
continue adding

4784
03:02:09,680 --> 03:02:11,920
these two item we're going to

4785
03:02:11,920 --> 03:02:14,840
basically add every item together and

4786
03:02:14,840 --> 03:02:16,479
reduce

4787
03:02:16,479 --> 03:02:17,359
the

4788
03:02:17,359 --> 03:02:20,800
i the numbers at the first index all

4789
03:02:20,800 --> 03:02:24,319
into down to one value by adding them

4790
03:02:24,319 --> 03:02:26,800
all together so i'll just

4791
03:02:26,800 --> 03:02:28,960
pray here play here and then we get the

4792
03:02:28,960 --> 03:02:31,680
same number 200 and you can see it's a

4793
03:02:31,680 --> 03:02:33,520
lot it's a lot quicker just to use the

4794
03:02:33,520 --> 03:02:36,080
reduce function compared to the other

4795
03:02:36,080 --> 03:02:38,240
code we had previously

4796
03:02:38,240 --> 03:02:40,319
okay next up we are going to talk about

4797
03:02:40,319 --> 03:02:42,000
recursion

4798
03:02:42,000 --> 03:02:42,840
in

4799
03:02:42,840 --> 03:02:44,960
python not recursion error just

4800
03:02:44,960 --> 03:02:46,160
recursion

4801
03:02:46,160 --> 03:02:49,520
and a function in python can call itself

4802
03:02:49,520 --> 03:02:52,000
that's what recursion is and it can be

4803
03:02:52,000 --> 03:02:54,479
pretty useful in many scenarios a common

4804
03:02:54,479 --> 03:02:56,560
way to explain recursion is by using the

4805
03:02:56,560 --> 03:02:58,479
factorial calculation

4806
03:02:58,479 --> 03:02:59,920
so let me show you how you would

4807
03:02:59,920 --> 03:03:02,240
calculate factorial this isn't python

4808
03:03:02,240 --> 03:03:04,720
code this is just an example here so a

4809
03:03:04,720 --> 03:03:07,600
fact when you do 3 factorial that means

4810
03:03:07,600 --> 03:03:08,960
you do 3

4811
03:03:08,960 --> 03:03:12,399
you multiply every number between three

4812
03:03:12,399 --> 03:03:14,960
between this number and one together so

4813
03:03:14,960 --> 03:03:16,720
three times two times one equals six

4814
03:03:16,720 --> 03:03:18,240
four factorial is four times three times

4815
03:03:18,240 --> 03:03:20,800
two times one five factorial is you know

4816
03:03:20,800 --> 03:03:22,640
five through one and so on and then

4817
03:03:22,640 --> 03:03:24,399
every number you multiply every whole

4818
03:03:24,399 --> 03:03:28,240
number down to one so using recursion we

4819
03:03:28,240 --> 03:03:30,080
can write a function that calculates the

4820
03:03:30,080 --> 03:03:33,279
factorial of any number so let me show

4821
03:03:33,279 --> 03:03:35,359
you so here's the function you can see

4822
03:03:35,359 --> 03:03:38,080
inside the function it's calling the

4823
03:03:38,080 --> 03:03:40,880
same function so a recursive function

4824
03:03:40,880 --> 03:03:42,880
it's always going to have a base case

4825
03:03:42,880 --> 03:03:44,000
that's this

4826
03:03:44,000 --> 03:03:47,520
and the recursive case so the base case

4827
03:03:47,520 --> 03:03:50,319
is when we're going to leave the

4828
03:03:50,319 --> 03:03:53,760
the recursive function so if n is equal

4829
03:03:53,760 --> 03:03:56,319
to one we're going to return one and

4830
03:03:56,319 --> 03:03:58,240
that's basically going to get out of the

4831
03:03:58,240 --> 03:04:01,040
recursive function uh but if n is not

4832
03:04:01,040 --> 03:04:03,439
going to equal one then we have the

4833
03:04:03,439 --> 03:04:06,160
recursive the recursive case where we're

4834
03:04:06,160 --> 03:04:09,040
going to call the function so you always

4835
03:04:09,040 --> 03:04:10,880
need to have at least you always have

4836
03:04:10,880 --> 03:04:12,560
need to have a base case so eventually

4837
03:04:12,560 --> 03:04:15,279
the recursion can stop

4838
03:04:15,279 --> 03:04:18,080
if the recursion doesn't ever stop

4839
03:04:18,080 --> 03:04:20,399
then you're going to get a recursion

4840
03:04:20,399 --> 03:04:21,520
error

4841
03:04:21,520 --> 03:04:23,359
basically python by default will halt

4842
03:04:23,359 --> 03:04:25,920
recursions at 1000 calls and that's when

4843
03:04:25,920 --> 03:04:28,399
you get the recursion error so this is

4844
03:04:28,399 --> 03:04:30,240
going to get the factorial three but

4845
03:04:30,240 --> 03:04:32,160
let's just do this a few more times so

4846
03:04:32,160 --> 03:04:34,000
you can see the difference so three

4847
03:04:34,000 --> 03:04:34,880
four

4848
03:04:34,880 --> 03:04:37,600
five and now we'll test this out

4849
03:04:37,600 --> 03:04:39,040
6 24

4850
03:04:39,040 --> 03:04:40,319
120.

4851
03:04:40,319 --> 03:04:45,120
okay now let's talk about decorators

4852
03:04:45,120 --> 03:04:47,760
so decorators in python are a way to

4853
03:04:47,760 --> 03:04:50,000
change enhance or alter in any way how a

4854
03:04:50,000 --> 03:04:52,479
function works decorators are defined

4855
03:04:52,479 --> 03:04:54,479
with the at symbol followed by the

4856
03:04:54,479 --> 03:04:56,960
decorator name just before the function

4857
03:04:56,960 --> 03:04:59,120
definition

4858
03:04:59,120 --> 03:05:01,040
so for instance let's say we have a

4859
03:05:01,040 --> 03:05:02,000
function

4860
03:05:02,000 --> 03:05:03,600
hello

4861
03:05:03,600 --> 03:05:05,200
and it's just going to be the simplest

4862
03:05:05,200 --> 03:05:08,720
function we're just going to print

4863
03:05:10,240 --> 03:05:11,600
hello

4864
03:05:11,600 --> 03:05:12,880
uh so

4865
03:05:12,880 --> 03:05:15,279
to make that to add a decorator i'm

4866
03:05:15,279 --> 03:05:18,160
going to put like this an at sign and

4867
03:05:18,160 --> 03:05:20,640
then the decorator name in this

4868
03:05:20,640 --> 03:05:23,680
case we're going to type in log time so

4869
03:05:23,680 --> 03:05:27,279
the function has the log time decorator

4870
03:05:27,279 --> 03:05:29,520
assigned so

4871
03:05:29,520 --> 03:05:32,720
whenever we call the hello function the

4872
03:05:32,720 --> 03:05:34,160
decorator is going to be called a

4873
03:05:34,160 --> 03:05:36,160
decorator is a function that takes a

4874
03:05:36,160 --> 03:05:38,479
function as a parameter wraps the

4875
03:05:38,479 --> 03:05:40,399
function in an inner function that

4876
03:05:40,399 --> 03:05:42,880
performs the job it has to do and

4877
03:05:42,880 --> 03:05:45,520
returns that inner function

4878
03:05:45,520 --> 03:05:46,880
so for instance i'm going to create

4879
03:05:46,880 --> 03:05:49,279
another function here that's going to be

4880
03:05:49,279 --> 03:05:51,279
the log time function

4881
03:05:51,279 --> 03:05:54,800
and now we we can do something before

4882
03:05:54,800 --> 03:05:58,640
and after the function like for instance

4883
03:05:58,640 --> 03:06:00,560
we can say

4884
03:06:00,560 --> 03:06:02,960
print

4885
03:06:03,040 --> 03:06:04,640
before

4886
03:06:04,640 --> 03:06:06,240
and then after

4887
03:06:06,240 --> 03:06:08,880
we are going to print

4888
03:06:08,880 --> 03:06:10,399
after

4889
03:06:10,399 --> 03:06:14,120
now if i run this

4890
03:06:14,479 --> 03:06:16,960
oh and we have to call the function

4891
03:06:16,960 --> 03:06:19,840
that's always important

4892
03:06:19,840 --> 03:06:21,840
now if i run this

4893
03:06:21,840 --> 03:06:24,399
before hello after

4894
03:06:24,399 --> 03:06:26,160
so you're going to often use decorator

4895
03:06:26,160 --> 03:06:27,520
functions when you want to change the

4896
03:06:27,520 --> 03:06:30,240
behavior of a function without modifying

4897
03:06:30,240 --> 03:06:32,160
the function itself so a few good

4898
03:06:32,160 --> 03:06:33,359
examples are when you want to add

4899
03:06:33,359 --> 03:06:36,640
logging test performance perform caching

4900
03:06:36,640 --> 03:06:38,960
verify permissions and so on

4901
03:06:38,960 --> 03:06:41,040
you can also use one when you need to

4902
03:06:41,040 --> 03:06:44,240
run the same code on multiple functions

4903
03:06:44,240 --> 03:06:47,840
okay now let's talk about doc strings so

4904
03:06:47,840 --> 03:06:50,600
doc strings

4905
03:06:50,600 --> 03:06:51,920
[Music]

4906
03:06:51,920 --> 03:06:54,080
documentation is hugely important not

4907
03:06:54,080 --> 03:06:55,760
just to communicate to other people what

4908
03:06:55,760 --> 03:06:57,680
the goal of a function or class or

4909
03:06:57,680 --> 03:06:59,680
method or module is but it's also it

4910
03:06:59,680 --> 03:07:01,920
also communicates to yourself when you

4911
03:07:01,920 --> 03:07:04,000
come back to your code like many months

4912
03:07:04,000 --> 03:07:05,760
from now you might not remember all the

4913
03:07:05,760 --> 03:07:07,359
knowledge you were holding in your head

4914
03:07:07,359 --> 03:07:09,760
when you wrote the code so at that point

4915
03:07:09,760 --> 03:07:11,760
reading your code and understanding what

4916
03:07:11,760 --> 03:07:13,760
it's supposed to do

4917
03:07:13,760 --> 03:07:15,439
so that at that point reading your code

4918
03:07:15,439 --> 03:07:17,120
and understanding what it's supposed to

4919
03:07:17,120 --> 03:07:19,920
do will be a lot more difficult so a lot

4920
03:07:19,920 --> 03:07:22,399
that's one of the reasons why people add

4921
03:07:22,399 --> 03:07:26,640
comments so another way is to use a doc

4922
03:07:26,640 --> 03:07:29,200
string so let me show you what a doc

4923
03:07:29,200 --> 03:07:30,960
string looks like

4924
03:07:30,960 --> 03:07:32,960
the utility of a doc strings is that

4925
03:07:32,960 --> 03:07:35,200
they follow conventions

4926
03:07:35,200 --> 03:07:37,760
so they can be processed automatically

4927
03:07:37,760 --> 03:07:39,359
so this is how you would define a doc

4928
03:07:39,359 --> 03:07:41,439
string for a function

4929
03:07:41,439 --> 03:07:42,960
basically you're putting the three

4930
03:07:42,960 --> 03:07:44,640
quotation marks here three quotation

4931
03:07:44,640 --> 03:07:47,200
marks there and then this is a

4932
03:07:47,200 --> 03:07:50,479
description of what the function is

4933
03:07:50,479 --> 03:07:52,319
this is how you would define a doc

4934
03:07:52,319 --> 03:07:54,399
string for a

4935
03:07:54,399 --> 03:07:56,960
a class and a method so

4936
03:07:56,960 --> 03:07:58,560
got the class this is what the class

4937
03:07:58,560 --> 03:08:02,000
does is this is what the method does

4938
03:08:02,000 --> 03:08:04,960
and then it's also common to

4939
03:08:04,960 --> 03:08:07,120
add docs place a doc string at the top

4940
03:08:07,120 --> 03:08:09,920
of the file so if you put a doc string

4941
03:08:09,920 --> 03:08:11,760
at the top of the file it's going to

4942
03:08:11,760 --> 03:08:13,359
look like this

4943
03:08:13,359 --> 03:08:16,640
and it's going to explain what the file

4944
03:08:16,640 --> 03:08:18,160
is all about

4945
03:08:18,160 --> 03:08:21,359
and docs stock strings can also span

4946
03:08:21,359 --> 03:08:22,880
multiple lines just like this is a

4947
03:08:22,880 --> 03:08:25,200
multiple line docs string as long as it

4948
03:08:25,200 --> 03:08:26,960
has the three quarts three quarters at

4949
03:08:26,960 --> 03:08:30,080
the top three quarts at the bottom

4950
03:08:30,080 --> 03:08:33,520
and then python will process the doc

4951
03:08:33,520 --> 03:08:36,399
strings and you can use the help global

4952
03:08:36,399 --> 03:08:39,040
function to get the documentation for a

4953
03:08:39,040 --> 03:08:41,600
class a method a function or a module

4954
03:08:41,600 --> 03:08:42,800
for example i'm going to go to the

4955
03:08:42,800 --> 03:08:45,279
bottom of this and i'm going to say

4956
03:08:45,279 --> 03:08:47,200
print

4957
03:08:47,200 --> 03:08:48,399
help

4958
03:08:48,399 --> 03:08:50,240
and then i'm just going to type in

4959
03:08:50,240 --> 03:08:54,160
dog now i'll run this

4960
03:08:55,680 --> 03:08:58,080
and let me just run it again

4961
03:08:58,080 --> 03:09:00,080
so now you're going to get information

4962
03:09:00,080 --> 03:09:02,479
about the dog we know that the dog has a

4963
03:09:02,479 --> 03:09:04,720
name and age it's a class representing a

4964
03:09:04,720 --> 03:09:07,359
dog and the has these specific

4965
03:09:07,359 --> 03:09:08,399
methods

4966
03:09:08,399 --> 03:09:10,240
and then it says more we can get more

4967
03:09:10,240 --> 03:09:12,240
information data descriptors defined

4968
03:09:12,240 --> 03:09:14,160
here we have

4969
03:09:14,160 --> 03:09:15,359
and this is just going to give us all

4970
03:09:15,359 --> 03:09:16,640
this information

4971
03:09:16,640 --> 03:09:17,680
about

4972
03:09:17,680 --> 03:09:20,640
the dog and we and so that's why it's

4973
03:09:20,640 --> 03:09:23,680
good to use doc strings because there

4974
03:09:23,680 --> 03:09:27,040
are specific standards and it makes it

4975
03:09:27,040 --> 03:09:29,439
easier to get information using

4976
03:09:29,439 --> 03:09:32,640
different helper methods

4977
03:09:34,800 --> 03:09:37,279
and standards allow

4978
03:09:37,279 --> 03:09:39,120
and standards allow us to have tools to

4979
03:09:39,120 --> 03:09:41,359
extract doc strings and automatically

4980
03:09:41,359 --> 03:09:44,560
generate documentation for your code so

4981
03:09:44,560 --> 03:09:46,319
besides just this help functions there's

4982
03:09:46,319 --> 03:09:48,080
a lot of other methods to pull out these

4983
03:09:48,080 --> 03:09:50,640
docs strings and get information about

4984
03:09:50,640 --> 03:09:54,720
your code and next we will learn about

4985
03:09:54,720 --> 03:09:56,800
annotations

4986
03:09:56,800 --> 03:09:59,600
python is dynamically typed so we do not

4987
03:09:59,600 --> 03:10:01,840
have to specify the type of a variable

4988
03:10:01,840 --> 03:10:04,080
or function parameter or a function

4989
03:10:04,080 --> 03:10:05,840
return value

4990
03:10:05,840 --> 03:10:09,279
annotations allow us to optionally do

4991
03:10:09,279 --> 03:10:11,840
that so if we want to actually show what

4992
03:10:11,840 --> 03:10:14,000
type we're expecting for different

4993
03:10:14,000 --> 03:10:16,880
values so here's a function without

4994
03:10:16,880 --> 03:10:19,279
annotations and then here's how we would

4995
03:10:19,279 --> 03:10:22,399
make it have annotations so uh we want

4996
03:10:22,399 --> 03:10:25,439
to make this function only accept an int

4997
03:10:25,439 --> 03:10:27,680
so i'm going to put colon int

4998
03:10:27,680 --> 03:10:29,760
and then after here

4999
03:10:29,760 --> 03:10:31,920
i'm going to put

5000
03:10:31,920 --> 03:10:33,600
actually before the colon here i'm going

5001
03:10:33,600 --> 03:10:36,000
to put a little arrow here

5002
03:10:36,000 --> 03:10:38,800
and then i'm going to put in int so now

5003
03:10:38,800 --> 03:10:41,520
we're specifying that this function

5004
03:10:41,520 --> 03:10:44,160
receives an int and then it's also going

5005
03:10:44,160 --> 03:10:45,040
to

5006
03:10:45,040 --> 03:10:46,960
return an end

5007
03:10:46,960 --> 03:10:49,040
and you can do the same thing with

5008
03:10:49,040 --> 03:10:52,160
variables so if we have a variable if i

5009
03:10:52,160 --> 03:10:54,319
had a variable called count and was

5010
03:10:54,319 --> 03:10:57,840
equal to zero i can add an annotation to

5011
03:10:57,840 --> 03:11:01,520
make it be an int like that so now

5012
03:11:01,520 --> 03:11:03,760
we're specifying that this variable is

5013
03:11:03,760 --> 03:11:06,000
going to be an integer

5014
03:11:06,000 --> 03:11:07,680
python will actually ignore these

5015
03:11:07,680 --> 03:11:10,399
annotations a separate tool called mypi

5016
03:11:10,399 --> 03:11:13,120
can be run standalone or integrated by

5017
03:11:13,120 --> 03:11:15,760
ides to automatically check for type

5018
03:11:15,760 --> 03:11:18,239
errors statically while you're coding

5019
03:11:18,239 --> 03:11:20,160
it'll also help you catch tight

5020
03:11:20,160 --> 03:11:22,319
mismatched bugs before even running the

5021
03:11:22,319 --> 03:11:23,279
code

5022
03:11:23,279 --> 03:11:25,120
a great help especially when your

5023
03:11:25,120 --> 03:11:26,560
software becomes large and you need to

5024
03:11:26,560 --> 03:11:28,800
refactor your code

5025
03:11:28,800 --> 03:11:31,780
okay now we'll talk about exceptions

5026
03:11:31,780 --> 03:11:34,720
[Music]

5027
03:11:34,720 --> 03:11:36,720
it's important to have a way to handle

5028
03:11:36,720 --> 03:11:39,439
errors and python gives us exception

5029
03:11:39,439 --> 03:11:41,920
handling to do so so for exception

5030
03:11:41,920 --> 03:11:44,720
handling you would wrap lines of code in

5031
03:11:44,720 --> 03:11:47,200
a try block

5032
03:11:47,200 --> 03:11:48,960
and then inside this block you'll put

5033
03:11:48,960 --> 03:11:51,920
the lines of code and then if an error

5034
03:11:51,920 --> 03:11:53,680
occurs

5035
03:11:53,680 --> 03:11:55,279
python will alert you and you can

5036
03:11:55,279 --> 03:11:57,760
determine which kind of error occurred

5037
03:11:57,760 --> 03:12:00,640
using an accept block so

5038
03:12:00,640 --> 03:12:02,479
we're we're trying some lines of code

5039
03:12:02,479 --> 03:12:04,640
here and then we're checking for a

5040
03:12:04,640 --> 03:12:07,359
specific error and then if that error

5041
03:12:07,359 --> 03:12:09,760
happens we would handle that error but

5042
03:12:09,760 --> 03:12:11,760
if a different error happens then we

5043
03:12:11,760 --> 03:12:15,279
will handle the different error you can

5044
03:12:15,279 --> 03:12:17,120
also catch

5045
03:12:17,120 --> 03:12:18,560
all exceptions

5046
03:12:18,560 --> 03:12:21,040
using an accept without an error type so

5047
03:12:21,040 --> 03:12:24,720
at the very end you could just do accept

5048
03:12:24,720 --> 03:12:26,560
and then if you don't have an error type

5049
03:12:26,560 --> 03:12:28,640
then it's going to handle the rest of

5050
03:12:28,640 --> 03:12:31,200
the exceptions and just to make this

5051
03:12:31,200 --> 03:12:33,520
clear this is just an example where it

5052
03:12:33,520 --> 03:12:36,080
says air one you have to put a specific

5053
03:12:36,080 --> 03:12:39,439
error in that spot

5054
03:12:39,439 --> 03:12:41,680
you can also put an else block at the

5055
03:12:41,680 --> 03:12:44,399
end to handle that that will run if the

5056
03:12:44,399 --> 03:12:46,720
no exceptions are found so if there are

5057
03:12:46,720 --> 03:12:48,640
no errors in this code that's right up

5058
03:12:48,640 --> 03:12:51,200
here we can have an else and then run

5059
03:12:51,200 --> 03:12:54,080
specific code at the bottom that that

5060
03:12:54,080 --> 03:12:56,080
runs if there's no errors

5061
03:12:56,080 --> 03:12:59,520
and then we can have a finally block so

5062
03:12:59,520 --> 03:13:00,399
anything

5063
03:13:00,399 --> 03:13:03,359
in a finally block is going to just

5064
03:13:03,359 --> 03:13:05,600
always run at the end whether or not

5065
03:13:05,600 --> 03:13:08,319
there are exceptions or no exceptions

5066
03:13:08,319 --> 03:13:11,040
the code in the final block is always

5067
03:13:11,040 --> 03:13:13,520
going to run the specific error that's

5068
03:13:13,520 --> 03:13:15,520
going to occur depends on the operation

5069
03:13:15,520 --> 03:13:17,600
you're performing for example if you're

5070
03:13:17,600 --> 03:13:20,800
reading a file you might get an eof

5071
03:13:20,800 --> 03:13:23,279
error would just look like this eof

5072
03:13:23,279 --> 03:13:26,560
error which means end of file

5073
03:13:26,560 --> 03:13:28,640
if you divide a number by zero you'll

5074
03:13:28,640 --> 03:13:30,800
get a zero division error if you have a

5075
03:13:30,800 --> 03:13:32,640
type conversion issue you might get a

5076
03:13:32,640 --> 03:13:34,640
type error so

5077
03:13:34,640 --> 03:13:36,479
let's try this code

5078
03:13:36,479 --> 03:13:38,560
so i'm going to just delete all this and

5079
03:13:38,560 --> 03:13:40,720
we'll do result

5080
03:13:40,720 --> 03:13:43,840
equals 2 divided by

5081
03:13:43,840 --> 03:13:45,120
0 which

5082
03:13:45,120 --> 03:13:47,200
you cannot do

5083
03:13:47,200 --> 03:13:49,760
so just print the result

5084
03:13:49,760 --> 03:13:52,239
and if i run that

5085
03:13:52,239 --> 03:13:55,680
we'll see this error over here

5086
03:13:55,680 --> 03:13:59,120
zero division error division by zero so

5087
03:13:59,120 --> 03:14:00,880
it's going to get an error when we run

5088
03:14:00,880 --> 03:14:02,960
the code and then whenever there's an

5089
03:14:02,960 --> 03:14:05,920
error anything after the error occurs

5090
03:14:05,920 --> 03:14:07,439
will not happen so we're not going to

5091
03:14:07,439 --> 03:14:09,200
print the result because there is

5092
03:14:09,200 --> 03:14:10,560
because the this

5093
03:14:10,560 --> 03:14:12,479
this line resulted in error so we're not

5094
03:14:12,479 --> 03:14:15,200
going to run the following line of code

5095
03:14:15,200 --> 03:14:17,439
so now let's try adding that operation

5096
03:14:17,439 --> 03:14:18,399
in a

5097
03:14:18,399 --> 03:14:19,760
try block

5098
03:14:19,760 --> 03:14:21,840
so i'm just going to paste it all in

5099
03:14:21,840 --> 03:14:24,479
here and so we're putting the operation

5100
03:14:24,479 --> 03:14:27,760
in a try block and then we're expecting

5101
03:14:27,760 --> 03:14:29,840
a zero division error

5102
03:14:29,840 --> 03:14:32,720
where we'll print cannot divide by zero

5103
03:14:32,720 --> 03:14:36,080
finally we will set the result to one

5104
03:14:36,080 --> 03:14:38,319
and then print the results so let me

5105
03:14:38,319 --> 03:14:40,720
just run that code see cannot divide by

5106
03:14:40,720 --> 03:14:43,920
zero and then we print one we because we

5107
03:14:43,920 --> 03:14:46,000
set it in the final block here

5108
03:14:46,000 --> 03:14:48,319
so this try block lets us recover

5109
03:14:48,319 --> 03:14:50,880
gracefully and move on with the program

5110
03:14:50,880 --> 03:14:52,720
you can raise exceptions in your own

5111
03:14:52,720 --> 03:14:55,840
code too using the raise statement so i

5112
03:14:55,840 --> 03:14:58,319
could type in raise

5113
03:14:58,319 --> 03:15:00,800
and then we can raise an exception

5114
03:15:00,800 --> 03:15:03,359
intentionally

5115
03:15:03,359 --> 03:15:05,680
and error

5116
03:15:05,680 --> 03:15:08,239
so if i just run this

5117
03:15:08,239 --> 03:15:09,359
it will say

5118
03:15:09,359 --> 03:15:11,359
an error because that's what we typed in

5119
03:15:11,359 --> 03:15:12,880
so you can make it say anything you want

5120
03:15:12,880 --> 03:15:14,560
for your error

5121
03:15:14,560 --> 03:15:17,680
and this raises a general exception and

5122
03:15:17,680 --> 03:15:21,040
you can and you can intercept it

5123
03:15:21,040 --> 03:15:22,960
just like this so i could say

5124
03:15:22,960 --> 03:15:24,560
try

5125
03:15:24,560 --> 03:15:28,399
and then we raise that exception

5126
03:15:28,399 --> 03:15:31,520
and then we can do accept

5127
03:15:31,520 --> 03:15:32,880
exception

5128
03:15:32,880 --> 03:15:35,680
as error

5129
03:15:35,680 --> 03:15:38,160
and then we can print

5130
03:15:38,160 --> 03:15:40,800
the error

5131
03:15:41,279 --> 03:15:42,800
okay if i run that

5132
03:15:42,800 --> 03:15:45,439
so now instead of we don't see all that

5133
03:15:45,439 --> 03:15:47,439
red anymore because it's not stopping

5134
03:15:47,439 --> 03:15:49,279
our program because of the error but

5135
03:15:49,279 --> 03:15:51,840
it's now printing the error message

5136
03:15:51,840 --> 03:15:52,960
right here

5137
03:15:52,960 --> 03:15:54,560
just like that

5138
03:15:54,560 --> 03:15:57,439
you can also define your own exception

5139
03:15:57,439 --> 03:16:01,200
class extending from exception so i

5140
03:16:01,200 --> 03:16:03,439
could do class

5141
03:16:03,439 --> 03:16:05,200
dog not

5142
03:16:05,200 --> 03:16:06,300
found

5143
03:16:06,300 --> 03:16:07,800
[Music]

5144
03:16:07,800 --> 03:16:09,680
exception

5145
03:16:09,680 --> 03:16:11,359
and then i will

5146
03:16:11,359 --> 03:16:13,640
extend from exception

5147
03:16:13,640 --> 03:16:16,399
[Music]

5148
03:16:16,399 --> 03:16:18,720
and then i can just put

5149
03:16:18,720 --> 03:16:21,200
pass for this one here let me adjust

5150
03:16:21,200 --> 03:16:23,120
that

5151
03:16:23,120 --> 03:16:23,920
so

5152
03:16:23,920 --> 03:16:26,880
pass here just means nothing and we must

5153
03:16:26,880 --> 03:16:28,640
use it when we define a class without

5154
03:16:28,640 --> 03:16:31,600
methods or a function without code so if

5155
03:16:31,600 --> 03:16:33,439
you're not going to put anything so this

5156
03:16:33,439 --> 03:16:35,359
is just an example so i can just put

5157
03:16:35,359 --> 03:16:37,040
pass to mean that we're not going to

5158
03:16:37,040 --> 03:16:39,520
have any code in this

5159
03:16:39,520 --> 03:16:42,800
so now we can try it out so i'll just

5160
03:16:42,800 --> 03:16:44,640
paste that uh so we're going to raise

5161
03:16:44,640 --> 03:16:47,359
dog not found exception and then if

5162
03:16:47,359 --> 03:16:49,200
we're we're going to

5163
03:16:49,200 --> 03:16:51,520
candle this exception and just print dog

5164
03:16:51,520 --> 03:16:54,239
not found so let's try that yep dog nut

5165
03:16:54,239 --> 03:16:56,880
bound because it raised this exception

5166
03:16:56,880 --> 03:17:00,000
here we can also actually do something

5167
03:17:00,000 --> 03:17:01,760
in the exception

5168
03:17:01,760 --> 03:17:03,359
so if i can say print

5169
03:17:03,359 --> 03:17:04,640
inside

5170
03:17:04,640 --> 03:17:06,720
and then i'm going to run that

5171
03:17:06,720 --> 03:17:09,680
and i'll do inside and dog not bound the

5172
03:17:09,680 --> 03:17:11,840
with statement is very helpful to

5173
03:17:11,840 --> 03:17:14,479
simplify working with exception handling

5174
03:17:14,479 --> 03:17:16,800
for example when working with files each

5175
03:17:16,800 --> 03:17:18,720
time we open a file we must remember to

5176
03:17:18,720 --> 03:17:21,359
close it with makes the process more

5177
03:17:21,359 --> 03:17:23,520
transparent so let me show you some

5178
03:17:23,520 --> 03:17:27,040
example code without the with statement

5179
03:17:27,040 --> 03:17:27,920
so

5180
03:17:27,920 --> 03:17:29,359
we're not going to go into a lot of

5181
03:17:29,359 --> 03:17:31,920
details about working with files here

5182
03:17:31,920 --> 03:17:33,680
but i just want to kind of just give

5183
03:17:33,680 --> 03:17:36,560
this one quick example so if we're going

5184
03:17:36,560 --> 03:17:39,520
to be working with files in python so we

5185
03:17:39,520 --> 03:17:42,479
can open the file and then we can read

5186
03:17:42,479 --> 03:17:44,319
the file we can print the content from

5187
03:17:44,319 --> 03:17:45,439
the file

5188
03:17:45,439 --> 03:17:46,800
and we

5189
03:17:46,800 --> 03:17:48,319
we're going to try that because there

5190
03:17:48,319 --> 03:17:50,399
could be an exception and then finally

5191
03:17:50,399 --> 03:17:52,640
we're always going to make sure to close

5192
03:17:52,640 --> 03:17:53,760
the file

5193
03:17:53,760 --> 03:17:54,399
but

5194
03:17:54,399 --> 03:17:56,479
an alternate way to do it would be like

5195
03:17:56,479 --> 03:17:57,760
this

5196
03:17:57,760 --> 03:17:59,439
um so with

5197
03:17:59,439 --> 03:18:01,920
we're going to open the file as file and

5198
03:18:01,920 --> 03:18:04,720
then content file.read and then print

5199
03:18:04,720 --> 03:18:07,200
the content and with using with it's

5200
03:18:07,200 --> 03:18:09,279
going to make sure to automatically

5201
03:18:09,279 --> 03:18:12,080
close the file at the end in other words

5202
03:18:12,080 --> 03:18:14,800
we have built-in implicit exception

5203
03:18:14,800 --> 03:18:17,040
handling as close will be called

5204
03:18:17,040 --> 03:18:18,640
automatically for us

5205
03:18:18,640 --> 03:18:21,680
and with can do a lot more stuff as well

5206
03:18:21,680 --> 03:18:23,439
this example is just meant to introduce

5207
03:18:23,439 --> 03:18:25,520
its capabilities

5208
03:18:25,520 --> 03:18:27,439
now let's talk about third-party

5209
03:18:27,439 --> 03:18:28,880
packages

5210
03:18:28,880 --> 03:18:31,600
and we're going to talk about pip so

5211
03:18:31,600 --> 03:18:33,279
let's learn how to install third-party

5212
03:18:33,279 --> 03:18:36,479
packages in python using pip the python

5213
03:18:36,479 --> 03:18:38,479
standard library contains a huge number

5214
03:18:38,479 --> 03:18:40,479
of utilities that simplify our python

5215
03:18:40,479 --> 03:18:42,479
development needs but nothing can

5216
03:18:42,479 --> 03:18:44,160
satisfy everything

5217
03:18:44,160 --> 03:18:45,920
that's why individuals and companies

5218
03:18:45,920 --> 03:18:48,080
create packages and make them available

5219
03:18:48,080 --> 03:18:49,840
as open source software for the entire

5220
03:18:49,840 --> 03:18:52,239
community so the modules are all

5221
03:18:52,239 --> 03:18:55,040
collected in a single place called the

5222
03:18:55,040 --> 03:18:58,160
python package index which is available

5223
03:18:58,160 --> 03:19:01,680
available at pipe.org that's

5224
03:19:01,680 --> 03:19:02,399
pi

5225
03:19:02,399 --> 03:19:04,960
pi.org

5226
03:19:04,960 --> 03:19:07,439
and they can be installed on the system

5227
03:19:07,439 --> 03:19:08,560
using

5228
03:19:08,560 --> 03:19:12,000
pip there's over 270 000 packages freely

5229
03:19:12,000 --> 03:19:13,200
available

5230
03:19:13,200 --> 03:19:15,120
most computers are already going to have

5231
03:19:15,120 --> 03:19:17,920
pip installed and it already has pip

5232
03:19:17,920 --> 03:19:19,680
installed so let me show you how you

5233
03:19:19,680 --> 03:19:22,399
would install a package we'd have to go

5234
03:19:22,399 --> 03:19:25,200
over to the shell here if you're not on

5235
03:19:25,200 --> 03:19:27,680
replit you can just do in your terminal

5236
03:19:27,680 --> 03:19:30,479
and i'm going to clear this here

5237
03:19:30,479 --> 03:19:33,120
and i'm just going to do pip

5238
03:19:33,120 --> 03:19:36,160
install and then you can put the name of

5239
03:19:36,160 --> 03:19:38,960
a package for instance one popular

5240
03:19:38,960 --> 03:19:41,279
package is called the request package

5241
03:19:41,279 --> 03:19:43,520
it's an http library so i can do

5242
03:19:43,520 --> 03:19:45,439
requests

5243
03:19:45,439 --> 03:19:46,800
and let me just

5244
03:19:46,800 --> 03:19:48,479
so you can see i have to make sure i

5245
03:19:48,479 --> 03:19:49,480
spelled that right

5246
03:19:49,480 --> 03:19:52,160
[Music]

5247
03:19:52,160 --> 03:19:55,120
and it's going to install that package

5248
03:19:55,120 --> 03:19:57,439
right now so once the we install this

5249
03:19:57,439 --> 03:19:59,359
package it's going to be available for

5250
03:19:59,359 --> 03:20:02,239
all our python scripts because packages

5251
03:20:02,239 --> 03:20:04,800
are installed globally and the exact

5252
03:20:04,800 --> 03:20:09,040
location depends on the operating system

5253
03:20:09,040 --> 03:20:11,760
you can also upgrade a package to its

5254
03:20:11,760 --> 03:20:15,920
latest version by doing pip install

5255
03:20:15,920 --> 03:20:18,399
dash u and then i will just put the

5256
03:20:18,399 --> 03:20:19,920
package name so in this case we'll just

5257
03:20:19,920 --> 03:20:22,960
do request again

5258
03:20:23,680 --> 03:20:26,479
and then it's going to just update it to

5259
03:20:26,479 --> 03:20:27,279
its

5260
03:20:27,279 --> 03:20:28,960
latest version

5261
03:20:28,960 --> 03:20:30,160
in this case

5262
03:20:30,160 --> 03:20:32,200
it updated from

5263
03:20:32,200 --> 03:20:36,640
2.28.0 to 2.28.1

5264
03:20:36,640 --> 03:20:40,560
you can also specify a specific

5265
03:20:40,560 --> 03:20:43,200
version when you're installing

5266
03:20:43,200 --> 03:20:45,040
and then you can also uninstall a

5267
03:20:45,040 --> 03:20:48,000
package so i'll do pip

5268
03:20:48,000 --> 03:20:49,920
uninstall

5269
03:20:49,920 --> 03:20:52,640
requests

5270
03:20:55,120 --> 03:20:57,200
and then i can say that yes i do want to

5271
03:20:57,200 --> 03:20:58,560
uninstall that

5272
03:20:58,560 --> 03:21:00,800
and then once when you have a package

5273
03:21:00,800 --> 03:21:02,160
installed

5274
03:21:02,160 --> 03:21:06,160
i'm just going to install request again

5275
03:21:06,479 --> 03:21:07,680
and then you always have to make sure

5276
03:21:07,680 --> 03:21:11,359
you spell it right

5277
03:21:11,359 --> 03:21:12,960
so once you have it installed you can do

5278
03:21:12,960 --> 03:21:14,479
pip show

5279
03:21:14,479 --> 03:21:16,239
requests

5280
03:21:16,239 --> 03:21:17,439
and then it's going to show some

5281
03:21:17,439 --> 03:21:20,399
information about the package

5282
03:21:20,399 --> 03:21:23,359
so see we can see the name the version

5283
03:21:23,359 --> 03:21:25,680
uh the summary and then a bunch of the

5284
03:21:25,680 --> 03:21:27,920
author and a bunch of other information

5285
03:21:27,920 --> 03:21:30,399
about the package

5286
03:21:30,399 --> 03:21:32,399
okay i'll just clear this

5287
03:21:32,399 --> 03:21:34,000
now we're actually gonna backtrack a

5288
03:21:34,000 --> 03:21:35,840
little bit we already talked about lists

5289
03:21:35,840 --> 03:21:38,319
but i'm gonna talk about a more advanced

5290
03:21:38,319 --> 03:21:40,560
way of using lists called

5291
03:21:40,560 --> 03:21:41,439
list

5292
03:21:41,439 --> 03:21:43,279
compression

5293
03:21:43,279 --> 03:21:46,000
list compressions so list compressions

5294
03:21:46,000 --> 03:21:48,720
are a way to create lists in a very

5295
03:21:48,720 --> 03:21:51,600
concise way so suppose you have this

5296
03:21:51,600 --> 03:21:54,000
list like this it's a list of numbers

5297
03:21:54,000 --> 03:21:55,279
and we'll just do

5298
03:21:55,279 --> 03:21:56,239
one

5299
03:21:56,239 --> 03:21:57,600
two three

5300
03:21:57,600 --> 03:21:59,200
four five

5301
03:21:59,200 --> 03:22:01,359
so we can create a new list using a list

5302
03:22:01,359 --> 03:22:02,640
compression

5303
03:22:02,640 --> 03:22:06,239
composed by the numbers list elements to

5304
03:22:06,239 --> 03:22:08,319
the power of 2.

5305
03:22:08,319 --> 03:22:10,399
let me show you what i mean so let's get

5306
03:22:10,399 --> 03:22:13,200
make a new list numbers

5307
03:22:13,200 --> 03:22:14,470
power

5308
03:22:14,470 --> 03:22:16,239
[Music]

5309
03:22:16,239 --> 03:22:17,439
2

5310
03:22:17,439 --> 03:22:18,720
equals

5311
03:22:18,720 --> 03:22:20,239
and let me just show you how you do this

5312
03:22:20,239 --> 03:22:23,040
list compression

5313
03:22:23,200 --> 03:22:26,960
so this is the list compression syntax

5314
03:22:26,960 --> 03:22:30,110
and if i print this

5315
03:22:30,110 --> 03:22:31,680
[Music]

5316
03:22:31,680 --> 03:22:33,040
we can see that now we have every

5317
03:22:33,040 --> 03:22:35,760
element in the list to the power of two

5318
03:22:35,760 --> 03:22:38,239
list compressions are a syntax that's

5319
03:22:38,239 --> 03:22:40,560
sometimes preferred over loops as it's

5320
03:22:40,560 --> 03:22:42,800
more readable when the operation can be

5321
03:22:42,800 --> 03:22:44,640
written on a single line

5322
03:22:44,640 --> 03:22:46,160
so for instance this is how you would do

5323
03:22:46,160 --> 03:22:49,600
it uh with a loop so what we do in a

5324
03:22:49,600 --> 03:22:52,160
single line up here we take a few lines

5325
03:22:52,160 --> 03:22:53,040
to do

5326
03:22:53,040 --> 03:22:55,120
in the method with a loop so list

5327
03:22:55,120 --> 03:22:57,040
compression just makes it

5328
03:22:57,040 --> 03:22:58,160
simpler

5329
03:22:58,160 --> 03:23:00,080
and then you can do the same thing with

5330
03:23:00,080 --> 03:23:01,760
map as well

5331
03:23:01,760 --> 03:23:03,760
but again it's just a little more

5332
03:23:03,760 --> 03:23:06,000
complex sometimes it's just simpler to

5333
03:23:06,000 --> 03:23:08,319
use a list compression using the syntax

5334
03:23:08,319 --> 03:23:09,279
here

5335
03:23:09,279 --> 03:23:11,439
now let's talk about a few more advanced

5336
03:23:11,439 --> 03:23:13,840
topics in regards to functions

5337
03:23:13,840 --> 03:23:15,600
polymorphism

5338
03:23:15,600 --> 03:23:18,080
polymorphism generalizes a functionality

5339
03:23:18,080 --> 03:23:20,880
so it can work on different types

5340
03:23:20,880 --> 03:23:22,399
it's an important concept in object

5341
03:23:22,399 --> 03:23:25,840
oriented programming so see in here

5342
03:23:25,840 --> 03:23:28,160
we've defined the same method on

5343
03:23:28,160 --> 03:23:31,439
different classes so the dog has eat and

5344
03:23:31,439 --> 03:23:34,239
the cat also has an eat method

5345
03:23:34,239 --> 03:23:35,920
then we can generate objects and we can

5346
03:23:35,920 --> 03:23:38,080
call the eat method regardless of the

5347
03:23:38,080 --> 03:23:40,560
class the object belongs to and will get

5348
03:23:40,560 --> 03:23:43,120
different results so we create the two

5349
03:23:43,120 --> 03:23:45,439
objects the dog and the cat here

5350
03:23:45,439 --> 03:23:48,160
and we're calling the eat method on both

5351
03:23:48,160 --> 03:23:50,960
objects and if we run this you can see

5352
03:23:50,960 --> 03:23:53,439
what we're getting eating cat dog food

5353
03:23:53,439 --> 03:23:56,560
eating cat food and so you could do a

5354
03:23:56,560 --> 03:23:58,160
lot of things with this like maybe you

5355
03:23:58,160 --> 03:24:01,200
have a list of different animals and

5356
03:24:01,200 --> 03:24:02,640
then you can

5357
03:24:02,640 --> 03:24:04,640
loop through that list and call the eat

5358
03:24:04,640 --> 03:24:06,720
function or the eat method on each

5359
03:24:06,720 --> 03:24:08,880
animal in that list and they don't have

5360
03:24:08,880 --> 03:24:11,359
to be the exact same class to be able to

5361
03:24:11,359 --> 03:24:13,279
still run the eat method

5362
03:24:13,279 --> 03:24:16,399
so we build a generalized interface and

5363
03:24:16,399 --> 03:24:18,160
now we do not need to know that an

5364
03:24:18,160 --> 03:24:20,560
animal is a cat or dog we just need to

5365
03:24:20,560 --> 03:24:23,200
know that we can call eat on it

5366
03:24:23,200 --> 03:24:24,880
now let's talk about

5367
03:24:24,880 --> 03:24:26,640
operator

5368
03:24:26,640 --> 03:24:27,720
overloading

5369
03:24:27,720 --> 03:24:29,359
[Music]

5370
03:24:29,359 --> 03:24:31,200
operator overloading is an advanced

5371
03:24:31,200 --> 03:24:33,359
technique we can use to make classes

5372
03:24:33,359 --> 03:24:35,520
comparable and to make them work with

5373
03:24:35,520 --> 03:24:38,319
python operators so let's take this

5374
03:24:38,319 --> 03:24:41,120
class dog so here's a dog class and you

5375
03:24:41,120 --> 03:24:44,319
can create a dog with a name and age

5376
03:24:44,319 --> 03:24:47,600
then we'll create two dog objects we'll

5377
03:24:47,600 --> 03:24:50,239
do roger equals dog

5378
03:24:50,239 --> 03:24:54,120
and we can pass the name

5379
03:24:54,239 --> 03:24:56,060
and eight

5380
03:24:56,060 --> 03:24:59,680
[Music]

5381
03:24:59,680 --> 03:25:03,279
and then i'll make another one

5382
03:25:04,640 --> 03:25:08,080
we can use operator overloading to add a

5383
03:25:08,080 --> 03:25:11,520
custom way to compare these two objects

5384
03:25:11,520 --> 03:25:13,920
based on the age property

5385
03:25:13,920 --> 03:25:16,319
so like how could you compare

5386
03:25:16,319 --> 03:25:19,279
this dog and this dog well we can make

5387
03:25:19,279 --> 03:25:22,640
it possible with operator overloading so

5388
03:25:22,640 --> 03:25:24,880
let me just show you this example here

5389
03:25:24,880 --> 03:25:25,680
so

5390
03:25:25,680 --> 03:25:26,640
this

5391
03:25:26,640 --> 03:25:28,640
function here gt

5392
03:25:28,640 --> 03:25:31,680
is going to compare things as to figure

5393
03:25:31,680 --> 03:25:33,680
out what what is greater than you can

5394
03:25:33,680 --> 03:25:35,439
now we'll be able to compare

5395
03:25:35,439 --> 03:25:37,600
two dog objects to see which one is

5396
03:25:37,600 --> 03:25:39,760
greater than the other and this is how

5397
03:25:39,760 --> 03:25:41,600
we're going to figure out which is

5398
03:25:41,600 --> 03:25:45,279
greater than return true if self.age is

5399
03:25:45,279 --> 03:25:46,399
greater than

5400
03:25:46,399 --> 03:25:48,800
other dot age which is the other one

5401
03:25:48,800 --> 03:25:52,080
you're comparing it to else false

5402
03:25:52,080 --> 03:25:53,840
now we can

5403
03:25:53,840 --> 03:25:56,560
do print

5404
03:25:56,640 --> 03:25:58,000
roger

5405
03:25:58,000 --> 03:26:01,120
is greater than sid so we're trying to

5406
03:26:01,120 --> 03:26:02,800
figure out this is true or false if i

5407
03:26:02,800 --> 03:26:06,160
run this it's going to say true roger is

5408
03:26:06,160 --> 03:26:09,040
greater than sid because 8 is bigger

5409
03:26:09,040 --> 03:26:12,399
than 7. but if we like put 9 here run

5410
03:26:12,399 --> 03:26:13,760
that

5411
03:26:13,760 --> 03:26:15,760
now it's going to be false

5412
03:26:15,760 --> 03:26:18,239
so in the same way we define this

5413
03:26:18,239 --> 03:26:20,479
underscore underscore gt underscore

5414
03:26:20,479 --> 03:26:22,800
which means greater than we can also

5415
03:26:22,800 --> 03:26:25,359
define methods for like less than

5416
03:26:25,359 --> 03:26:27,840
lower or equal to greater equal to or

5417
03:26:27,840 --> 03:26:29,120
not equal

5418
03:26:29,120 --> 03:26:32,239
and then you can also create methods to

5419
03:26:32,239 --> 03:26:35,040
go with different arithmetic operators

5420
03:26:35,040 --> 03:26:36,080
so

5421
03:26:36,080 --> 03:26:38,880
we can do add subtract multiply

5422
03:26:38,880 --> 03:26:41,200
division floor division mod power so you

5423
03:26:41,200 --> 03:26:43,040
can see all these different ones you can

5424
03:26:43,040 --> 03:26:44,720
make it respond to the different

5425
03:26:44,720 --> 03:26:47,279
operators so the example was just a

5426
03:26:47,279 --> 03:26:49,920
greater than operator but we can

5427
03:26:49,920 --> 03:26:51,840
make functions to show how it's going to

5428
03:26:51,840 --> 03:26:53,760
respond to all these different

5429
03:26:53,760 --> 03:26:55,600
operators there's even a few more

5430
03:26:55,600 --> 03:26:57,600
methods to work with other operators but

5431
03:26:57,600 --> 03:26:59,439
you get the idea we've learned a lot

5432
03:26:59,439 --> 03:27:01,680
about python and now we're going to

5433
03:27:01,680 --> 03:27:03,279
bring a lot of what we've learned

5434
03:27:03,279 --> 03:27:06,399
together to code a blackjack card game

5435
03:27:06,399 --> 03:27:08,000
and in the process we'll learn about

5436
03:27:08,000 --> 03:27:10,560
object oriented programming in python so

5437
03:27:10,560 --> 03:27:13,040
we'll start by creating a new python

5438
03:27:13,040 --> 03:27:16,640
project on replit

5439
03:27:17,040 --> 03:27:18,720
and i'm just going to close this tab

5440
03:27:18,720 --> 03:27:19,840
here

5441
03:27:19,840 --> 03:27:23,200
and i'll zoom in just a bit

5442
03:27:23,200 --> 03:27:26,000
and just like our first project

5443
03:27:26,000 --> 03:27:27,359
i'm going to

5444
03:27:27,359 --> 03:27:30,000
say what i'm about to do and i want you

5445
03:27:30,000 --> 03:27:32,800
to see if you can do it on your own

5446
03:27:32,800 --> 03:27:35,680
before i show you how to do it

5447
03:27:35,680 --> 03:27:38,479
and with all you've learned so far a lot

5448
03:27:38,479 --> 03:27:40,000
of this you're probably going to be able

5449
03:27:40,000 --> 03:27:42,720
to figure out on your own as i give you

5450
03:27:42,720 --> 03:27:45,200
the instructions without even seeing how

5451
03:27:45,200 --> 03:27:47,520
i how i do it but then you can come back

5452
03:27:47,520 --> 03:27:50,399
to the video and see how i do it

5453
03:27:50,399 --> 03:27:52,080
or i guess you can just watch and not

5454
03:27:52,080 --> 03:27:53,760
even try to do it yourself but you're

5455
03:27:53,760 --> 03:27:55,760
going to learn a lot more if you try to

5456
03:27:55,760 --> 03:27:58,880
code this by yourself along with me as i

5457
03:27:58,880 --> 03:28:01,200
do it but right before i do the

5458
03:28:01,200 --> 03:28:02,479
different steps

5459
03:28:02,479 --> 03:28:04,319
so the first thing we're going to do is

5460
03:28:04,319 --> 03:28:05,520
create a

5461
03:28:05,520 --> 03:28:07,600
variable called a suit

5462
03:28:07,600 --> 03:28:10,239
and set it equal to hearts and then a

5463
03:28:10,239 --> 03:28:14,000
variable called rank and set it to equal

5464
03:28:14,000 --> 03:28:15,840
k for king

5465
03:28:15,840 --> 03:28:18,640
and then a variable called value and set

5466
03:28:18,640 --> 03:28:20,000
to equal

5467
03:28:20,000 --> 03:28:21,040
10.

5468
03:28:21,040 --> 03:28:22,560
[Music]

5469
03:28:22,560 --> 03:28:24,080
okay simple two variables equal to

5470
03:28:24,080 --> 03:28:28,160
strings and one variable equal to an int

5471
03:28:28,160 --> 03:28:30,800
so now we are going to add a print

5472
03:28:30,800 --> 03:28:34,080
statement and print the the phrase your

5473
03:28:34,080 --> 03:28:38,560
card is with a colon at the end

5474
03:28:38,560 --> 03:28:39,600
and then we'll add another print

5475
03:28:39,600 --> 03:28:42,720
statement and print the rank

5476
03:28:42,720 --> 03:28:45,040
so now we're just printing the variable

5477
03:28:45,040 --> 03:28:46,239
here

5478
03:28:46,239 --> 03:28:48,080
and we're going to be doing a lot of

5479
03:28:48,080 --> 03:28:50,720
refactoring as we create this program

5480
03:28:50,720 --> 03:28:53,120
let's refactor this so it's just one

5481
03:28:53,120 --> 03:28:54,960
print statement that's going to print

5482
03:28:54,960 --> 03:28:57,760
your card is colon space and then the

5483
03:28:57,760 --> 03:29:00,080
rank

5484
03:29:00,960 --> 03:29:03,359
so we are going to be doing

5485
03:29:03,359 --> 03:29:05,210
string concatenation

5486
03:29:05,210 --> 03:29:07,040
[Music]

5487
03:29:07,040 --> 03:29:09,520
just like that

5488
03:29:09,520 --> 03:29:10,319
so

5489
03:29:10,319 --> 03:29:12,000
you can concatenate as many strings and

5490
03:29:12,000 --> 03:29:14,160
variables as you want so let's update

5491
03:29:14,160 --> 03:29:16,239
the code so that the print function

5492
03:29:16,239 --> 03:29:18,640
print prints your card as

5493
03:29:18,640 --> 03:29:19,520
k

5494
03:29:19,520 --> 03:29:20,399
of

5495
03:29:20,399 --> 03:29:22,560
hearts

5496
03:29:22,560 --> 03:29:24,880
so we just need to add

5497
03:29:24,880 --> 03:29:26,640
of and we have to make sure we put

5498
03:29:26,640 --> 03:29:30,239
spaces on each side of the word of

5499
03:29:30,960 --> 03:29:31,920
and then

5500
03:29:31,920 --> 03:29:34,000
suit

5501
03:29:34,000 --> 03:29:35,279
and let me just

5502
03:29:35,279 --> 03:29:37,200
adjust this here okay as you know you

5503
03:29:37,200 --> 03:29:38,880
can use a list in python to store

5504
03:29:38,880 --> 03:29:41,279
multiple values or items at a time so

5505
03:29:41,279 --> 03:29:43,439
above the suit variable

5506
03:29:43,439 --> 03:29:45,120
create a suits

5507
03:29:45,120 --> 03:29:46,800
variable and assign it to a list of

5508
03:29:46,800 --> 03:29:50,239
suits in this case spades clubs hearts

5509
03:29:50,239 --> 03:29:52,800
diamonds

5510
03:29:53,359 --> 03:29:54,880
we learned about how you can use the

5511
03:29:54,880 --> 03:29:57,840
bracket operator to access a specific

5512
03:29:57,840 --> 03:30:00,239
element in a list the number inside the

5513
03:30:00,239 --> 03:30:02,479
bracket specifies the index of the list

5514
03:30:02,479 --> 03:30:04,800
to access remember the indexes start at

5515
03:30:04,800 --> 03:30:06,160
zero

5516
03:30:06,160 --> 03:30:08,960
so you update the suit variable so that

5517
03:30:08,960 --> 03:30:11,279
the value of hearts come from comes from

5518
03:30:11,279 --> 03:30:14,080
the suits list

5519
03:30:14,080 --> 03:30:17,840
now we'll practice a for loop so add a

5520
03:30:17,840 --> 03:30:19,760
for loop to the end of the code that

5521
03:30:19,760 --> 03:30:22,720
prints each suit

5522
03:30:22,720 --> 03:30:24,960
and then we'll just test this out

5523
03:30:24,960 --> 03:30:26,880
i really hope you actually are following

5524
03:30:26,880 --> 03:30:28,720
along and trying it out right before i

5525
03:30:28,720 --> 03:30:30,080
show it to you that's how you're going

5526
03:30:30,080 --> 03:30:32,319
to learn the best here so spades clubs

5527
03:30:32,319 --> 03:30:34,560
hearts diamonds

5528
03:30:34,560 --> 03:30:37,279
now this next thing is is just to see if

5529
03:30:37,279 --> 03:30:38,880
we can do it so it's not going to be

5530
03:30:38,880 --> 03:30:40,960
part of our final code but right before

5531
03:30:40,960 --> 03:30:42,960
the loop we just added see if you can

5532
03:30:42,960 --> 03:30:45,439
add another item to the suits list

5533
03:30:45,439 --> 03:30:49,600
that's the string snakes

5534
03:30:52,319 --> 03:30:53,680
there's a few different ways to do it

5535
03:30:53,680 --> 03:30:56,640
but we will use append snakes so this is

5536
03:30:56,640 --> 03:30:58,720
just going to append the word snakes at

5537
03:30:58,720 --> 03:30:59,680
the end

5538
03:30:59,680 --> 03:31:02,080
of the list so if i run this we can now

5539
03:31:02,080 --> 03:31:05,200
see snakes at the bottom

5540
03:31:05,200 --> 03:31:06,160
okay now we're going to start the

5541
03:31:06,160 --> 03:31:08,160
process of representing a full deck of

5542
03:31:08,160 --> 03:31:10,399
cards with python code

5543
03:31:10,399 --> 03:31:12,080
so we're going to actually get rid of a

5544
03:31:12,080 --> 03:31:13,200
lot of this we're going to get rid of

5545
03:31:13,200 --> 03:31:14,239
all this we're just going to have the

5546
03:31:14,239 --> 03:31:16,080
suits and then we're going to have this

5547
03:31:16,080 --> 03:31:18,479
for loop at the bottom we're going to do

5548
03:31:18,479 --> 03:31:20,800
a lot of refactoring as we go mainly for

5549
03:31:20,800 --> 03:31:23,200
educational purposes but also so we can

5550
03:31:23,200 --> 03:31:25,680
get the a really good blackjack game so

5551
03:31:25,680 --> 03:31:27,840
we have a list of suits after that we're

5552
03:31:27,840 --> 03:31:31,279
going to create a list of ranks that's a

5553
03:31:31,279 --> 03:31:34,319
2 3 4 5 6 7 8 9 10 j q

5554
03:31:34,319 --> 03:31:35,840
k

5555
03:31:35,840 --> 03:31:38,640
[Music]

5556
03:31:38,640 --> 03:31:40,800
now before the suits list

5557
03:31:40,800 --> 03:31:43,279
create a new variable called cards and

5558
03:31:43,279 --> 03:31:48,080
assign an empty list to the variable

5559
03:31:50,080 --> 03:31:52,399
you can an empty list is just two

5560
03:31:52,399 --> 03:31:55,040
brackets with nothing inside

5561
03:31:55,040 --> 03:31:57,040
now in the cards list there should be an

5562
03:31:57,040 --> 03:31:59,920
item for each card in the deck each item

5563
03:31:59,920 --> 03:32:01,600
in the suits list should be combined

5564
03:32:01,600 --> 03:32:03,600
with each item in the ranks list for a

5565
03:32:03,600 --> 03:32:07,120
total of 52 items or cards

5566
03:32:07,120 --> 03:32:09,840
let's work our way up to that so first

5567
03:32:09,840 --> 03:32:11,359
we'll update the print statement in the

5568
03:32:11,359 --> 03:32:14,160
for loop so that it prints a list with

5569
03:32:14,160 --> 03:32:16,399
two elements the first element should be

5570
03:32:16,399 --> 03:32:18,800
suit and the second should be the first

5571
03:32:18,800 --> 03:32:21,279
element of the ranks lists so this

5572
03:32:21,279 --> 03:32:22,399
should print

5573
03:32:22,399 --> 03:32:26,319
an ace in every suit

5574
03:32:27,040 --> 03:32:29,279
so i'm going to update this so it's

5575
03:32:29,279 --> 03:32:32,479
going to be a list with

5576
03:32:32,479 --> 03:32:33,840
suit

5577
03:32:33,840 --> 03:32:35,600
and ranks

5578
03:32:35,600 --> 03:32:38,560
the first item is going to be at index

5579
03:32:38,560 --> 03:32:42,399
zero now let's print that out

5580
03:32:42,640 --> 03:32:45,520
so we got them these four right here

5581
03:32:45,520 --> 03:32:47,680
now instead of just printing an ace in

5582
03:32:47,680 --> 03:32:50,239
every suit let's print every rank in

5583
03:32:50,239 --> 03:32:51,359
every suit

5584
03:32:51,359 --> 03:32:53,840
this can be done easily with a for loop

5585
03:32:53,840 --> 03:32:56,880
nested within another for loop so inside

5586
03:32:56,880 --> 03:32:59,120
the for loop add another for loop that

5587
03:32:59,120 --> 03:33:01,040
loops through the ranks

5588
03:33:01,040 --> 03:33:03,680
then update the print statement so that

5589
03:33:03,680 --> 03:33:07,040
it's not just printing the first element

5590
03:33:07,040 --> 03:33:09,840
in the ranks list but it's printing the

5591
03:33:09,840 --> 03:33:14,160
rank from the for other for loop

5592
03:33:14,160 --> 03:33:16,080
so let me show you what i mean

5593
03:33:16,080 --> 03:33:19,040
we're going to do four

5594
03:33:19,040 --> 03:33:22,560
for rank and ranks

5595
03:33:22,560 --> 03:33:24,239
and then

5596
03:33:24,239 --> 03:33:26,080
we have to make sure to indent this

5597
03:33:26,080 --> 03:33:28,560
print statement so it's inside this

5598
03:33:28,560 --> 03:33:29,920
other for loop

5599
03:33:29,920 --> 03:33:32,399
and this is now just going to be

5600
03:33:32,399 --> 03:33:34,560
rank so it's going to print the suit and

5601
03:33:34,560 --> 03:33:37,040
rank and i'll just run that

5602
03:33:37,040 --> 03:33:39,680
and now we with this nested for loop we

5603
03:33:39,680 --> 03:33:42,399
have every card at every rank in every

5604
03:33:42,399 --> 03:33:45,600
suit all 52 cards are printed as two

5605
03:33:45,600 --> 03:33:47,279
item lists

5606
03:33:47,279 --> 03:33:50,080
an element in a list can be another list

5607
03:33:50,080 --> 03:33:52,560
so instead of printing 52

5608
03:33:52,560 --> 03:33:54,239
two item lists

5609
03:33:54,239 --> 03:33:57,520
let's append those 52 cards to the cards

5610
03:33:57,520 --> 03:33:58,800
list

5611
03:33:58,800 --> 03:34:00,560
so we already have the cards list here

5612
03:34:00,560 --> 03:34:03,600
it's empty but i'm going to do

5613
03:34:03,600 --> 03:34:05,120
cards

5614
03:34:05,120 --> 03:34:06,080
dot

5615
03:34:06,080 --> 03:34:08,000
append

5616
03:34:08,000 --> 03:34:10,960
and so we're appending

5617
03:34:10,960 --> 03:34:12,399
this item

5618
03:34:12,399 --> 03:34:15,200
all these items to the cards list

5619
03:34:15,200 --> 03:34:17,279
so let's check what the cards list looks

5620
03:34:17,279 --> 03:34:19,760
like by printing out printing it out at

5621
03:34:19,760 --> 03:34:21,279
the bottom remember make sure this is

5622
03:34:21,279 --> 03:34:24,239
not indented at all and we'll do print

5623
03:34:24,239 --> 03:34:26,000
cards

5624
03:34:26,000 --> 03:34:29,720
and i'll run that

5625
03:34:34,239 --> 03:34:36,560
and then here it is here so this is the

5626
03:34:36,560 --> 03:34:38,000
list it's not

5627
03:34:38,000 --> 03:34:40,080
one there's just a comma between each

5628
03:34:40,080 --> 03:34:42,640
item in the list here

5629
03:34:42,640 --> 03:34:44,880
you may notice that all the cards are in

5630
03:34:44,880 --> 03:34:46,720
order in the cards lists

5631
03:34:46,720 --> 03:34:48,239
for a game like this though the cards

5632
03:34:48,239 --> 03:34:51,760
must be shuffled so to help with this

5633
03:34:51,760 --> 03:34:54,399
import the random module at the top of

5634
03:34:54,399 --> 03:34:58,560
your code so that's just we just do

5635
03:34:58,560 --> 03:35:00,000
import

5636
03:35:00,000 --> 03:35:01,120
random

5637
03:35:01,120 --> 03:35:03,279
[Music]

5638
03:35:03,279 --> 03:35:05,040
now we'll be able to use the the random

5639
03:35:05,040 --> 03:35:06,960
module so this is going to import the

5640
03:35:06,960 --> 03:35:08,640
random module which contains a variety

5641
03:35:08,640 --> 03:35:10,160
of things related to random number

5642
03:35:10,160 --> 03:35:11,279
generation

5643
03:35:11,279 --> 03:35:12,720
and as you probably remember when you

5644
03:35:12,720 --> 03:35:14,800
import a python module it allows you to

5645
03:35:14,800 --> 03:35:17,200
use additional commands in your code

5646
03:35:17,200 --> 03:35:19,239
specifically we're going to be using the

5647
03:35:19,239 --> 03:35:21,439
random.shuffle function

5648
03:35:21,439 --> 03:35:23,520
so right before at the end where it says

5649
03:35:23,520 --> 03:35:24,960
print cards we're going to call

5650
03:35:24,960 --> 03:35:28,560
random.shuffle and pass in the cards

5651
03:35:28,560 --> 03:35:31,680
list to that function

5652
03:35:31,680 --> 03:35:34,000
and then if i play this here or run the

5653
03:35:34,000 --> 03:35:36,160
program we can see that these are not in

5654
03:35:36,160 --> 03:35:39,200
order anymore see ace of spades

5655
03:35:39,200 --> 03:35:42,800
three of spades king of diamonds jack of

5656
03:35:42,800 --> 03:35:44,640
hearts so these are no longer in order

5657
03:35:44,640 --> 03:35:46,880
because they've been shuffled now let's

5658
03:35:46,880 --> 03:35:48,880
remove a single element from the cards

5659
03:35:48,880 --> 03:35:51,359
list this is similar to dealing a card

5660
03:35:51,359 --> 03:35:53,520
from a deck and this can be done with

5661
03:35:53,520 --> 03:35:55,359
the pop method

5662
03:35:55,359 --> 03:35:58,160
so after the cards are shuffled

5663
03:35:58,160 --> 03:36:00,560
let's create another card variable and

5664
03:36:00,560 --> 03:36:01,520
just

5665
03:36:01,520 --> 03:36:04,000
pop off a card from the cards list and

5666
03:36:04,000 --> 03:36:06,399
put it into that variable called card

5667
03:36:06,399 --> 03:36:09,200
and just print that card

5668
03:36:09,200 --> 03:36:10,960
so i'll do card

5669
03:36:10,960 --> 03:36:14,800
equals cards dot pop

5670
03:36:14,800 --> 03:36:16,479
and then instead of printing all the

5671
03:36:16,479 --> 03:36:18,000
cards i'm just going to print a single

5672
03:36:18,000 --> 03:36:20,399
card i'll run the program

5673
03:36:20,399 --> 03:36:22,160
see every time i run the program you can

5674
03:36:22,160 --> 03:36:24,720
see we're getting a different card we're

5675
03:36:24,720 --> 03:36:26,080
dealing a different card because it's

5676
03:36:26,080 --> 03:36:27,600
been shuffled

5677
03:36:27,600 --> 03:36:28,880
so we've already learned all about

5678
03:36:28,880 --> 03:36:30,720
functions and now we're going to create

5679
03:36:30,720 --> 03:36:32,080
a function

5680
03:36:32,080 --> 03:36:33,520
so create a

5681
03:36:33,520 --> 03:36:36,399
function called shuffle that just has

5682
03:36:36,399 --> 03:36:40,479
the single line that shuffles the cards

5683
03:36:40,479 --> 03:36:43,439
so it's just def shuffle

5684
03:36:43,439 --> 03:36:44,880
and then i just have to make sure this

5685
03:36:44,880 --> 03:36:47,040
is indented so now when we call the

5686
03:36:47,040 --> 03:36:49,520
shuffle function it will shuffle the

5687
03:36:49,520 --> 03:36:50,479
cards

5688
03:36:50,479 --> 03:36:52,800
so right before the print statement

5689
03:36:52,800 --> 03:36:54,960
call the shuffle function and instead of

5690
03:36:54,960 --> 03:36:57,359
just printing the single card print the

5691
03:36:57,359 --> 03:36:58,640
cards

5692
03:36:58,640 --> 03:37:01,680
so do shuffle

5693
03:37:01,680 --> 03:37:04,720
and then i will print all the cards and

5694
03:37:04,720 --> 03:37:06,720
let's just try out the program

5695
03:37:06,720 --> 03:37:09,040
and we can see there was a problem it's

5696
03:37:09,040 --> 03:37:12,319
because we didn't put the the colon here

5697
03:37:12,319 --> 03:37:14,000
so that's an important part of creating

5698
03:37:14,000 --> 03:37:16,560
a function is putting the colon there

5699
03:37:16,560 --> 03:37:18,000
now we'll create another function called

5700
03:37:18,000 --> 03:37:21,359
deal and we'll put this line inside the

5701
03:37:21,359 --> 03:37:23,279
the deal function

5702
03:37:23,279 --> 03:37:26,000
so we're going to define deal

5703
03:37:26,000 --> 03:37:27,840
and i'll put the colon this time and

5704
03:37:27,840 --> 03:37:29,279
make sure to

5705
03:37:29,279 --> 03:37:30,960
indent that

5706
03:37:30,960 --> 03:37:33,200
and we can see this has a orange

5707
03:37:33,200 --> 03:37:34,880
squiggly line underneath it because

5708
03:37:34,880 --> 03:37:36,800
variables can only be accessed in the

5709
03:37:36,800 --> 03:37:38,960
context that they were created so the

5710
03:37:38,960 --> 03:37:40,560
card variable will not be available

5711
03:37:40,560 --> 03:37:42,560
outside of the deal function

5712
03:37:42,560 --> 03:37:44,399
you can get a value out of a function by

5713
03:37:44,399 --> 03:37:46,960
returning a result using the return

5714
03:37:46,960 --> 03:37:49,200
statement so at the end we're going to

5715
03:37:49,200 --> 03:37:52,239
return the card

5716
03:37:52,640 --> 03:37:54,479
okay now we've taken care of that

5717
03:37:54,479 --> 03:37:57,120
squiggly line there so after the shuffle

5718
03:37:57,120 --> 03:37:59,200
function is called we'll call the deal

5719
03:37:59,200 --> 03:38:01,760
function and assign the return value to

5720
03:38:01,760 --> 03:38:04,399
a variable named card then we'll update

5721
03:38:04,399 --> 03:38:06,560
the print function to print card instead

5722
03:38:06,560 --> 03:38:08,080
of cards

5723
03:38:08,080 --> 03:38:09,920
so card

5724
03:38:09,920 --> 03:38:11,120
equals

5725
03:38:11,120 --> 03:38:12,720
deal

5726
03:38:12,720 --> 03:38:15,520
and then we'll just print

5727
03:38:15,520 --> 03:38:18,000
the card

5728
03:38:18,800 --> 03:38:20,640
and again we

5729
03:38:20,640 --> 03:38:22,479
see a different card every time we run

5730
03:38:22,479 --> 03:38:24,000
the program

5731
03:38:24,000 --> 03:38:25,520
what if you want the deal function to

5732
03:38:25,520 --> 03:38:28,000
deal more than one card well let's

5733
03:38:28,000 --> 03:38:30,479
refactor the deal function to and accept

5734
03:38:30,479 --> 03:38:32,960
to accept an argument so any number of

5735
03:38:32,960 --> 03:38:34,479
arguments can appear inside the

5736
03:38:34,479 --> 03:38:36,720
parentheses when a function is created

5737
03:38:36,720 --> 03:38:39,120
separated by commas inside the function

5738
03:38:39,120 --> 03:38:41,040
the arguments are assigned to variables

5739
03:38:41,040 --> 03:38:44,000
called parameters so start by making it

5740
03:38:44,000 --> 03:38:45,439
so we'll start by making it so the deal

5741
03:38:45,439 --> 03:38:48,560
function takes an argument named number

5742
03:38:48,560 --> 03:38:49,760
then we'll make sure when we call the

5743
03:38:49,760 --> 03:38:52,000
function we use the new parameter

5744
03:38:52,000 --> 03:38:53,040
by

5745
03:38:53,040 --> 03:38:56,640
making it so we're gonna deal two

5746
03:38:56,640 --> 03:38:58,720
so i'm just gonna put number here it's

5747
03:38:58,720 --> 03:39:01,120
gonna it's gonna deal a number of cards

5748
03:39:01,120 --> 03:39:03,199
we're gonna deal two and i just didn't

5749
03:39:03,199 --> 03:39:05,120
say this before but now instead this is

5750
03:39:05,120 --> 03:39:07,600
not one card anymore so we're going to

5751
03:39:07,600 --> 03:39:10,640
update this to be cards dealt but

5752
03:39:10,640 --> 03:39:12,479
there's a special shortcut you can

5753
03:39:12,479 --> 03:39:15,120
either it's going to be

5754
03:39:15,120 --> 03:39:17,199
command or control d

5755
03:39:17,199 --> 03:39:19,680
and now i'm actually selecting the card

5756
03:39:19,680 --> 03:39:21,840
two different times see i i now have

5757
03:39:21,840 --> 03:39:24,399
multiple cursors here so basically i

5758
03:39:24,399 --> 03:39:26,080
selected the word i double clicked to

5759
03:39:26,080 --> 03:39:27,600
select the word then did command or

5760
03:39:27,600 --> 03:39:30,000
control d now it's selecting two words

5761
03:39:30,000 --> 03:39:32,239
and now i can type in

5762
03:39:32,239 --> 03:39:34,160
cards

5763
03:39:34,160 --> 03:39:35,600
delt

5764
03:39:35,600 --> 03:39:37,840
so now i can type in two places at one

5765
03:39:37,840 --> 03:39:39,439
time so that's a cool thing that you can

5766
03:39:39,439 --> 03:39:41,199
do in replit and you can do it in many

5767
03:39:41,199 --> 03:39:43,279
other code editors and i'll run the

5768
03:39:43,279 --> 03:39:45,359
program but it should still only deal

5769
03:39:45,359 --> 03:39:46,800
one card because even though we're

5770
03:39:46,800 --> 03:39:48,800
passing this parameter into here we're

5771
03:39:48,800 --> 03:39:51,600
not doing anything with it yet here so

5772
03:39:51,600 --> 03:39:53,600
we want to update the deal function so

5773
03:39:53,600 --> 03:39:55,439
it's going to return a list of cards

5774
03:39:55,439 --> 03:39:57,359
instead of a single card

5775
03:39:57,359 --> 03:39:59,359
in the first line of the function create

5776
03:39:59,359 --> 03:40:02,720
an empty list named cards delt then

5777
03:40:02,720 --> 03:40:05,040
update the last line of the function to

5778
03:40:05,040 --> 03:40:07,520
return cards dealt instead of return

5779
03:40:07,520 --> 03:40:10,160
card so let's do that really quick we're

5780
03:40:10,160 --> 03:40:11,439
going to do

5781
03:40:11,439 --> 03:40:13,040
cards

5782
03:40:13,040 --> 03:40:14,960
dealt

5783
03:40:14,960 --> 03:40:17,359
is going to equal an empty list and i'll

5784
03:40:17,359 --> 03:40:19,760
just copy that and paste it

5785
03:40:19,760 --> 03:40:20,960
right here

5786
03:40:20,960 --> 03:40:22,479
now do you remember how to use a the

5787
03:40:22,479 --> 03:40:24,640
range function with a for loop we talked

5788
03:40:24,640 --> 03:40:26,160
about it earlier in the course we just

5789
03:40:26,160 --> 03:40:28,960
briefly touched on it but let's create a

5790
03:40:28,960 --> 03:40:31,439
for loop that's going to

5791
03:40:31,439 --> 03:40:34,080
add a card from the deck

5792
03:40:34,080 --> 03:40:35,840
for each

5793
03:40:35,840 --> 03:40:37,520
card dealt

5794
03:40:37,520 --> 03:40:40,720
so we can do that by creating a for loop

5795
03:40:40,720 --> 03:40:43,520
for x and range

5796
03:40:43,520 --> 03:40:46,080
number now this is a common thing you're

5797
03:40:46,080 --> 03:40:49,279
going to be doing in python creating a

5798
03:40:49,279 --> 03:40:51,359
for loop that's going to be in range

5799
03:40:51,359 --> 03:40:54,000
number because now it's going to loop

5800
03:40:54,000 --> 03:40:56,000
this many times it's going to loop this

5801
03:40:56,000 --> 03:40:57,760
many times which is the number we passed

5802
03:40:57,760 --> 03:41:00,000
in here and we're going to do a few

5803
03:41:00,000 --> 03:41:01,840
things in this for loop

5804
03:41:01,840 --> 03:41:04,239
first we are going to

5805
03:41:04,239 --> 03:41:05,680
actually do this what we already have

5806
03:41:05,680 --> 03:41:08,640
card equal cards dot pop and then we'll

5807
03:41:08,640 --> 03:41:10,800
do cards

5808
03:41:10,800 --> 03:41:12,399
delt

5809
03:41:12,399 --> 03:41:15,120
dot append

5810
03:41:15,120 --> 03:41:16,399
card

5811
03:41:16,399 --> 03:41:19,120
so now just this card that we popped off

5812
03:41:19,120 --> 03:41:20,960
the deck we are appending it to the

5813
03:41:20,960 --> 03:41:23,920
card's delt and then we're returning the

5814
03:41:23,920 --> 03:41:26,000
cards dealt here

5815
03:41:26,000 --> 03:41:28,560
so down here in the code

5816
03:41:28,560 --> 03:41:31,439
let's separate out a single card from

5817
03:41:31,439 --> 03:41:33,199
the two cards dealt

5818
03:41:33,199 --> 03:41:35,600
so let's create a variable called card

5819
03:41:35,600 --> 03:41:37,840
and set it equal to the first item in

5820
03:41:37,840 --> 03:41:40,080
the cards delt list

5821
03:41:40,080 --> 03:41:41,840
and then we'll just print that card

5822
03:41:41,840 --> 03:41:43,600
instead of cards dealt

5823
03:41:43,600 --> 03:41:46,880
so we are going to do card

5824
03:41:46,880 --> 03:41:49,760
equals cards

5825
03:41:49,760 --> 03:41:52,720
delt and then we just use the brackets

5826
03:41:52,720 --> 03:41:56,000
and put 0 to get the first item in that

5827
03:41:56,000 --> 03:41:56,880
list

5828
03:41:56,880 --> 03:41:58,800
and then we'll just print

5829
03:41:58,800 --> 03:42:00,000
a card

5830
03:42:00,000 --> 03:42:01,680
now i'm just going to test out the

5831
03:42:01,680 --> 03:42:03,840
program we're still just seeing a single

5832
03:42:03,840 --> 03:42:06,319
card here but it's doing a lot more

5833
03:42:06,319 --> 03:42:08,319
behind the scenes now

5834
03:42:08,319 --> 03:42:10,800
so now let's separate out the rank part

5835
03:42:10,800 --> 03:42:13,279
of a single card so after we create the

5836
03:42:13,279 --> 03:42:16,399
card there let's create a variable named

5837
03:42:16,399 --> 03:42:18,880
rank and assign it the rank from the

5838
03:42:18,880 --> 03:42:20,640
card

5839
03:42:20,640 --> 03:42:22,960
so we'll do rank

5840
03:42:22,960 --> 03:42:25,359
equals card

5841
03:42:25,359 --> 03:42:28,960
and then i have to get index one because

5842
03:42:28,960 --> 03:42:31,040
the rank is this that's the nine here

5843
03:42:31,040 --> 03:42:35,120
the second item in this card is the rank

5844
03:42:35,120 --> 03:42:37,680
so each rank has a different value in

5845
03:42:37,680 --> 03:42:40,960
blackjack the value of an ace or an a in

5846
03:42:40,960 --> 03:42:44,000
this in this program is 11

5847
03:42:44,000 --> 03:42:45,840
or sometimes it can actually be one it's

5848
03:42:45,840 --> 03:42:47,840
going to be 11 or 1 but we'll get to the

5849
03:42:47,840 --> 03:42:52,560
one part later so jack j q and k which

5850
03:42:52,560 --> 03:42:54,880
is jack queen and king have the value of

5851
03:42:54,880 --> 03:42:56,800
10 and then the numbers have the value

5852
03:42:56,800 --> 03:42:58,720
of the number so we need to check what

5853
03:42:58,720 --> 03:43:01,439
the rank is and set the value depending

5854
03:43:01,439 --> 03:43:02,880
on the rank

5855
03:43:02,880 --> 03:43:05,120
so this is the perfect time for a

5856
03:43:05,120 --> 03:43:07,760
conditional statement specifically an if

5857
03:43:07,760 --> 03:43:09,359
statement

5858
03:43:09,359 --> 03:43:11,520
before the final print statement or

5859
03:43:11,520 --> 03:43:13,439
program we're going to add an if

5860
03:43:13,439 --> 03:43:17,439
statement to check if the rank equals a

5861
03:43:17,439 --> 03:43:20,399
and if so we'll assign 11 to a variable

5862
03:43:20,399 --> 03:43:23,120
named value

5863
03:43:23,120 --> 03:43:25,359
so we'll do if

5864
03:43:25,359 --> 03:43:27,279
rank and i hope you remember if you're

5865
03:43:27,279 --> 03:43:28,880
flying along i hope you remember to use

5866
03:43:28,880 --> 03:43:30,560
two equal signs instead of one equal

5867
03:43:30,560 --> 03:43:34,800
sign here so if rank equals a

5868
03:43:34,800 --> 03:43:37,920
then value is going to equal with a

5869
03:43:37,920 --> 03:43:40,319
single equal sign is going to equal

5870
03:43:40,319 --> 03:43:41,520
11.

5871
03:43:41,520 --> 03:43:43,680
now if rank does not equal a we'll want

5872
03:43:43,680 --> 03:43:47,439
to check if it equals j q or k

5873
03:43:47,439 --> 03:43:50,800
that can be done with an elif statement

5874
03:43:50,800 --> 03:43:52,080
for now we'll just create an if

5875
03:43:52,080 --> 03:43:54,560
statement to check if the rank equals j

5876
03:43:54,560 --> 03:43:57,439
and then if so we will set the value to

5877
03:43:57,439 --> 03:43:59,760
10.

5878
03:44:00,239 --> 03:44:01,920
so we talked about the three logical

5879
03:44:01,920 --> 03:44:04,399
operators and or

5880
03:44:04,399 --> 03:44:06,399
and not you can use these three

5881
03:44:06,399 --> 03:44:08,399
operators in conditional statements to

5882
03:44:08,399 --> 03:44:11,520
check multiple conditions at once so we

5883
03:44:11,520 --> 03:44:13,120
want to check if

5884
03:44:13,120 --> 03:44:16,399
rank is j or rank is q

5885
03:44:16,399 --> 03:44:20,319
or rank is k so update the code with the

5886
03:44:20,319 --> 03:44:23,680
the and with the ors

5887
03:44:24,160 --> 03:44:25,600
now there can be any number of ls

5888
03:44:25,600 --> 03:44:27,439
statements after an if statement but at

5889
03:44:27,439 --> 03:44:29,439
the end there can only be a single else

5890
03:44:29,439 --> 03:44:30,399
statement

5891
03:44:30,399 --> 03:44:32,960
and like we discussed the else is just

5892
03:44:32,960 --> 03:44:34,560
going to be if none of the other ones

5893
03:44:34,560 --> 03:44:37,439
are true so let's add an else statement

5894
03:44:37,439 --> 03:44:39,439
and inside we'll just assign rank to

5895
03:44:39,439 --> 03:44:40,800
value because we've already gotten all

5896
03:44:40,800 --> 03:44:42,479
the letters out of the way the rest are

5897
03:44:42,479 --> 03:44:44,479
numbers and we can assign it directly to

5898
03:44:44,479 --> 03:44:46,960
the value

5899
03:44:48,880 --> 03:44:49,920
now we'll

5900
03:44:49,920 --> 03:44:52,080
instead of printing the card at the end

5901
03:44:52,080 --> 03:44:56,000
let's print the rank and the value

5902
03:44:56,000 --> 03:44:59,600
so i can just type in rank comma value

5903
03:44:59,600 --> 03:45:00,720
and

5904
03:45:00,720 --> 03:45:02,560
when that multiple values in a print

5905
03:45:02,560 --> 03:45:04,479
statement are listed with a comma

5906
03:45:04,479 --> 03:45:06,479
separating them both values are printed

5907
03:45:06,479 --> 03:45:08,560
with a space in between so let's test

5908
03:45:08,560 --> 03:45:12,800
this out a few times q10 five five 6 6

5909
03:45:12,800 --> 03:45:14,319
so we can see every time we press it

5910
03:45:14,319 --> 03:45:17,199
it's going to be a random rank and value

5911
03:45:17,199 --> 03:45:19,120
now we already talked about dictionaries

5912
03:45:19,120 --> 03:45:21,199
in python it's like a list but more

5913
03:45:21,199 --> 03:45:23,120
general you can think of a dictionary as

5914
03:45:23,120 --> 03:45:25,520
a mapping between a set of indices which

5915
03:45:25,520 --> 03:45:28,880
are called keys and values so key value

5916
03:45:28,880 --> 03:45:31,199
pairs each key maps to a value so above

5917
03:45:31,199 --> 03:45:32,800
the print statement let's create a

5918
03:45:32,800 --> 03:45:34,560
variable called rank

5919
03:45:34,560 --> 03:45:37,439
underscore dict for dictionary and

5920
03:45:37,439 --> 03:45:40,720
create a dictionary with two items

5921
03:45:40,720 --> 03:45:43,279
a key value pair for the rank and a key

5922
03:45:43,279 --> 03:45:46,880
value pair for the value

5923
03:45:50,319 --> 03:45:52,160
so we have the string rank here and then

5924
03:45:52,160 --> 03:45:54,560
the actual rank variable string value

5925
03:45:54,560 --> 03:45:57,680
and the actual value variable

5926
03:45:57,680 --> 03:45:59,120
before we are

5927
03:45:59,120 --> 03:46:01,439
printing the rank variable and the value

5928
03:46:01,439 --> 03:46:04,080
variable but let's update this code so

5929
03:46:04,080 --> 03:46:05,279
we're actually getting the rank and

5930
03:46:05,279 --> 03:46:07,600
value from the rank dictionary right

5931
03:46:07,600 --> 03:46:08,880
here

5932
03:46:08,880 --> 03:46:11,520
so i'm going to copy that and then i

5933
03:46:11,520 --> 03:46:13,040
just pasted that but now i'm going to

5934
03:46:13,040 --> 03:46:15,439
use bracket notation

5935
03:46:15,439 --> 03:46:17,760
and so i'll put two brackets but then i

5936
03:46:17,760 --> 03:46:20,560
also have to surround this in quotation

5937
03:46:20,560 --> 03:46:21,600
marks

5938
03:46:21,600 --> 03:46:23,279
and then i'm gonna

5939
03:46:23,279 --> 03:46:26,239
put the rank dictionary the brackets

5940
03:46:26,239 --> 03:46:28,080
and then the quotation marks because

5941
03:46:28,080 --> 03:46:30,800
we're accessing that key there

5942
03:46:30,800 --> 03:46:33,279
and then i can just run the program and

5943
03:46:33,279 --> 03:46:34,800
it's still doing the same thing as

5944
03:46:34,800 --> 03:46:37,600
before just a lot more complicated as

5945
03:46:37,600 --> 03:46:39,600
far as the code goes but it's going to

5946
03:46:39,600 --> 03:46:42,239
be good to have more complicated code as

5947
03:46:42,239 --> 03:46:44,800
our program is going to become more

5948
03:46:44,800 --> 03:46:46,720
complicated as we go

5949
03:46:46,720 --> 03:46:48,800
so when writing a program there are many

5950
03:46:48,800 --> 03:46:51,600
ways to do almost everything

5951
03:46:51,600 --> 03:46:53,600
now we're going to refactor the code to

5952
03:46:53,600 --> 03:46:56,479
get the value of each rank without using

5953
03:46:56,479 --> 03:46:58,000
an if statement

5954
03:46:58,000 --> 03:47:00,640
instead we'll store both the rank name

5955
03:47:00,640 --> 03:47:03,359
and value in the ranks list using

5956
03:47:03,359 --> 03:47:05,760
dictionaries so let's delete all the

5957
03:47:05,760 --> 03:47:08,560
code lines of code after where it says

5958
03:47:08,560 --> 03:47:09,680
shuffle

5959
03:47:09,680 --> 03:47:11,199
so

5960
03:47:11,199 --> 03:47:12,960
here i know we typed in a lot of stuff

5961
03:47:12,960 --> 03:47:15,199
there but it was just kind of to

5962
03:47:15,199 --> 03:47:16,720
practice and now we're going to practice

5963
03:47:16,720 --> 03:47:19,680
a different method of doing this

5964
03:47:19,680 --> 03:47:22,319
so now let's create a new card variable

5965
03:47:22,319 --> 03:47:24,319
a new variable called card at the end

5966
03:47:24,319 --> 03:47:27,040
and let's assign to the card variable

5967
03:47:27,040 --> 03:47:29,840
a a single card that will deal from the

5968
03:47:29,840 --> 03:47:31,760
deck but we'll make sure that card is

5969
03:47:31,760 --> 03:47:32,399
not

5970
03:47:32,399 --> 03:47:35,760
in a list so this is a little tricky i'm

5971
03:47:35,760 --> 03:47:39,279
gonna do deal and i'll deal one card

5972
03:47:39,279 --> 03:47:41,840
but now i have to get

5973
03:47:41,840 --> 03:47:44,399
the first item so this is going to deal

5974
03:47:44,399 --> 03:47:47,279
one card but the one card is going to

5975
03:47:47,279 --> 03:47:50,080
deal is going to be in a list so i want

5976
03:47:50,080 --> 03:47:52,160
to get the first item in the list which

5977
03:47:52,160 --> 03:47:54,160
is going to be the only item in the list

5978
03:47:54,160 --> 03:47:56,080
so i had to put the zero in brackets

5979
03:47:56,080 --> 03:47:59,040
here to get that card out of a list

5980
03:47:59,040 --> 03:48:02,319
before it goes into the card variable

5981
03:48:02,319 --> 03:48:04,399
now we're going to update the ranks list

5982
03:48:04,399 --> 03:48:07,279
so here's the the ranks list each

5983
03:48:07,279 --> 03:48:09,279
element the list should now be a

5984
03:48:09,279 --> 03:48:11,680
dictionary when lists or list elements

5985
03:48:11,680 --> 03:48:13,199
are long it's common to put each element

5986
03:48:13,199 --> 03:48:14,880
on its own line so we're going to put

5987
03:48:14,880 --> 03:48:17,040
each element on its own line and each

5988
03:48:17,040 --> 03:48:18,640
element is going to have the rank and

5989
03:48:18,640 --> 03:48:20,720
the value so for instance it will be

5990
03:48:20,720 --> 03:48:23,120
rank a value 11

5991
03:48:23,120 --> 03:48:27,279
rank 2 value 2.

5992
03:48:27,279 --> 03:48:29,600
so it's going to look like

5993
03:48:29,600 --> 03:48:31,120
this

5994
03:48:31,120 --> 03:48:32,640
and i'm now i'm actually going to zoom

5995
03:48:32,640 --> 03:48:36,000
out just a little bit and we have all

5996
03:48:36,000 --> 03:48:38,239
these they're all these ranks and each

5997
03:48:38,239 --> 03:48:40,239
one in this list

5998
03:48:40,239 --> 03:48:42,239
is a dictionary each element in the list

5999
03:48:42,239 --> 03:48:43,760
is a dictionary

6000
03:48:43,760 --> 03:48:45,760
okay now that this is updated let's go

6001
03:48:45,760 --> 03:48:48,239
down and just print a card so we can see

6002
03:48:48,239 --> 03:48:50,160
now that we've updated that ranks list

6003
03:48:50,160 --> 03:48:52,239
so print

6004
03:48:52,239 --> 03:48:54,640
card

6005
03:48:54,640 --> 03:48:56,239
okay so this is what it's going to look

6006
03:48:56,239 --> 03:48:58,000
like coming from

6007
03:48:58,000 --> 03:48:59,279
our list

6008
03:48:59,279 --> 03:49:01,600
so we got the suit

6009
03:49:01,600 --> 03:49:03,279
and then we have the rank that's also

6010
03:49:03,279 --> 03:49:05,760
going to have the value here the rank

6011
03:49:05,760 --> 03:49:07,840
and the value

6012
03:49:07,840 --> 03:49:09,439
we can see every time we click it we get

6013
03:49:09,439 --> 03:49:12,080
a random item

6014
03:49:12,080 --> 03:49:14,160
now let's update the code so instead of

6015
03:49:14,160 --> 03:49:17,120
printing the whole card we just

6016
03:49:17,120 --> 03:49:20,479
print the value so in this example the

6017
03:49:20,479 --> 03:49:23,359
value is two so we just want to print

6018
03:49:23,359 --> 03:49:26,640
this to just that that value so how can

6019
03:49:26,640 --> 03:49:28,479
we update this see if you can figure out

6020
03:49:28,479 --> 03:49:31,840
how to update this line so only prints

6021
03:49:31,840 --> 03:49:34,720
just the value number there

6022
03:49:34,720 --> 03:49:36,319
so first of all we have to see that

6023
03:49:36,319 --> 03:49:38,800
we're in a list and we need so this is

6024
03:49:38,800 --> 03:49:40,479
the first element of the list this is

6025
03:49:40,479 --> 03:49:42,319
the second element so wait to start by

6026
03:49:42,319 --> 03:49:45,199
getting the second element of the list

6027
03:49:45,199 --> 03:49:46,560
which is

6028
03:49:46,560 --> 03:49:48,399
index one

6029
03:49:48,399 --> 03:49:49,520
and then

6030
03:49:49,520 --> 03:49:52,560
we have an object here or a dictionary i

6031
03:49:52,560 --> 03:49:54,720
mean and we need to get

6032
03:49:54,720 --> 03:49:56,399
so here we have this key value pair so

6033
03:49:56,399 --> 03:49:59,040
we need the value at that key so to get

6034
03:49:59,040 --> 03:50:00,880
the value of that key we are going to

6035
03:50:00,880 --> 03:50:02,560
put more brackets and i'm going to put

6036
03:50:02,560 --> 03:50:06,000
value the key of value so now with that

6037
03:50:06,000 --> 03:50:08,080
should work let's try it

6038
03:50:08,080 --> 03:50:09,359
okay nine

6039
03:50:09,359 --> 03:50:11,040
seven see every time it's gonna just

6040
03:50:11,040 --> 03:50:14,080
give us the value of the card

6041
03:50:14,080 --> 03:50:16,000
now we'll start defining classes that

6042
03:50:16,000 --> 03:50:18,239
will be used in order to separate out

6043
03:50:18,239 --> 03:50:21,439
different aspects of the game

6044
03:50:21,439 --> 03:50:23,439
so classes you may remember provide a

6045
03:50:23,439 --> 03:50:25,520
way of bundling data and functionality

6046
03:50:25,520 --> 03:50:27,439
together creating a new class creates a

6047
03:50:27,439 --> 03:50:29,520
new type of object allowing new

6048
03:50:29,520 --> 03:50:31,760
instances of that type to be made an

6049
03:50:31,760 --> 03:50:34,000
object can contain a number of functions

6050
03:50:34,000 --> 03:50:35,920
which we call methods as well as data

6051
03:50:35,920 --> 03:50:37,680
that is used by those functions called

6052
03:50:37,680 --> 03:50:39,359
attributes so

6053
03:50:39,359 --> 03:50:41,120
we're going to use classes to model

6054
03:50:41,120 --> 03:50:44,080
three parts of the game a card a deck

6055
03:50:44,080 --> 03:50:46,800
and a hand so far we've mainly worked on

6056
03:50:46,800 --> 03:50:49,279
the elements of the debt class

6057
03:50:49,279 --> 03:50:52,399
so right after this import statement at

6058
03:50:52,399 --> 03:50:53,520
the top

6059
03:50:53,520 --> 03:50:55,199
we're going to

6060
03:50:55,199 --> 03:50:58,080
make a class a class called

6061
03:50:58,080 --> 03:51:00,239
dec and we're going to put everything

6062
03:51:00,239 --> 03:51:04,160
that we've written so far in that class

6063
03:51:04,160 --> 03:51:07,359
so we're just gonna do class

6064
03:51:07,600 --> 03:51:08,720
deck

6065
03:51:08,720 --> 03:51:09,760
colon

6066
03:51:09,760 --> 03:51:11,920
okay now we just highlight

6067
03:51:11,920 --> 03:51:14,000
everything here and then i'm gonna press

6068
03:51:14,000 --> 03:51:14,880
tab

6069
03:51:14,880 --> 03:51:17,600
to put everything in the class of deck

6070
03:51:17,600 --> 03:51:19,359
because everything's

6071
03:51:19,359 --> 03:51:20,960
indented a little bit

6072
03:51:20,960 --> 03:51:23,680
and then these last few lines of code we

6073
03:51:23,680 --> 03:51:25,040
don't need so i'll just delete those

6074
03:51:25,040 --> 03:51:27,520
those are just for testing out

6075
03:51:27,520 --> 03:51:30,399
a class is like a template you can use

6076
03:51:30,399 --> 03:51:32,000
that class to create an instance of the

6077
03:51:32,000 --> 03:51:33,760
class called an object

6078
03:51:33,760 --> 03:51:36,080
then you can use the instance each

6079
03:51:36,080 --> 03:51:38,080
instance keeps track of its own state so

6080
03:51:38,080 --> 03:51:39,760
you can update an instance created from

6081
03:51:39,760 --> 03:51:41,600
a class and it won't impact other

6082
03:51:41,600 --> 03:51:44,560
objects created from the same class soon

6083
03:51:44,560 --> 03:51:45,840
you'll see an example of all this to

6084
03:51:45,840 --> 03:51:47,760
make it easier to understand

6085
03:51:47,760 --> 03:51:50,160
but first let's prepare a class to

6086
03:51:50,160 --> 03:51:52,479
create an instance from it

6087
03:51:52,479 --> 03:51:54,080
when you create an instance of a class

6088
03:51:54,080 --> 03:51:56,000
python automatically calls a function

6089
03:51:56,000 --> 03:51:58,960
also called a method in the clast named

6090
03:51:58,960 --> 03:52:01,199
init remember we already discussed this

6091
03:52:01,199 --> 03:52:04,000
earlier in the course so the contents of

6092
03:52:04,000 --> 03:52:06,720
this init method should be code that is

6093
03:52:06,720 --> 03:52:10,640
run one time to initialize the instance

6094
03:52:10,640 --> 03:52:13,600
so at the beginning of our class let's

6095
03:52:13,600 --> 03:52:17,359
create this init function so we'll do

6096
03:52:17,359 --> 03:52:18,720
def

6097
03:52:18,720 --> 03:52:21,439
underscore underscore init

6098
03:52:21,439 --> 03:52:22,640
underscore underscore and if you

6099
03:52:22,640 --> 03:52:24,399
remember from before we always have to

6100
03:52:24,399 --> 03:52:25,520
pass in

6101
03:52:25,520 --> 03:52:26,479
self

6102
03:52:26,479 --> 03:52:28,160
to all of these

6103
03:52:28,160 --> 03:52:30,800
functions in a class because then it

6104
03:52:30,800 --> 03:52:34,080
gets itself is referring to the instance

6105
03:52:34,080 --> 03:52:36,479
of the class that we've developed now

6106
03:52:36,479 --> 03:52:37,680
we're going to indent all the code

6107
03:52:37,680 --> 03:52:39,439
that's not part of the shuffle or deal

6108
03:52:39,439 --> 03:52:41,279
function so the code will be part of

6109
03:52:41,279 --> 03:52:43,040
this new function so i'm just going to

6110
03:52:43,040 --> 03:52:44,160
highlight

6111
03:52:44,160 --> 03:52:46,000
all this here

6112
03:52:46,000 --> 03:52:47,120
including

6113
03:52:47,120 --> 03:52:50,080
the suits here and then just press

6114
03:52:50,080 --> 03:52:51,120
tab

6115
03:52:51,120 --> 03:52:53,040
so like i said we just added self in

6116
03:52:53,040 --> 03:52:54,880
here you should always

6117
03:52:54,880 --> 03:52:56,560
all the methods in a class or all the

6118
03:52:56,560 --> 03:52:59,199
functions should have self

6119
03:52:59,199 --> 03:53:01,279
anything inside the parentheses remember

6120
03:53:01,279 --> 03:53:03,199
is called an argument their variables

6121
03:53:03,199 --> 03:53:04,800
pass them from the color to the

6122
03:53:04,800 --> 03:53:05,920
functions

6123
03:53:05,920 --> 03:53:07,680
as i've said all functions in a class

6124
03:53:07,680 --> 03:53:10,399
should receive self as an argument and

6125
03:53:10,399 --> 03:53:12,479
self represents the instance of the

6126
03:53:12,479 --> 03:53:14,640
class by using the self keyword the

6127
03:53:14,640 --> 03:53:16,640
function can access the attributes and

6128
03:53:16,640 --> 03:53:18,880
methods of the class

6129
03:53:18,880 --> 03:53:21,199
so let's make sure to add self as the

6130
03:53:21,199 --> 03:53:23,760
first item in the parentheses of the

6131
03:53:23,760 --> 03:53:25,600
other functions

6132
03:53:25,600 --> 03:53:28,880
so we are going to add self here

6133
03:53:28,880 --> 03:53:30,479
and then see how we already have number

6134
03:53:30,479 --> 03:53:31,920
here but we're going to hit self at the

6135
03:53:31,920 --> 03:53:32,880
beginning

6136
03:53:32,880 --> 03:53:34,880
and we so we can still

6137
03:53:34,880 --> 03:53:36,720
call this function with just

6138
03:53:36,720 --> 03:53:39,199
a single number but it's going to also

6139
03:53:39,199 --> 03:53:42,080
get a reference to the instance here now

6140
03:53:42,080 --> 03:53:44,000
i want you to notice that

6141
03:53:44,000 --> 03:53:46,880
the cards here is underlying in

6142
03:53:46,880 --> 03:53:49,600
red so before it wasn't when we were

6143
03:53:49,600 --> 03:53:51,760
before we made this into a class we

6144
03:53:51,760 --> 03:53:53,439
could just access

6145
03:53:53,439 --> 03:53:56,640
this cards variable but now we cannot so

6146
03:53:56,640 --> 03:53:58,640
let's fix that

6147
03:53:58,640 --> 03:54:00,800
inside a class in order to access a

6148
03:54:00,800 --> 03:54:03,359
variable in multiple functions also

6149
03:54:03,359 --> 03:54:05,600
called methods the variable has to start

6150
03:54:05,600 --> 03:54:07,920
with self dot

6151
03:54:07,920 --> 03:54:10,319
so we're going to change all instances

6152
03:54:10,319 --> 03:54:14,399
of cards in every function to self.card

6153
03:54:14,399 --> 03:54:15,439
starting

6154
03:54:15,439 --> 03:54:19,359
with this so self dot cards

6155
03:54:19,359 --> 03:54:20,560
now this is going to make it so we can

6156
03:54:20,560 --> 03:54:22,720
access it in other places and then we'll

6157
03:54:22,720 --> 03:54:26,239
change this to self dot cards

6158
03:54:26,239 --> 03:54:29,680
and then this is self

6159
03:54:30,239 --> 03:54:31,600
dot cards

6160
03:54:31,600 --> 03:54:33,040
and then self

6161
03:54:33,040 --> 03:54:35,920
dot cards

6162
03:54:36,000 --> 03:54:39,040
so now this will be a variable that's

6163
03:54:39,040 --> 03:54:41,600
specifically associated with the

6164
03:54:41,600 --> 03:54:44,560
instance of the deck that's created and

6165
03:54:44,560 --> 03:54:47,199
then we can access it in all of these

6166
03:54:47,199 --> 03:54:48,880
other methods

6167
03:54:48,880 --> 03:54:51,840
okay we can now create an instance also

6168
03:54:51,840 --> 03:54:54,640
called an object of the deck class so at

6169
03:54:54,640 --> 03:54:56,239
the very end of the code

6170
03:54:56,239 --> 03:54:59,120
let's create a variable called deck 1

6171
03:54:59,120 --> 03:55:01,520
and make it an instance of the deck

6172
03:55:01,520 --> 03:55:03,920
class

6173
03:55:04,560 --> 03:55:06,880
so to make sure i'm not indented at all

6174
03:55:06,880 --> 03:55:08,560
and i'll do deck

6175
03:55:08,560 --> 03:55:09,600
1

6176
03:55:09,600 --> 03:55:12,080
equals

6177
03:55:12,840 --> 03:55:15,680
deck there we go

6178
03:55:15,680 --> 03:55:17,439
now since we created cards with

6179
03:55:17,439 --> 03:55:19,040
self.cards

6180
03:55:19,040 --> 03:55:23,120
we can access that we can access cards

6181
03:55:23,120 --> 03:55:25,520
from the instance of the class so let's

6182
03:55:25,520 --> 03:55:29,600
just print out the cards from our deck

6183
03:55:29,600 --> 03:55:32,239
one so do print

6184
03:55:32,239 --> 03:55:33,120
deck

6185
03:55:33,120 --> 03:55:36,479
one dot cards

6186
03:55:36,720 --> 03:55:40,080
and we can try that out now you can see

6187
03:55:40,080 --> 03:55:43,760
the the list of all of these cards

6188
03:55:43,760 --> 03:55:45,120
it has the suit

6189
03:55:45,120 --> 03:55:48,720
and the rank and the value for each card

6190
03:55:48,720 --> 03:55:50,479
so underneath where we created deck one

6191
03:55:50,479 --> 03:55:52,000
let's create deck two we'll create

6192
03:55:52,000 --> 03:55:54,880
another instance of another deck

6193
03:55:54,880 --> 03:55:56,690
so

6194
03:55:56,690 --> 03:56:00,800
[Music]

6195
03:56:00,800 --> 03:56:03,840
so now we can call methods on these

6196
03:56:03,840 --> 03:56:06,080
instances and you see some of the

6197
03:56:06,080 --> 03:56:08,560
methods we have we have shuffle and deal

6198
03:56:08,560 --> 03:56:10,880
so on deck 2 right after we create the

6199
03:56:10,880 --> 03:56:15,199
deck 2 let's shuffle the deck so deck

6200
03:56:15,199 --> 03:56:17,680
2 dot shuffle

6201
03:56:17,680 --> 03:56:19,680
and then i have to make sure to put the

6202
03:56:19,680 --> 03:56:21,040
parentheses

6203
03:56:21,040 --> 03:56:23,040
at the end here

6204
03:56:23,040 --> 03:56:24,479
right if we print deck one let's print

6205
03:56:24,479 --> 03:56:27,120
deck two or the cards of deck two so i'm

6206
03:56:27,120 --> 03:56:29,439
gonna copy that and then we'll print

6207
03:56:29,439 --> 03:56:31,600
deck two cards so now we should see that

6208
03:56:31,600 --> 03:56:33,279
the deck one cards are not shuffled and

6209
03:56:33,279 --> 03:56:35,760
the deck two cards are shuffled so let

6210
03:56:35,760 --> 03:56:37,359
me move this over here i'm gonna run the

6211
03:56:37,359 --> 03:56:38,479
program

6212
03:56:38,479 --> 03:56:40,239
and let's see if we can see that where

6213
03:56:40,239 --> 03:56:43,520
deck one so here's where here's deck one

6214
03:56:43,520 --> 03:56:46,239
and we can see how it's all diamonds

6215
03:56:46,239 --> 03:56:48,560
diamonds diamonds diamonds diamonds all

6216
03:56:48,560 --> 03:56:49,920
the diamonds are in a row because

6217
03:56:49,920 --> 03:56:52,640
unshuffled but then if we go into deck 2

6218
03:56:52,640 --> 03:56:55,760
we can see we have diamonds clubs spades

6219
03:56:55,760 --> 03:56:58,319
diamonds hearts so these are shuffled in

6220
03:56:58,319 --> 03:57:01,840
deck 2 they are shuffled

6221
03:57:01,840 --> 03:57:04,239
okay the deck works

6222
03:57:04,239 --> 03:57:06,479
now let's add safeguards to prevent

6223
03:57:06,479 --> 03:57:08,800
errors every time the deal function is

6224
03:57:08,800 --> 03:57:11,760
called a card is removed from the cards

6225
03:57:11,760 --> 03:57:12,800
list

6226
03:57:12,800 --> 03:57:15,040
you can only remove a card if there are

6227
03:57:15,040 --> 03:57:16,560
cards to remove

6228
03:57:16,560 --> 03:57:19,520
so before the program tries to pop a

6229
03:57:19,520 --> 03:57:23,040
card off self.cards is to check if the

6230
03:57:23,040 --> 03:57:25,120
length of self.cards is greater than

6231
03:57:25,120 --> 03:57:26,399
zero

6232
03:57:26,399 --> 03:57:28,720
remember you can get the number of items

6233
03:57:28,720 --> 03:57:31,439
in a list with length so see if you can

6234
03:57:31,439 --> 03:57:33,359
figure that out on your own and then i'm

6235
03:57:33,359 --> 03:57:36,479
about to show you how it's done

6236
03:57:36,479 --> 03:57:38,960
so when it's going to deal here

6237
03:57:38,960 --> 03:57:40,560
right as we're dealing we're going to

6238
03:57:40,560 --> 03:57:43,199
add an if statement here so if

6239
03:57:43,199 --> 03:57:45,040
the length

6240
03:57:45,040 --> 03:57:49,840
of self dot cards

6241
03:57:49,920 --> 03:57:52,960
is greater than zero

6242
03:57:52,960 --> 03:57:55,359
and we do we don't need this parentheses

6243
03:57:55,359 --> 03:57:58,800
here so if the length of self.cards is

6244
03:57:58,800 --> 03:58:00,840
greater than zero

6245
03:58:00,840 --> 03:58:03,600
then we will

6246
03:58:03,600 --> 03:58:06,080
do this we'll pop up a card and add it

6247
03:58:06,080 --> 03:58:09,120
to the cards dealt if not we just won't

6248
03:58:09,120 --> 03:58:11,520
do anything and then we'll return cards

6249
03:58:11,520 --> 03:58:14,479
dealt which could be an empty array if

6250
03:58:14,479 --> 03:58:16,479
there were no cards on the deck

6251
03:58:16,479 --> 03:58:19,520
now let's add something to the shuffle

6252
03:58:19,520 --> 03:58:22,399
function a deck with only one card does

6253
03:58:22,399 --> 03:58:24,880
not need to be shuffled so let's add the

6254
03:58:24,880 --> 03:58:26,880
appropriate if statement to the shuffle

6255
03:58:26,880 --> 03:58:28,000
function

6256
03:58:28,000 --> 03:58:29,359
so we'll do

6257
03:58:29,359 --> 03:58:32,239
if the length of self

6258
03:58:32,239 --> 03:58:33,920
dot cards

6259
03:58:33,920 --> 03:58:35,120
is

6260
03:58:35,120 --> 03:58:37,359
greater than one

6261
03:58:37,359 --> 03:58:39,760
then we will shuffle and then make sure

6262
03:58:39,760 --> 03:58:41,279
i'll make sure to put the

6263
03:58:41,279 --> 03:58:42,479
colon there

6264
03:58:42,479 --> 03:58:45,279
okay

6265
03:58:45,279 --> 03:58:47,920
since a card is a separate concept than

6266
03:58:47,920 --> 03:58:48,960
a deck

6267
03:58:48,960 --> 03:58:51,760
next we'll make a card class

6268
03:58:51,760 --> 03:58:54,800
so let's create a card class with an

6269
03:58:54,800 --> 03:58:57,520
init function and in that init function

6270
03:58:57,520 --> 03:59:02,239
we'll set self.suit to equal hearts

6271
03:59:03,840 --> 03:59:05,920
so hopefully you already tried this i'm

6272
03:59:05,920 --> 03:59:08,160
going to do class

6273
03:59:08,160 --> 03:59:10,160
card

6274
03:59:10,160 --> 03:59:13,279
and then i will do def

6275
03:59:13,279 --> 03:59:14,330
net

6276
03:59:14,330 --> 03:59:16,239
[Music]

6277
03:59:16,239 --> 03:59:17,760
and then after the suit will lose self

6278
03:59:17,760 --> 03:59:21,279
dot rank and set it to a

6279
03:59:21,600 --> 03:59:23,760
so currently anytime a card is created

6280
03:59:23,760 --> 03:59:26,080
it will be an ace of hearts let's

6281
03:59:26,080 --> 03:59:28,399
refactor the code so the suit and rank

6282
03:59:28,399 --> 03:59:31,439
are specified when a card object is

6283
03:59:31,439 --> 03:59:34,399
constructed so the init method can take

6284
03:59:34,399 --> 03:59:36,800
additional parameters besides self that

6285
03:59:36,800 --> 03:59:39,040
are passed into it as objects is

6286
03:59:39,040 --> 03:59:41,279
constructed so we'll update it to take

6287
03:59:41,279 --> 03:59:42,990
suit and rank

6288
03:59:42,990 --> 03:59:44,640
[Music]

6289
03:59:44,640 --> 03:59:47,520
now we'll create a special method

6290
03:59:47,520 --> 03:59:50,000
that's underscore underscore str

6291
03:59:50,000 --> 03:59:53,199
underscore underscore

6292
03:59:53,680 --> 03:59:56,880
when a class has this specific method

6293
03:59:56,880 --> 03:59:59,520
it's called when print is invoked on an

6294
03:59:59,520 --> 04:00:01,199
object from the class

6295
04:00:01,199 --> 04:00:04,160
so we want to make it so when we print

6296
04:00:04,160 --> 04:00:07,279
an object from the card class it will

6297
04:00:07,279 --> 04:00:10,239
print something like 10 of hearts or

6298
04:00:10,239 --> 04:00:14,080
three of clubs or something like that

6299
04:00:14,080 --> 04:00:16,080
so we don't do print here we do return

6300
04:00:16,080 --> 04:00:18,080
it's going to return this to the print

6301
04:00:18,080 --> 04:00:20,560
statement it's going to turn self dot

6302
04:00:20,560 --> 04:00:22,239
rank

6303
04:00:22,239 --> 04:00:23,760
and then we have to get

6304
04:00:23,760 --> 04:00:25,430
the rank

6305
04:00:25,430 --> 04:00:28,560
[Music]

6306
04:00:28,560 --> 04:00:30,880
and we do plus

6307
04:00:30,880 --> 04:00:33,840
and then of or to put a string there

6308
04:00:33,840 --> 04:00:35,600
plus

6309
04:00:35,600 --> 04:00:38,479
self dot suit

6310
04:00:38,479 --> 04:00:40,720
so now it's going to return the rank

6311
04:00:40,720 --> 04:00:44,000
which is like 2 or a of and then the

6312
04:00:44,000 --> 04:00:46,880
suit which is one of these

6313
04:00:46,880 --> 04:00:48,239
so let's just try it out real quick and

6314
04:00:48,239 --> 04:00:49,680
we go to the bottom we don't need any of

6315
04:00:49,680 --> 04:00:51,279
these to test because we're testing

6316
04:00:51,279 --> 04:00:53,359
something completely different now let's

6317
04:00:53,359 --> 04:00:55,439
do card one

6318
04:00:55,439 --> 04:00:56,320
equals

6319
04:00:56,320 --> 04:00:57,840
[Music]

6320
04:00:57,840 --> 04:00:59,040
card i'm going to create a card and i

6321
04:00:59,040 --> 04:01:01,279
have to pass in remember i have to first

6322
04:01:01,279 --> 04:01:04,560
pass in the suit so how about hearts and

6323
04:01:04,560 --> 04:01:07,199
then i have to pass in the rank but we

6324
04:01:07,199 --> 04:01:09,680
want to make it look like these ranks so

6325
04:01:09,680 --> 04:01:10,800
i'm just going to

6326
04:01:10,800 --> 04:01:13,920
copy one of these here

6327
04:01:15,120 --> 04:01:16,160
and then

6328
04:01:16,160 --> 04:01:18,640
after we create the card i can just

6329
04:01:18,640 --> 04:01:20,319
print

6330
04:01:20,319 --> 04:01:22,399
card one

6331
04:01:22,399 --> 04:01:24,239
let me clear this and then i'll just run

6332
04:01:24,239 --> 04:01:26,880
that j of hearts

6333
04:01:26,880 --> 04:01:29,520
oh see i got the j of hearts and feel

6334
04:01:29,520 --> 04:01:31,279
free to add a few more cards like this

6335
04:01:31,279 --> 04:01:33,680
and test out a few more if you want

6336
04:01:33,680 --> 04:01:35,920
okay now we're going to refactor this

6337
04:01:35,920 --> 04:01:37,840
slightly you remember way toward the

6338
04:01:37,840 --> 04:01:39,920
beginning of this course we talked about

6339
04:01:39,920 --> 04:01:43,359
f strings so f strings allow us to put

6340
04:01:43,359 --> 04:01:45,920
variables right within a string do you

6341
04:01:45,920 --> 04:01:47,359
remember how to do that let's see if you

6342
04:01:47,359 --> 04:01:49,760
can update this to use enough string

6343
04:01:49,760 --> 04:01:51,359
so first we're going to create a new

6344
04:01:51,359 --> 04:01:52,880
string but we're going to start with the

6345
04:01:52,880 --> 04:01:54,239
letter f

6346
04:01:54,239 --> 04:01:55,359
and then

6347
04:01:55,359 --> 04:01:59,359
inside this string we put curly braces

6348
04:01:59,359 --> 04:02:00,479
around

6349
04:02:00,479 --> 04:02:01,199
the

6350
04:02:01,199 --> 04:02:03,199
python code and we don't need these

6351
04:02:03,199 --> 04:02:06,800
other strings here so

6352
04:02:06,960 --> 04:02:10,479
now we put another curly brace

6353
04:02:11,199 --> 04:02:12,840
and then an

6354
04:02:12,840 --> 04:02:15,840
ending string here

6355
04:02:15,840 --> 04:02:18,239
okay it's still showing these um red

6356
04:02:18,239 --> 04:02:20,160
squiggly lines because if i have a

6357
04:02:20,160 --> 04:02:22,080
double quote around the strings and

6358
04:02:22,080 --> 04:02:23,520
anytime other quotes are in the middle i

6359
04:02:23,520 --> 04:02:24,880
have to put a different type of quote so

6360
04:02:24,880 --> 04:02:26,160
we're going to use

6361
04:02:26,160 --> 04:02:29,840
single quotes okay so now we can make

6362
04:02:29,840 --> 04:02:31,840
this a whole a string but we use the

6363
04:02:31,840 --> 04:02:34,399
brackets to put the variables right

6364
04:02:34,399 --> 04:02:37,279
within the string so now we've updated

6365
04:02:37,279 --> 04:02:39,760
that to use an f string

6366
04:02:39,760 --> 04:02:42,880
so currently in the deck class the last

6367
04:02:42,880 --> 04:02:47,040
line of this init method

6368
04:02:47,040 --> 04:02:50,479
appends a list as an item to the cards

6369
04:02:50,479 --> 04:02:52,000
list

6370
04:02:52,000 --> 04:02:53,520
instead of appending

6371
04:02:53,520 --> 04:02:54,800
suit

6372
04:02:54,800 --> 04:02:56,399
comma rank

6373
04:02:56,399 --> 04:02:59,359
we'll create and append an instance of

6374
04:02:59,359 --> 04:03:01,199
the card class

6375
04:03:01,199 --> 04:03:02,880
then afterwards when a deck is created

6376
04:03:02,880 --> 04:03:04,960
it's filled with cards

6377
04:03:04,960 --> 04:03:06,160
so it's just like this we're just going

6378
04:03:06,160 --> 04:03:09,279
to delete that i'll put card

6379
04:03:09,279 --> 04:03:11,840
and then i'll pass in a suit and they

6380
04:03:11,840 --> 04:03:14,800
rank so now we're passing in

6381
04:03:14,800 --> 04:03:16,640
card instances

6382
04:03:16,640 --> 04:03:18,560
so we're done with the deck and card

6383
04:03:18,560 --> 04:03:21,520
classes and we created them in such a

6384
04:03:21,520 --> 04:03:23,520
way that they could basically be used

6385
04:03:23,520 --> 04:03:25,760
for any card game

6386
04:03:25,760 --> 04:03:28,479
now let's make a hand class

6387
04:03:28,479 --> 04:03:30,319
this will represent a hand in the game

6388
04:03:30,319 --> 04:03:32,960
of blackjack so create a hand class and

6389
04:03:32,960 --> 04:03:35,600
add an inet method and initialize a

6390
04:03:35,600 --> 04:03:38,319
variable called self.cards that is set

6391
04:03:38,319 --> 04:03:41,439
to an empty list so let's go down here

6392
04:03:41,439 --> 04:03:43,600
and we can also get rid of all this test

6393
04:03:43,600 --> 04:03:44,880
code here

6394
04:03:44,880 --> 04:03:48,720
so the new class is called hand

6395
04:03:49,120 --> 04:03:50,960
and we'll also make the hand keep track

6396
04:03:50,960 --> 04:03:53,439
of the value of the hands a self.value

6397
04:03:53,439 --> 04:03:56,560
will start it at zero

6398
04:03:56,960 --> 04:03:59,199
in this blackjack game there will be a

6399
04:03:59,199 --> 04:04:01,840
human controlled player and a program

6400
04:04:01,840 --> 04:04:04,560
controlled dealer so let's add a dealer

6401
04:04:04,560 --> 04:04:06,720
parameter in the init constructor method

6402
04:04:06,720 --> 04:04:08,080
of the hand class

6403
04:04:08,080 --> 04:04:09,760
and then when the hand classes create a

6404
04:04:09,760 --> 04:04:12,080
dealer should be set to true or false to

6405
04:04:12,080 --> 04:04:14,880
keep track of what type of hand it is

6406
04:04:14,880 --> 04:04:18,000
so i'll pass in the parameter dealer and

6407
04:04:18,000 --> 04:04:20,080
then we just have to create a variable

6408
04:04:20,080 --> 04:04:22,319
and call dealer and set it to dealer so

6409
04:04:22,319 --> 04:04:25,040
self dot dealer

6410
04:04:25,040 --> 04:04:26,230
equals dealer

6411
04:04:26,230 --> 04:04:27,439
[Music]

6412
04:04:27,439 --> 04:04:29,040
if you remember from before function

6413
04:04:29,040 --> 04:04:31,760
parameters can have default values so we

6414
04:04:31,760 --> 04:04:33,840
want to make it so the default value of

6415
04:04:33,840 --> 04:04:35,760
dealer is false

6416
04:04:35,760 --> 04:04:37,520
so then if

6417
04:04:37,520 --> 04:04:39,920
we create a hand and we don't set the

6418
04:04:39,920 --> 04:04:41,680
dealer value it will automatically be

6419
04:04:41,680 --> 04:04:42,960
false

6420
04:04:42,960 --> 04:04:43,920
and i'm just going to take out these

6421
04:04:43,920 --> 04:04:46,720
spaces here to make it smaller here

6422
04:04:46,720 --> 04:04:49,279
so now a hand can be created

6423
04:04:49,279 --> 04:04:51,040
let's give it some functionality we'll

6424
04:04:51,040 --> 04:04:53,600
add an add card method and the method

6425
04:04:53,600 --> 04:04:58,239
should take a card list as a parameter

6426
04:04:59,199 --> 04:05:02,160
and then we need to add that card list

6427
04:05:02,160 --> 04:05:04,239
to the cards

6428
04:05:04,239 --> 04:05:07,359
so we can use the extend function the

6429
04:05:07,359 --> 04:05:09,680
extend method to append each item in

6430
04:05:09,680 --> 04:05:12,399
card list onto the cards list so it's

6431
04:05:12,399 --> 04:05:14,359
just going to look like this self dot

6432
04:05:14,359 --> 04:05:18,720
cards dot append no extend i mean dot

6433
04:05:18,720 --> 04:05:20,080
extend

6434
04:05:20,080 --> 04:05:22,080
and then we pass in

6435
04:05:22,080 --> 04:05:23,840
card list

6436
04:05:23,840 --> 04:05:26,479
now let's just add some code to test out

6437
04:05:26,479 --> 04:05:28,840
what we have so far so let's create a

6438
04:05:28,840 --> 04:05:32,560
deck and then we will shuffle the deck

6439
04:05:32,560 --> 04:05:34,370
deck.shuffle

6440
04:05:34,370 --> 04:05:37,040
[Music]

6441
04:05:37,040 --> 04:05:40,000
now we'll create a hand

6442
04:05:40,560 --> 04:05:43,920
now we can add cards to the hand so hand

6443
04:05:43,920 --> 04:05:44,880
dot

6444
04:05:44,880 --> 04:05:46,399
add

6445
04:05:46,399 --> 04:05:48,800
card

6446
04:05:48,960 --> 04:05:52,080
and we will deck dot deal we'll deal two

6447
04:05:52,080 --> 04:05:54,880
cards into the hand

6448
04:05:54,880 --> 04:05:57,359
and then we'll just print

6449
04:05:57,359 --> 04:06:00,800
hand cards

6450
04:06:02,080 --> 04:06:04,080
okay so this is what how it printed out

6451
04:06:04,080 --> 04:06:06,560
i was expecting this to look a little

6452
04:06:06,560 --> 04:06:07,600
different

6453
04:06:07,600 --> 04:06:10,800
because of this function it print it

6454
04:06:10,800 --> 04:06:12,399
should print like that

6455
04:06:12,399 --> 04:06:14,399
but i think the reason is

6456
04:06:14,399 --> 04:06:15,359
because

6457
04:06:15,359 --> 04:06:17,920
this is a list so it's printing a list

6458
04:06:17,920 --> 04:06:20,239
not an individual card so let's change

6459
04:06:20,239 --> 04:06:22,560
this to print an individual card i'll

6460
04:06:22,560 --> 04:06:24,720
print the first card so put zero in

6461
04:06:24,720 --> 04:06:27,760
there i'll try it again nine of diamonds

6462
04:06:27,760 --> 04:06:31,600
and then we can also print the next card

6463
04:06:31,600 --> 04:06:33,680
three of hearts

6464
04:06:33,680 --> 04:06:35,680
and then we can also print both cards if

6465
04:06:35,680 --> 04:06:38,000
we just copy that and do

6466
04:06:38,000 --> 04:06:39,520
hand that cards

6467
04:06:39,520 --> 04:06:40,640
zero

6468
04:06:40,640 --> 04:06:42,239
handout cards

6469
04:06:42,239 --> 04:06:44,000
one

6470
04:06:44,000 --> 04:06:46,080
okay ace of hearts and nine of spades so

6471
04:06:46,080 --> 04:06:47,600
those are the two cards that were dealt

6472
04:06:47,600 --> 04:06:48,720
to the hand

6473
04:06:48,720 --> 04:06:51,600
now we'll go back to the hand class and

6474
04:06:51,600 --> 04:06:53,920
we'll add the ability to calculate the

6475
04:06:53,920 --> 04:06:56,560
value of a hand so let's add a method

6476
04:06:56,560 --> 04:06:58,640
called calculate value

6477
04:06:58,640 --> 04:07:00,800
and inside the method we'll set

6478
04:07:00,800 --> 04:07:04,479
self.value to zero

6479
04:07:05,120 --> 04:07:07,600
now we'll take this one step at a time

6480
04:07:07,600 --> 04:07:09,520
first let's let's make a for loop that's

6481
04:07:09,520 --> 04:07:12,319
going to go through every single card

6482
04:07:12,319 --> 04:07:15,199
and inside the for loop we'll just set

6483
04:07:15,199 --> 04:07:16,560
the value

6484
04:07:16,560 --> 04:07:19,840
of the card to a variable called card

6485
04:07:19,840 --> 04:07:24,960
underscore value so i'll do four card

6486
04:07:24,960 --> 04:07:28,439
and self.cards

6487
04:07:28,479 --> 04:07:30,239
okay so we're not doing anything with

6488
04:07:30,239 --> 04:07:32,160
that yet but we're going to in a second

6489
04:07:32,160 --> 04:07:32,960
here

6490
04:07:32,960 --> 04:07:35,680
now we want to make sure that this is an

6491
04:07:35,680 --> 04:07:36,479
integer

6492
04:07:36,479 --> 04:07:38,960
so let's convert that to an integer if

6493
04:07:38,960 --> 04:07:40,960
you remember you just use int

6494
04:07:40,960 --> 04:07:43,840
[Music]

6495
04:07:43,840 --> 04:07:45,760
and then put it in print int and then

6496
04:07:45,760 --> 04:07:48,800
inside the parentheses we put this value

6497
04:07:48,800 --> 04:07:50,640
not just getting the card value for each

6498
04:07:50,640 --> 04:07:52,399
card is not enough something must be

6499
04:07:52,399 --> 04:07:56,000
done with the variable so let's add that

6500
04:07:56,000 --> 04:07:57,120
value

6501
04:07:57,120 --> 04:07:58,239
to

6502
04:07:58,239 --> 04:08:01,120
self.value

6503
04:08:01,120 --> 04:08:03,680
so we'll do self

6504
04:08:03,680 --> 04:08:05,040
dot value

6505
04:08:05,040 --> 04:08:06,800
and then if you remember from before we

6506
04:08:06,800 --> 04:08:09,680
can use the plus equals to

6507
04:08:09,680 --> 04:08:11,680
add that to the current value those will

6508
04:08:11,680 --> 04:08:13,520
do a card

6509
04:08:13,520 --> 04:08:15,040
value

6510
04:08:15,040 --> 04:08:17,359
so as you may know in blackjack and ace

6511
04:08:17,359 --> 04:08:20,479
can have the value of either 11 or 1

6512
04:08:20,479 --> 04:08:22,319
depending on what is better for the

6513
04:08:22,319 --> 04:08:24,159
player so there's a few ways to

6514
04:08:24,159 --> 04:08:26,479
implement that in code so we're going to

6515
04:08:26,479 --> 04:08:29,279
do one way that's relatively simple

6516
04:08:29,279 --> 04:08:32,319
first we'll check if the hand has an ace

6517
04:08:32,319 --> 04:08:33,840
so let's first create a variable that

6518
04:08:33,840 --> 04:08:36,159
will store whether the

6519
04:08:36,159 --> 04:08:38,560
hand has an a so just be called hand has

6520
04:08:38,560 --> 04:08:41,040
underscore ace we'll set to false and

6521
04:08:41,040 --> 04:08:42,800
we'll put it right under here

6522
04:08:42,800 --> 04:08:44,000
so we'll do

6523
04:08:44,000 --> 04:08:48,319
has ace and we'll set to false and since

6524
04:08:48,319 --> 04:08:50,640
we're only going to be using has ace

6525
04:08:50,640 --> 04:08:51,680
within

6526
04:08:51,680 --> 04:08:52,560
this

6527
04:08:52,560 --> 04:08:54,880
method we don't need to use self that

6528
04:08:54,880 --> 04:08:58,479
has ace because we're only using it here

6529
04:08:58,479 --> 04:09:00,720
and now when we're going through the the

6530
04:09:00,720 --> 04:09:03,439
list of cards let's check if the the

6531
04:09:03,439 --> 04:09:05,600
rank of a card is an ace and then set

6532
04:09:05,600 --> 04:09:07,920
has aced equals true

6533
04:09:07,920 --> 04:09:09,279
so i'll do it

6534
04:09:09,279 --> 04:09:11,199
if

6535
04:09:11,199 --> 04:09:14,319
card dot rank

6536
04:09:14,319 --> 04:09:16,720
the rank is going to be equal double

6537
04:09:16,720 --> 04:09:20,560
equal sign if it equals ace

6538
04:09:20,960 --> 04:09:23,600
after this entire for loop

6539
04:09:23,600 --> 04:09:25,840
we're going to check if the card has an

6540
04:09:25,840 --> 04:09:26,720
ace

6541
04:09:26,720 --> 04:09:30,239
and if the value is over 21

6542
04:09:30,239 --> 04:09:32,640
if so then we'll just subtract 10 from

6543
04:09:32,640 --> 04:09:33,840
the value

6544
04:09:33,840 --> 04:09:36,000
because that'll be the same as setting

6545
04:09:36,000 --> 04:09:39,040
the ace to equal one instead of 11.

6546
04:09:39,040 --> 04:09:41,439
so we'll just do if has

6547
04:09:41,439 --> 04:09:43,840
ace

6548
04:09:44,080 --> 04:09:46,399
and

6549
04:09:46,560 --> 04:09:49,560
self.value

6550
04:09:50,319 --> 04:09:54,159
is greater than 21

6551
04:09:54,159 --> 04:09:56,880
to self.value

6552
04:09:56,880 --> 04:09:59,040
minus equals

6553
04:09:59,040 --> 04:10:00,640
10.

6554
04:10:00,640 --> 04:10:02,159
okay and look at this this is something

6555
04:10:02,159 --> 04:10:04,880
i don't think i've discussed yet

6556
04:10:04,880 --> 04:10:07,040
you could say if has

6557
04:10:07,040 --> 04:10:10,159
equals true and self.value is greater

6558
04:10:10,159 --> 04:10:11,520
than 21.

6559
04:10:11,520 --> 04:10:14,159
but you can also it's like a shorthand

6560
04:10:14,159 --> 04:10:16,720
you don't have to say if has ace equals

6561
04:10:16,720 --> 04:10:17,760
true

6562
04:10:17,760 --> 04:10:19,920
if has a because has ace is just going

6563
04:10:19,920 --> 04:10:21,840
to equal true or false you can just say

6564
04:10:21,840 --> 04:10:23,840
if has ace so that's just the same as

6565
04:10:23,840 --> 04:10:26,720
saying if true or if false

6566
04:10:26,720 --> 04:10:29,040
and so we're seeing if both of these

6567
04:10:29,040 --> 04:10:32,239
evaluate the true then we will subtract

6568
04:10:32,239 --> 04:10:34,880
10 from the value okay now we'll just

6569
04:10:34,880 --> 04:10:37,439
add another method to get the value of a

6570
04:10:37,439 --> 04:10:40,159
hand called getvalue and the function

6571
04:10:40,159 --> 04:10:42,560
will just return self.value

6572
04:10:42,560 --> 04:10:44,720
so we're going to make sure that we're

6573
04:10:44,720 --> 04:10:47,600
not we're indented correctly and do def

6574
04:10:47,600 --> 04:10:49,120
get

6575
04:10:49,120 --> 04:10:52,000
value

6576
04:10:52,000 --> 04:10:53,279
return

6577
04:10:53,279 --> 04:10:54,319
self

6578
04:10:54,319 --> 04:10:57,120
dot value

6579
04:10:57,359 --> 04:10:58,880
and then i have to make sure i put the

6580
04:10:58,880 --> 04:11:01,520
parentheses here

6581
04:11:01,520 --> 04:11:03,680
and then i have to remember to put self

6582
04:11:03,680 --> 04:11:06,159
since this is a self.value we could call

6583
04:11:06,159 --> 04:11:08,239
down here like we could call

6584
04:11:08,239 --> 04:11:09,120
hand

6585
04:11:09,120 --> 04:11:12,479
value to get the value but it's

6586
04:11:12,479 --> 04:11:14,319
generally better to make a function to

6587
04:11:14,319 --> 04:11:16,960
return the value so i can do get

6588
04:11:16,960 --> 04:11:20,159
value that way there may be some extra

6589
04:11:20,159 --> 04:11:22,000
code you want to run in there like

6590
04:11:22,000 --> 04:11:24,319
depending on different conditions

6591
04:11:24,319 --> 04:11:27,040
you may want to modify the value before

6592
04:11:27,040 --> 04:11:28,800
you return it

6593
04:11:28,800 --> 04:11:31,840
so it's best practice to create a method

6594
04:11:31,840 --> 04:11:36,479
that will get a value like this for you

6595
04:11:37,760 --> 04:11:40,800
so currently this value that's returned

6596
04:11:40,800 --> 04:11:42,960
could be incorrect

6597
04:11:42,960 --> 04:11:44,479
because

6598
04:11:44,479 --> 04:11:46,880
if someone's going to get the value the

6599
04:11:46,880 --> 04:11:49,120
value has to be calculated correctly

6600
04:11:49,120 --> 04:11:51,600
first and like checking for aces and and

6601
04:11:51,600 --> 04:11:54,319
other things so let's call

6602
04:11:54,319 --> 04:11:56,159
let's calculate the value before we

6603
04:11:56,159 --> 04:11:59,199
return the value so i'm going to do self

6604
04:11:59,199 --> 04:12:02,560
dot calculate value so

6605
04:12:02,560 --> 04:12:05,120
this is something that i think is new

6606
04:12:05,120 --> 04:12:08,080
where to call calculate value from

6607
04:12:08,080 --> 04:12:10,080
within this we're going to have to call

6608
04:12:10,080 --> 04:12:12,319
self.calculatevalue

6609
04:12:12,319 --> 04:12:15,279
and self will refer to the instance that

6610
04:12:15,279 --> 04:12:16,640
we're working with so we're calling the

6611
04:12:16,640 --> 04:12:20,319
calculate value on the instance that's

6612
04:12:20,319 --> 04:12:22,720
that is the the hand instance and we're

6613
04:12:22,720 --> 04:12:23,840
getting the value and then we're

6614
04:12:23,840 --> 04:12:26,159
returning the value

6615
04:12:26,159 --> 04:12:28,399
okay let's create another method called

6616
04:12:28,399 --> 04:12:31,279
is blackjack and it'll return true if

6617
04:12:31,279 --> 04:12:34,560
there's a blackjack and false otherwise

6618
04:12:34,560 --> 04:12:39,120
so it's a blackjack if the value is 21.

6619
04:12:39,120 --> 04:12:40,960
so i'm gonna do

6620
04:12:40,960 --> 04:12:41,920
def

6621
04:12:41,920 --> 04:12:45,600
get or is

6622
04:12:45,600 --> 04:12:48,080
oh and put self here

6623
04:12:48,080 --> 04:12:50,640
okay so this is going to evaluate you to

6624
04:12:50,640 --> 04:12:53,040
either true or false and return true or

6625
04:12:53,040 --> 04:12:54,399
false depending on whether there's a

6626
04:12:54,399 --> 04:12:55,520
blackjack

6627
04:12:55,520 --> 04:12:57,279
now we'll create the final method in the

6628
04:12:57,279 --> 04:12:59,359
hand class that will display information

6629
04:12:59,359 --> 04:13:01,120
about the hand so let's create a method

6630
04:13:01,120 --> 04:13:03,120
called display they'll

6631
04:13:03,120 --> 04:13:06,440
to start with will just print your hand

6632
04:13:06,440 --> 04:13:08,560
[Music]

6633
04:13:08,560 --> 04:13:10,159
okay now let's do a quick refactor

6634
04:13:10,159 --> 04:13:12,960
instead of saying your hand it should

6635
04:13:12,960 --> 04:13:17,439
either say dealer's hand or your hand

6636
04:13:17,439 --> 04:13:20,080
depending on whether

6637
04:13:20,080 --> 04:13:21,840
self.dealer

6638
04:13:21,840 --> 04:13:22,560
is

6639
04:13:22,560 --> 04:13:23,840
true or not

6640
04:13:23,840 --> 04:13:26,800
so we're going to you to to do this all

6641
04:13:26,800 --> 04:13:29,600
in one line we're going to use a few

6642
04:13:29,600 --> 04:13:32,479
things that we learned about earlier

6643
04:13:32,479 --> 04:13:33,680
including

6644
04:13:33,680 --> 04:13:35,439
ternary operators

6645
04:13:35,439 --> 04:13:38,720
f strings and going between double

6646
04:13:38,720 --> 04:13:41,760
quotes and single quotes and then one

6647
04:13:41,760 --> 04:13:44,560
other new thing we are going to make

6648
04:13:44,560 --> 04:13:47,279
this into an f string

6649
04:13:47,279 --> 04:13:50,720
and then we are going to be using

6650
04:13:50,720 --> 04:13:51,760
actually

6651
04:13:51,760 --> 04:13:54,560
single quotes and double quotes within

6652
04:13:54,560 --> 04:13:56,960
this f string so if you want to use

6653
04:13:56,960 --> 04:13:59,520
single quotes and double quotes within a

6654
04:13:59,520 --> 04:14:00,720
string

6655
04:14:00,720 --> 04:14:04,080
then you can surround it with a triple

6656
04:14:04,080 --> 04:14:07,199
single quote so i'm going to delete this

6657
04:14:07,199 --> 04:14:09,920
quote and just do three single quotes

6658
04:14:09,920 --> 04:14:12,000
and then delete this quote and do three

6659
04:14:12,000 --> 04:14:14,720
single quotes and so

6660
04:14:14,720 --> 04:14:16,000
we got the

6661
04:14:16,000 --> 04:14:17,439
double quote

6662
04:14:17,439 --> 04:14:20,319
single quote and now this is a triple

6663
04:14:20,319 --> 04:14:22,640
quote so now we can use the double quote

6664
04:14:22,640 --> 04:14:25,680
and single quotes within this string

6665
04:14:25,680 --> 04:14:28,720
so i'm going to um i'm just going to

6666
04:14:28,720 --> 04:14:31,520
delete your right here and we are going

6667
04:14:31,520 --> 04:14:32,560
to

6668
04:14:32,560 --> 04:14:35,040
put a ternary operator to see if it's

6669
04:14:35,040 --> 04:14:37,279
going to say dealers or yours in the

6670
04:14:37,279 --> 04:14:40,159
dealer's hand or your hand so

6671
04:14:40,159 --> 04:14:42,319
to do some code i'm going to put these

6672
04:14:42,319 --> 04:14:44,239
curly braces here

6673
04:14:44,239 --> 04:14:46,479
and then to do this ternary operator

6674
04:14:46,479 --> 04:14:49,520
we're going to put dealer

6675
04:14:49,520 --> 04:14:51,359
and now here so here's the double quote

6676
04:14:51,359 --> 04:14:54,159
and here's the single quote so dealers

6677
04:14:54,159 --> 04:14:55,359
it will

6678
04:14:55,359 --> 04:14:56,960
return dealers

6679
04:14:56,960 --> 04:14:58,159
if

6680
04:14:58,159 --> 04:15:01,159
self.dealer

6681
04:15:01,279 --> 04:15:04,960
so basically if self.dealer equals true

6682
04:15:04,960 --> 04:15:08,880
so return dealers if self.dealer

6683
04:15:08,880 --> 04:15:10,880
else will return

6684
04:15:10,880 --> 04:15:13,120
your

6685
04:15:13,120 --> 04:15:15,680
okay that's the line so it's going to be

6686
04:15:15,680 --> 04:15:18,399
the dealer's hand or your hand and next

6687
04:15:18,399 --> 04:15:21,439
we will add a for loop that will print

6688
04:15:21,439 --> 04:15:24,159
out each of the cards

6689
04:15:24,159 --> 04:15:25,279
so

6690
04:15:25,279 --> 04:15:29,760
for card and self.cards

6691
04:15:29,760 --> 04:15:31,359
print

6692
04:15:31,359 --> 04:15:32,960
card

6693
04:15:32,960 --> 04:15:34,720
and then finally if the player is not

6694
04:15:34,720 --> 04:15:37,920
the dealer it should print value

6695
04:15:37,920 --> 04:15:39,760
and then a colon and then print the

6696
04:15:39,760 --> 04:15:42,000
value of the cards so to do this we can

6697
04:15:42,000 --> 04:15:44,880
actually use the the not operator so

6698
04:15:44,880 --> 04:15:46,399
if not

6699
04:15:46,399 --> 04:15:47,750
self.dealer

6700
04:15:47,750 --> 04:15:50,860
[Music]

6701
04:15:51,600 --> 04:15:54,080
then we will print

6702
04:15:54,080 --> 04:15:56,800
and we'll print value

6703
04:15:56,800 --> 04:15:59,199
value

6704
04:15:59,199 --> 04:16:01,120
and then i can just put a comma to print

6705
04:16:01,120 --> 04:16:02,960
two different items so the string and

6706
04:16:02,960 --> 04:16:05,199
it'll print self dot get

6707
04:16:05,199 --> 04:16:07,120
value

6708
04:16:07,120 --> 04:16:09,279
and it's gonna when you put a comma and

6709
04:16:09,279 --> 04:16:10,560
two different things it's gonna put a

6710
04:16:10,560 --> 04:16:12,000
space in between

6711
04:16:12,000 --> 04:16:14,000
and then finally we'll just add an empty

6712
04:16:14,000 --> 04:16:16,080
a print statement that will print a

6713
04:16:16,080 --> 04:16:18,720
blank line

6714
04:16:18,720 --> 04:16:21,439
okay let's test this out by

6715
04:16:21,439 --> 04:16:24,000
instead of printing this we are going to

6716
04:16:24,000 --> 04:16:25,199
print

6717
04:16:25,199 --> 04:16:26,479
hand

6718
04:16:26,479 --> 04:16:28,800
dot display

6719
04:16:28,800 --> 04:16:31,600
to see if this all works how we thought

6720
04:16:31,600 --> 04:16:33,359
it was going to work

6721
04:16:33,359 --> 04:16:36,880
so your hand k of spades two of spades

6722
04:16:36,880 --> 04:16:38,560
value is 12. so it's actually

6723
04:16:38,560 --> 04:16:39,920
calculating that correctly because

6724
04:16:39,920 --> 04:16:42,640
that's 10 plus 2 is 12 and then it's

6725
04:16:42,640 --> 04:16:44,960
going to print none which indicates that

6726
04:16:44,960 --> 04:16:46,640
we did something wrong which is that we

6727
04:16:46,640 --> 04:16:49,439
did not need to print this because hand

6728
04:16:49,439 --> 04:16:52,479
display display already prints so now

6729
04:16:52,479 --> 04:16:54,720
just call hand.display

6730
04:16:54,720 --> 04:16:57,199
okay so now it doesn't put none or

6731
04:16:57,199 --> 04:16:58,640
doesn't yeah it doesn't put none at the

6732
04:16:58,640 --> 04:17:01,199
end so that looks right

6733
04:17:01,199 --> 04:17:03,279
okay when you're playing blackjack you

6734
04:17:03,279 --> 04:17:04,800
don't get to see

6735
04:17:04,800 --> 04:17:06,800
everyone else's cards

6736
04:17:06,800 --> 04:17:07,600
so

6737
04:17:07,600 --> 04:17:09,680
we're going to update this so when the

6738
04:17:09,680 --> 04:17:11,760
dealer's cards are printed during the

6739
04:17:11,760 --> 04:17:12,720
game

6740
04:17:12,720 --> 04:17:15,840
only the second one should display

6741
04:17:15,840 --> 04:17:19,359
the first card should display as hidden

6742
04:17:19,359 --> 04:17:22,880
so in this for loop

6743
04:17:22,880 --> 04:17:25,359
when we're displaying the cards

6744
04:17:25,359 --> 04:17:27,920
we're going to need to get access to the

6745
04:17:27,920 --> 04:17:30,640
card index since that will determine

6746
04:17:30,640 --> 04:17:32,399
which to display

6747
04:17:32,399 --> 04:17:33,600
since we're only going to display the

6748
04:17:33,600 --> 04:17:34,880
second card

6749
04:17:34,880 --> 04:17:37,439
so let's start by updating this for loop

6750
04:17:37,439 --> 04:17:40,080
so we can get access to both the card

6751
04:17:40,080 --> 04:17:42,640
and the card index

6752
04:17:42,640 --> 04:17:44,399
we briefly touched on this earlier in

6753
04:17:44,399 --> 04:17:46,000
the course we're going to be using the

6754
04:17:46,000 --> 04:17:47,760
enumerate function

6755
04:17:47,760 --> 04:17:48,880
so

6756
04:17:48,880 --> 04:17:50,800
when it's for card in

6757
04:17:50,800 --> 04:17:53,600
and now i'm going to type in enumerate

6758
04:17:53,600 --> 04:17:56,800
and i'm going to pass in self.cards

6759
04:17:56,800 --> 04:17:59,680
and this is going to return the index

6760
04:17:59,680 --> 04:18:01,600
and the card for each card so i'm going

6761
04:18:01,600 --> 04:18:03,359
to type it index

6762
04:18:03,359 --> 04:18:04,800
comma

6763
04:18:04,800 --> 04:18:07,760
and so

6764
04:18:07,760 --> 04:18:10,560
in we're getting the index and the card

6765
04:18:10,560 --> 04:18:13,680
for all the items in self.cards

6766
04:18:13,680 --> 04:18:16,000
and so now we just have to update what's

6767
04:18:16,000 --> 04:18:17,600
in the for loop

6768
04:18:17,600 --> 04:18:19,439
to print

6769
04:18:19,439 --> 04:18:20,560
hidden

6770
04:18:20,560 --> 04:18:23,680
if it's the first card and it's a dealer

6771
04:18:23,680 --> 04:18:25,439
so we'll do

6772
04:18:25,439 --> 04:18:27,760
if index

6773
04:18:27,760 --> 04:18:32,520
equals zero and self.dealer

6774
04:18:33,760 --> 04:18:34,640
then

6775
04:18:34,640 --> 04:18:37,600
we will print

6776
04:18:38,080 --> 04:18:40,479
hidden

6777
04:18:41,040 --> 04:18:43,120
and then we can use an else

6778
04:18:43,120 --> 04:18:45,279
any other time

6779
04:18:45,279 --> 04:18:46,640
and let's make sure this lines up

6780
04:18:46,640 --> 04:18:48,880
correctly any other time we will print

6781
04:18:48,880 --> 04:18:49,920
the card

6782
04:18:49,920 --> 04:18:51,359
so

6783
04:18:51,359 --> 04:18:52,880
what we did wrong here is this should be

6784
04:18:52,880 --> 04:18:56,000
double equal sign i did almost did the

6785
04:18:56,000 --> 04:18:57,920
the main mistake you always have to

6786
04:18:57,920 --> 04:19:00,800
watch out never use a single equal sign

6787
04:19:00,800 --> 04:19:03,760
when you're checking equality

6788
04:19:03,760 --> 04:19:05,439
because that's the single equal sign is

6789
04:19:05,439 --> 04:19:07,600
the assignment operator so if index

6790
04:19:07,600 --> 04:19:09,680
equals zero and self and we it is the

6791
04:19:09,680 --> 04:19:11,520
dealer then we'll print hidden

6792
04:19:11,520 --> 04:19:13,439
so in our version of the game at the end

6793
04:19:13,439 --> 04:19:14,720
of the game

6794
04:19:14,720 --> 04:19:17,040
that all the dealer's cards will be

6795
04:19:17,040 --> 04:19:20,239
shown so you can see what the dealer had

6796
04:19:20,239 --> 04:19:23,199
so to do that we're going to create a

6797
04:19:23,199 --> 04:19:25,279
new parameter in this

6798
04:19:25,279 --> 04:19:27,359
display method and it's going to be

6799
04:19:27,359 --> 04:19:30,479
called show all dealer cards with

6800
04:19:30,479 --> 04:19:32,239
underscores for spaces and we're going

6801
04:19:32,239 --> 04:19:35,520
to set the default value to false

6802
04:19:35,520 --> 04:19:36,640
show

6803
04:19:36,640 --> 04:19:37,760
all

6804
04:19:37,760 --> 04:19:39,279
dealer

6805
04:19:39,279 --> 04:19:40,479
cards

6806
04:19:40,479 --> 04:19:42,239
and when the default value is going to

6807
04:19:42,239 --> 04:19:43,680
be false

6808
04:19:43,680 --> 04:19:48,239
now we'll add it to this if statement

6809
04:19:48,800 --> 04:19:49,760
so

6810
04:19:49,760 --> 04:19:51,040
we'll add another

6811
04:19:51,040 --> 04:19:52,479
and

6812
04:19:52,479 --> 04:19:53,359
not

6813
04:19:53,359 --> 04:19:55,040
show

6814
04:19:55,040 --> 04:19:56,159
all

6815
04:19:56,159 --> 04:19:58,399
dealer cards

6816
04:19:58,399 --> 04:20:00,000
so

6817
04:20:00,000 --> 04:20:02,399
it's going to be hidden if we're not

6818
04:20:02,399 --> 04:20:04,399
showing all the dealer cards

6819
04:20:04,399 --> 04:20:06,080
but if we are showing all the dealer

6820
04:20:06,080 --> 04:20:08,319
cards then this whole if statement will

6821
04:20:08,319 --> 04:20:11,520
be false so we'll just print the card

6822
04:20:11,520 --> 04:20:13,600
and there's going to be one other

6823
04:20:13,600 --> 04:20:17,279
scenario where we're not going to print

6824
04:20:17,279 --> 04:20:19,199
hidden if there's a blackjack then the

6825
04:20:19,199 --> 04:20:21,199
game is over the person with the

6826
04:20:21,199 --> 04:20:23,760
blackjack is just going to win and then

6827
04:20:23,760 --> 04:20:26,560
we'll just print all the cards so we're

6828
04:20:26,560 --> 04:20:28,479
going to add that to this long if

6829
04:20:28,479 --> 04:20:30,880
statement here so we'll say

6830
04:20:30,880 --> 04:20:33,600
and not is

6831
04:20:33,600 --> 04:20:35,920
black jack

6832
04:20:35,920 --> 04:20:37,840
and it should be

6833
04:20:37,840 --> 04:20:41,680
self dot is blackjack to be able to call

6834
04:20:41,680 --> 04:20:43,359
this method here

6835
04:20:43,359 --> 04:20:45,760
and since this is such a long line is

6836
04:20:45,760 --> 04:20:47,840
always going to go to this next line we

6837
04:20:47,840 --> 04:20:50,560
can do this special thing

6838
04:20:50,560 --> 04:20:53,680
we can add a slash here

6839
04:20:53,680 --> 04:20:56,239
and then just go to the next line

6840
04:20:56,239 --> 04:20:57,040
so

6841
04:20:57,040 --> 04:20:59,520
this slash or it's a backslash i mean

6842
04:20:59,520 --> 04:21:01,359
this backslash will indicate that the

6843
04:21:01,359 --> 04:21:05,120
line continues on the following line

6844
04:21:05,120 --> 04:21:07,439
okay we're done creating the hand class

6845
04:21:07,439 --> 04:21:09,199
so we'll delete

6846
04:21:09,199 --> 04:21:10,640
everything that we were using for

6847
04:21:10,640 --> 04:21:12,880
testing before

6848
04:21:12,880 --> 04:21:15,279
okay it's time to code the final and

6849
04:21:15,279 --> 04:21:18,239
longest class that runs the game so what

6850
04:21:18,239 --> 04:21:20,080
i want you to do is create a class

6851
04:21:20,080 --> 04:21:22,640
called game and inside the class create

6852
04:21:22,640 --> 04:21:25,199
a method called play and inside the

6853
04:21:25,199 --> 04:21:27,600
method create a variable called

6854
04:21:27,600 --> 04:21:30,239
gamenumber with the underscore for the

6855
04:21:30,239 --> 04:21:31,199
space

6856
04:21:31,199 --> 04:21:36,479
and set that to zero so class game

6857
04:21:36,479 --> 04:21:38,159
and then we'll create another variable

6858
04:21:38,159 --> 04:21:41,600
games to play and set that to zero

6859
04:21:41,600 --> 04:21:44,319
now we're going to set games to play

6860
04:21:44,319 --> 04:21:47,680
to be whatever the user inputs

6861
04:21:47,680 --> 04:21:49,520
after they're asked how many games do

6862
04:21:49,520 --> 04:21:51,040
you want to play

6863
04:21:51,040 --> 04:21:53,600
so you may remember how to do

6864
04:21:53,600 --> 04:21:55,439
input from before

6865
04:21:55,439 --> 04:21:58,479
so we just do input

6866
04:21:58,479 --> 04:22:00,560
now we want to make sure the games to

6867
04:22:00,560 --> 04:22:02,319
play is an end so we just need to

6868
04:22:02,319 --> 04:22:05,840
convert this to an end

6869
04:22:06,330 --> 04:22:08,159
[Music]

6870
04:22:08,159 --> 04:22:11,120
okay now let's test things so far so at

6871
04:22:11,120 --> 04:22:13,840
the end i will put g equals game i'm

6872
04:22:13,840 --> 04:22:15,680
going to create a new game

6873
04:22:15,680 --> 04:22:19,840
and then g dot play

6874
04:22:20,640 --> 04:22:24,000
okay let's test this

6875
04:22:25,760 --> 04:22:28,000
how many games you want to play

6876
04:22:28,000 --> 04:22:29,600
five

6877
04:22:29,600 --> 04:22:30,960
okay well it's not going to play the

6878
04:22:30,960 --> 04:22:32,800
games yet we still have to create that

6879
04:22:32,800 --> 04:22:35,359
so there is a potential for an error

6880
04:22:35,359 --> 04:22:37,040
here if i do this again and i just put

6881
04:22:37,040 --> 04:22:39,359
how many games i put you or some letter

6882
04:22:39,359 --> 04:22:41,439
we're going to get an error

6883
04:22:41,439 --> 04:22:43,199
so basically anytime someone puts

6884
04:22:43,199 --> 04:22:45,600
something that's not a number is going

6885
04:22:45,600 --> 04:22:46,960
to be an error

6886
04:22:46,960 --> 04:22:50,239
so let's create a try accept block to

6887
04:22:50,239 --> 04:22:52,560
handle the exception

6888
04:22:52,560 --> 04:22:53,760
and

6889
04:22:53,760 --> 04:22:55,199
if they put something that's not a

6890
04:22:55,199 --> 04:22:56,479
number we'll

6891
04:22:56,479 --> 04:22:59,199
print you must enter a number so let me

6892
04:22:59,199 --> 04:23:01,359
arrange this and we've already learned a

6893
04:23:01,359 --> 04:23:03,439
little bit about try except blocks i'm

6894
04:23:03,439 --> 04:23:05,760
going to put try

6895
04:23:05,760 --> 04:23:09,520
and it's going to try this

6896
04:23:09,520 --> 04:23:11,920
and then if that doesn't work if there's

6897
04:23:11,920 --> 04:23:13,080
an exception

6898
04:23:13,080 --> 04:23:14,640
[Music]

6899
04:23:14,640 --> 04:23:16,340
it will print

6900
04:23:16,340 --> 04:23:19,040
[Music]

6901
04:23:19,040 --> 04:23:22,720
you must enter a number

6902
04:23:22,720 --> 04:23:25,040
so currently the user gets only one

6903
04:23:25,040 --> 04:23:27,600
chance to input a correct value let's

6904
04:23:27,600 --> 04:23:29,760
make the program keep asking the user

6905
04:23:29,760 --> 04:23:31,600
for a value until the user enters a

6906
04:23:31,600 --> 04:23:33,760
number this can be done with a while

6907
04:23:33,760 --> 04:23:35,840
loop the while loop just keeps looping

6908
04:23:35,840 --> 04:23:38,159
while something is true so keep looping

6909
04:23:38,159 --> 04:23:40,159
until the user enters a number by

6910
04:23:40,159 --> 04:23:43,279
putting the entire tri-catch block into

6911
04:23:43,279 --> 04:23:45,520
a while loop that keeps looping while

6912
04:23:45,520 --> 04:23:47,680
the game's a play is less than or equal

6913
04:23:47,680 --> 04:23:49,530
to zero

6914
04:23:49,530 --> 04:23:51,760
[Music]

6915
04:23:51,760 --> 04:23:54,399
oh and i have to make sure i spell

6916
04:23:54,399 --> 04:23:56,960
while correctly

6917
04:23:56,960 --> 04:23:59,520
okay now let's create the main game loop

6918
04:23:59,520 --> 04:24:01,600
this is a new loop that will loop one

6919
04:24:01,600 --> 04:24:04,479
time per game played it should loop

6920
04:24:04,479 --> 04:24:07,120
while game number is less than games to

6921
04:24:07,120 --> 04:24:09,040
play and the first line of loop should

6922
04:24:09,040 --> 04:24:12,960
increment the game number by one

6923
04:24:14,720 --> 04:24:16,239
inside the loop we'll create a deck

6924
04:24:16,239 --> 04:24:19,359
object in a deck variable and shuffle

6925
04:24:19,359 --> 04:24:21,680
the deck

6926
04:24:21,680 --> 04:24:23,199
now we'll create a variable called

6927
04:24:23,199 --> 04:24:27,040
playerhand and set it to a hand object

6928
04:24:27,040 --> 04:24:28,640
and then we'll create a variable called

6929
04:24:28,640 --> 04:24:31,199
dealerhand and set it to a hand object

6930
04:24:31,199 --> 04:24:33,120
but this time we'll make sure to specify

6931
04:24:33,120 --> 04:24:36,800
that dealer equals true

6932
04:24:36,960 --> 04:24:38,399
okay this next part will be a little

6933
04:24:38,399 --> 04:24:41,120
more complicated we'll create a for loop

6934
04:24:41,120 --> 04:24:44,000
that loops two times and each iteration

6935
04:24:44,000 --> 04:24:46,000
should add a card to the player's hand

6936
04:24:46,000 --> 04:24:48,159
that is dealt from the deck and add a

6937
04:24:48,159 --> 04:24:50,399
card to the dealer's hand that is also

6938
04:24:50,399 --> 04:24:52,400
dealt from the deck

6939
04:24:52,400 --> 04:24:55,439
[Music]

6940
04:24:55,439 --> 04:24:58,720
okay we just dealt two cards each player

6941
04:24:58,720 --> 04:25:00,239
now information is going to be printed

6942
04:25:00,239 --> 04:25:02,080
to the console for each game so let's

6943
04:25:02,080 --> 04:25:05,199
start by printing an empty line

6944
04:25:05,199 --> 04:25:08,239
now we'll print an asterisk 30 times to

6945
04:25:08,239 --> 04:25:10,239
make a divider

6946
04:25:10,239 --> 04:25:12,640
there's a trick to printing something a

6947
04:25:12,640 --> 04:25:16,000
lot of times so i can put an asterisk

6948
04:25:16,000 --> 04:25:18,840
in in quotation marks and then just do

6949
04:25:18,840 --> 04:25:21,199
times 30.

6950
04:25:21,199 --> 04:25:23,439
so it's going to print it 30 times now

6951
04:25:23,439 --> 04:25:25,439
we'll print the current game number out

6952
04:25:25,439 --> 04:25:27,600
of the total number of games

6953
04:25:27,600 --> 04:25:32,399
so it'll be something like game 4 of 10

6954
04:25:33,520 --> 04:25:36,720
and we'll use an f string

6955
04:25:36,720 --> 04:25:38,399
and then we'll just print 30 more

6956
04:25:38,399 --> 04:25:40,960
asterisks

6957
04:25:42,479 --> 04:25:46,319
now we'll display the player's hand

6958
04:25:46,319 --> 04:25:49,199
and then the dealer's hand

6959
04:25:49,199 --> 04:25:50,800
at this point in the game someone could

6960
04:25:50,800 --> 04:25:53,199
already have won if they got a blackjack

6961
04:25:53,199 --> 04:25:54,800
the code should check if there's a

6962
04:25:54,800 --> 04:25:56,560
winner let's put the code to check if

6963
04:25:56,560 --> 04:25:58,080
there's a winner in a separate method of

6964
04:25:58,080 --> 04:26:00,800
the game class so create a method called

6965
04:26:00,800 --> 04:26:03,520
check winner for now the method should

6966
04:26:03,520 --> 04:26:06,560
just return false

6967
04:26:06,720 --> 04:26:08,399
and just make sure everything's indented

6968
04:26:08,399 --> 04:26:10,239
correctly this should be less indented

6969
04:26:10,239 --> 04:26:12,399
than the previous line here

6970
04:26:12,399 --> 04:26:14,399
the check winner function should take

6971
04:26:14,399 --> 04:26:16,560
the playerhand and dealer hand as

6972
04:26:16,560 --> 04:26:19,279
arguments

6973
04:26:20,319 --> 04:26:23,120
now before this return statement

6974
04:26:23,120 --> 04:26:24,680
we're going to check if

6975
04:26:24,680 --> 04:26:27,760
playerhand.getvalue is greater than 21.

6976
04:26:27,760 --> 04:26:30,479
if so we'll print you busted dealer wins

6977
04:26:30,479 --> 04:26:32,800
and then return true and remember once

6978
04:26:32,800 --> 04:26:34,880
the program gets to a return statement

6979
04:26:34,880 --> 04:26:36,399
none of the following statements in the

6980
04:26:36,399 --> 04:26:38,140
block are run

6981
04:26:38,140 --> 04:26:43,229
[Music]

6982
04:26:44,560 --> 04:26:46,800
now we'll use a few lf statements to

6983
04:26:46,800 --> 04:26:49,279
check for various other conditions so

6984
04:26:49,279 --> 04:26:51,439
we'll add an lf statement to see if the

6985
04:26:51,439 --> 04:26:54,159
dealer got over 21

6986
04:26:54,159 --> 04:26:55,920
and then we'll print dealer busted you

6987
04:26:55,920 --> 04:26:59,840
win and then return true

6988
04:26:59,840 --> 04:27:02,239
[Music]

6989
04:27:02,239 --> 04:27:03,920
oh and i just copied all this but this

6990
04:27:03,920 --> 04:27:06,560
should be an l if not if

6991
04:27:06,560 --> 04:27:08,000
and then we'll add an lf statement to

6992
04:27:08,000 --> 04:27:10,159
check if both players have a blackjack

6993
04:27:10,159 --> 04:27:11,520
and then we'll print both players have a

6994
04:27:11,520 --> 04:27:13,359
blackjack tie

6995
04:27:13,359 --> 04:27:16,399
and then return true

6996
04:27:16,900 --> 04:27:21,120
[Music]

6997
04:27:21,120 --> 04:27:22,640
and then we'll add an elf statement to

6998
04:27:22,640 --> 04:27:24,800
check if player hand has a blackjack and

6999
04:27:24,800 --> 04:27:26,479
then we'll print you have blackjack you

7000
04:27:26,479 --> 04:27:27,359
win

7001
04:27:27,359 --> 04:27:30,479
and then return true

7002
04:27:32,319 --> 04:27:34,319
and then we'll check if the dealer hand

7003
04:27:34,319 --> 04:27:36,319
has a blackjack and then say dealer has

7004
04:27:36,319 --> 04:27:38,319
blackjack dealer wins

7005
04:27:38,319 --> 04:27:41,450
and return true

7006
04:27:41,450 --> 04:27:42,800
[Music]

7007
04:27:42,800 --> 04:27:44,720
okay we're done with all the hand when

7008
04:27:44,720 --> 04:27:47,279
conditions but the game can also end if

7009
04:27:47,279 --> 04:27:49,359
both players choose not to get more

7010
04:27:49,359 --> 04:27:51,600
cards so we're going to add a new

7011
04:27:51,600 --> 04:27:53,840
argument to the check winner method with

7012
04:27:53,840 --> 04:27:55,680
a default value it's going to be game

7013
04:27:55,680 --> 04:27:57,920
over equals false

7014
04:27:57,920 --> 04:28:00,800
so we'll add game

7015
04:28:00,800 --> 04:28:02,080
over

7016
04:28:02,080 --> 04:28:03,520
equals false

7017
04:28:03,520 --> 04:28:05,279
if it's true that means both players

7018
04:28:05,279 --> 04:28:08,319
have chosen not to get more cards now

7019
04:28:08,319 --> 04:28:10,319
we'll use the new argument

7020
04:28:10,319 --> 04:28:12,560
the string of if and lf statements

7021
04:28:12,560 --> 04:28:14,560
should only be run

7022
04:28:14,560 --> 04:28:16,800
if it's not a game over and we'll make

7023
04:28:16,800 --> 04:28:19,680
sure the line returned false is not in

7024
04:28:19,680 --> 04:28:21,760
the if statement

7025
04:28:21,760 --> 04:28:23,120
so

7026
04:28:23,120 --> 04:28:24,640
here we'll say

7027
04:28:24,640 --> 04:28:26,159
if

7028
04:28:26,159 --> 04:28:28,399
not game

7029
04:28:28,399 --> 04:28:29,920
over

7030
04:28:29,920 --> 04:28:32,880
and then i'll just select all these and

7031
04:28:32,880 --> 04:28:34,479
put them

7032
04:28:34,479 --> 04:28:35,680
in here

7033
04:28:35,680 --> 04:28:37,359
so if game over is true we'll check if

7034
04:28:37,359 --> 04:28:40,000
the player hand's value is more than the

7035
04:28:40,000 --> 04:28:42,319
deal hands value and if so we'll print

7036
04:28:42,319 --> 04:28:43,600
you in

7037
04:28:43,600 --> 04:28:47,279
so we can do this with an else here

7038
04:28:47,279 --> 04:28:50,080
else

7039
04:28:50,080 --> 04:28:52,300
if player

7040
04:28:52,300 --> 04:28:55,520
[Music]

7041
04:28:55,520 --> 04:28:57,600
and then we'll do an lf for if it's a

7042
04:28:57,600 --> 04:28:59,920
tie

7043
04:29:00,479 --> 04:29:02,399
so this is an lf

7044
04:29:02,399 --> 04:29:04,800
and we'll say if these are

7045
04:29:04,800 --> 04:29:06,479
equal to each other

7046
04:29:06,479 --> 04:29:08,800
and we'll print

7047
04:29:08,800 --> 04:29:11,040
tie

7048
04:29:11,279 --> 04:29:12,880
and then make sure we have the correct

7049
04:29:12,880 --> 04:29:14,850
emoji for a tie

7050
04:29:14,850 --> 04:29:16,319
[Music]

7051
04:29:16,319 --> 04:29:18,720
and then else the dealer is one

7052
04:29:18,720 --> 04:29:20,399
so we'll just do

7053
04:29:20,399 --> 04:29:22,020
else

7054
04:29:22,020 --> 04:29:23,840
[Music]

7055
04:29:23,840 --> 04:29:25,439
and then at the exact same level of

7056
04:29:25,439 --> 04:29:28,000
indentation as the else we just added

7057
04:29:28,000 --> 04:29:30,159
we'll add return true this will make the

7058
04:29:30,159 --> 04:29:32,080
method return true if game over equals

7059
04:29:32,080 --> 04:29:34,080
true

7060
04:29:34,080 --> 04:29:35,760
now let's go back to the play method

7061
04:29:35,760 --> 04:29:37,760
inside the while loop

7062
04:29:37,760 --> 04:29:39,760
and then we'll do an if statement and

7063
04:29:39,760 --> 04:29:41,199
we'll do if and then we'll call the

7064
04:29:41,199 --> 04:29:42,800
check winner function with the player

7065
04:29:42,800 --> 04:29:45,040
hand and the dealer hand so let's go

7066
04:29:45,040 --> 04:29:47,840
back up here

7067
04:29:48,800 --> 04:29:52,560
if self dot check

7068
04:29:53,199 --> 04:29:54,399
winner

7069
04:29:54,399 --> 04:29:56,720
and then we'll enter the player hand and

7070
04:29:56,720 --> 04:29:58,160
the dealer hand

7071
04:29:58,160 --> 04:29:59,760
[Music]

7072
04:29:59,760 --> 04:30:01,920
so if this is true that means we should

7073
04:30:01,920 --> 04:30:03,680
go on to the next game

7074
04:30:03,680 --> 04:30:07,040
to do that we do continue

7075
04:30:07,040 --> 04:30:09,520
so continue is going to just go to the

7076
04:30:09,520 --> 04:30:11,920
next iteration of the loop and the loop

7077
04:30:11,920 --> 04:30:14,640
we're on is this loop so when we go to

7078
04:30:14,640 --> 04:30:17,680
the next iteration we start a new game

7079
04:30:17,680 --> 04:30:19,040
at this point in the game the player

7080
04:30:19,040 --> 04:30:22,000
will be able to choose hit or stand

7081
04:30:22,000 --> 04:30:24,399
so inside the while loop but not inside

7082
04:30:24,399 --> 04:30:26,319
the if statement we just added we'll

7083
04:30:26,319 --> 04:30:29,120
create a variable called choice and set

7084
04:30:29,120 --> 04:30:32,319
it to be an empty string

7085
04:30:32,880 --> 04:30:34,080
the player should be able to keep

7086
04:30:34,080 --> 04:30:35,920
choosing until the value of their hand

7087
04:30:35,920 --> 04:30:38,560
is over 21. so right under the choice

7088
04:30:38,560 --> 04:30:41,120
variable we'll add a while loop that

7089
04:30:41,120 --> 04:30:43,600
loops while player hand's value is less

7090
04:30:43,600 --> 04:30:46,800
than 21 and inside the loop we'll add a

7091
04:30:46,800 --> 04:30:48,800
line to get the choice

7092
04:30:48,800 --> 04:30:53,319
that's either going to be hit or stand

7093
04:30:53,550 --> 04:30:56,690
[Music]

7094
04:30:57,840 --> 04:31:00,080
and then we'll just add this to convert

7095
04:31:00,080 --> 04:31:02,000
whatever the answer is whatever the user

7096
04:31:02,000 --> 04:31:03,680
put in we are going to convert it to

7097
04:31:03,680 --> 04:31:05,040
lowercase

7098
04:31:05,040 --> 04:31:07,439
the while loop we just added should also

7099
04:31:07,439 --> 04:31:10,319
stop if the user's choice is stand or or

7100
04:31:10,319 --> 04:31:12,800
s so we'll update the line that starts

7101
04:31:12,800 --> 04:31:15,359
the while loop to also stop if the

7102
04:31:15,359 --> 04:31:20,319
choice isn't s or stand so just do and

7103
04:31:20,319 --> 04:31:21,520
choice

7104
04:31:21,520 --> 04:31:22,880
not in

7105
04:31:22,880 --> 04:31:24,720
and this is there's a few ways to do it

7106
04:31:24,720 --> 04:31:27,439
but this is kind of a new way that i'm

7107
04:31:27,439 --> 04:31:28,970
just showing you here

7108
04:31:28,970 --> 04:31:31,199
[Music]

7109
04:31:31,199 --> 04:31:35,600
so we are checking if choice is not in

7110
04:31:35,600 --> 04:31:37,520
this list and inside the list we have

7111
04:31:37,520 --> 04:31:40,960
two elements s or stand so if choice is

7112
04:31:40,960 --> 04:31:43,120
not in that if the choice is not s or

7113
04:31:43,120 --> 04:31:45,359
stand then we'll continue the loop

7114
04:31:45,359 --> 04:31:47,279
and then after the input we'll print an

7115
04:31:47,279 --> 04:31:49,920
empty line

7116
04:31:50,640 --> 04:31:52,720
also we want the program to keep asking

7117
04:31:52,720 --> 04:31:54,720
the user for a choice until the user

7118
04:31:54,720 --> 04:31:56,880
enters a valid choice

7119
04:31:56,880 --> 04:32:00,080
the valid choices are hs hit and stand

7120
04:32:00,080 --> 04:32:02,239
so right after the last print statement

7121
04:32:02,239 --> 04:32:04,239
at the same indentation we'll add a

7122
04:32:04,239 --> 04:32:06,319
while loop that will keep looping until

7123
04:32:06,319 --> 04:32:09,040
the user enters a valid choice

7124
04:32:09,040 --> 04:32:11,840
and inside that while loop we'll ask for

7125
04:32:11,840 --> 04:32:13,359
input again

7126
04:32:13,359 --> 04:32:15,760
but we'll specify it can be h or s as

7127
04:32:15,760 --> 04:32:18,360
well

7128
04:32:18,360 --> 04:32:25,040
[Music]

7129
04:32:25,040 --> 04:32:26,800
so this is going to look very similar to

7130
04:32:26,800 --> 04:32:28,560
this line but it's going to kind of

7131
04:32:28,560 --> 04:32:30,960
clarify things just a little bit

7132
04:32:30,960 --> 04:32:35,439
and then we'll print another empty line

7133
04:32:35,439 --> 04:32:38,000
the last while loop we checked if choice

7134
04:32:38,000 --> 04:32:39,680
was not in a list

7135
04:32:39,680 --> 04:32:41,279
outside of the recently added a while

7136
04:32:41,279 --> 04:32:43,359
loop but inside the loop we just added

7137
04:32:43,359 --> 04:32:45,439
before that one we'll add an if

7138
04:32:45,439 --> 04:32:47,840
statement to check if choice is in the

7139
04:32:47,840 --> 04:32:50,560
list hit or h and if so we'll add a card

7140
04:32:50,560 --> 04:32:52,159
to the player's hand that is dealt from

7141
04:32:52,159 --> 04:32:54,560
the deck

7142
04:32:56,080 --> 04:32:58,159
and then right below that will display

7143
04:32:58,159 --> 04:33:01,120
the player's hand

7144
04:33:01,840 --> 04:33:03,439
outside all the while loops about the

7145
04:33:03,439 --> 04:33:05,759
player making a choice we'll check for a

7146
04:33:05,759 --> 04:33:07,520
winner we'll use the same if statement

7147
04:33:07,520 --> 04:33:09,438
and continue statement that we use last

7148
04:33:09,438 --> 04:33:11,919
time we checked for winner so i'll just

7149
04:33:11,919 --> 04:33:14,240
copy this

7150
04:33:14,240 --> 04:33:15,680
and then

7151
04:33:15,680 --> 04:33:17,199
we have to make sure it's lined up

7152
04:33:17,199 --> 04:33:18,320
correctly

7153
04:33:18,320 --> 04:33:20,639
okay so this is outside of this while

7154
04:33:20,639 --> 04:33:23,199
loop so after this all is all done we

7155
04:33:23,199 --> 04:33:25,278
check for a winner let's just add an

7156
04:33:25,278 --> 04:33:26,958
empty line there to

7157
04:33:26,958 --> 04:33:28,719
make it more clear that the while loop

7158
04:33:28,719 --> 04:33:29,599
is over

7159
04:33:29,599 --> 04:33:30,799
now we'll store the value of the

7160
04:33:30,799 --> 04:33:33,438
player's hand in a variable named player

7161
04:33:33,438 --> 04:33:38,430
hand value with underscores for spaces

7162
04:33:38,430 --> 04:33:39,919
[Music]

7163
04:33:39,919 --> 04:33:41,599
and we'll do the same thing with the

7164
04:33:41,599 --> 04:33:44,270
dealer's hand

7165
04:33:44,270 --> 04:33:50,160
[Music]

7166
04:33:50,160 --> 04:33:53,118
remember i could use the command d or

7167
04:33:53,118 --> 04:33:55,919
control d to select two words at once

7168
04:33:55,919 --> 04:33:58,879
and change them both at the same time

7169
04:33:58,879 --> 04:34:00,879
okay the dealer should keep drawing

7170
04:34:00,879 --> 04:34:03,759
cards until dealer hand value is more

7171
04:34:03,759 --> 04:34:06,879
than 17 so we'll make this happen with a

7172
04:34:06,879 --> 04:34:08,000
while loop

7173
04:34:08,000 --> 04:34:09,520
and inside the loop we'll make sure the

7174
04:34:09,520 --> 04:34:11,599
dealer is dealt a card from the deck and

7175
04:34:11,599 --> 04:34:15,278
that dealer hand value is updated

7176
04:34:15,278 --> 04:34:17,520
so you can try that yourself but i'm

7177
04:34:17,520 --> 04:34:19,438
going to show you right now while

7178
04:34:19,438 --> 04:34:20,958
dealer

7179
04:34:20,958 --> 04:34:22,799
hand value

7180
04:34:22,799 --> 04:34:26,320
is less than 17.

7181
04:34:26,320 --> 04:34:28,639
then we will do dealer

7182
04:34:28,639 --> 04:34:30,240
hand dot

7183
04:34:30,240 --> 04:34:33,199
add card

7184
04:34:34,879 --> 04:34:37,118
okay and after this while loop will

7185
04:34:37,118 --> 04:34:39,359
display the dealer's hand and when we

7186
04:34:39,359 --> 04:34:41,199
call the display method we'll make sure

7187
04:34:41,199 --> 04:34:46,719
to set show all dealer cards to true

7188
04:34:47,230 --> 04:34:48,799
[Music]

7189
04:34:48,799 --> 04:34:50,400
and since it's the end of the game

7190
04:34:50,400 --> 04:34:51,759
that's why we're just showing all the

7191
04:34:51,759 --> 04:34:53,039
cards

7192
04:34:53,039 --> 04:34:54,719
now we'll check for a winner just like

7193
04:34:54,719 --> 04:34:57,119
before

7194
04:34:58,958 --> 04:35:02,878
then we'll print final results

7195
04:35:03,520 --> 04:35:05,599
then we'll print your hand colon and

7196
04:35:05,599 --> 04:35:08,470
then the player hand value

7197
04:35:08,470 --> 04:35:09,759
[Music]

7198
04:35:09,759 --> 04:35:13,358
and then the dealer's hand

7199
04:35:14,240 --> 04:35:17,278
now we'll call the check winner function

7200
04:35:17,278 --> 04:35:18,799
one final time

7201
04:35:18,799 --> 04:35:20,799
but this time it should not be an if

7202
04:35:20,799 --> 04:35:22,879
statement and we'll pass in the hands

7203
04:35:22,879 --> 04:35:24,879
like before but this time we'll add a

7204
04:35:24,879 --> 04:35:27,438
third argument of true to indicate that

7205
04:35:27,438 --> 04:35:30,718
the game is over

7206
04:35:32,561 --> 04:35:34,719
and at this point in the code the game

7207
04:35:34,719 --> 04:35:35,680
is over

7208
04:35:35,680 --> 04:35:38,400
so outside the outer while loop and in

7209
04:35:38,400 --> 04:35:40,879
the play method we'll add the final line

7210
04:35:40,879 --> 04:35:42,240
of saying

7211
04:35:42,240 --> 04:35:45,520
thanks for playing

7212
04:35:47,680 --> 04:35:49,359
so it's going to be outside that while

7213
04:35:49,359 --> 04:35:53,119
loop and we'll put print

7214
04:35:54,799 --> 04:35:57,039
and just to demonstrate it i use an

7215
04:35:57,039 --> 04:36:00,160
escape character to add a new line so

7216
04:36:00,160 --> 04:36:03,438
this slash in is going to add a new line

7217
04:36:03,438 --> 04:36:05,680
and then do thanks for playing and when

7218
04:36:05,680 --> 04:36:08,320
i line this up for with the while loop i

7219
04:36:08,320 --> 04:36:10,561
realize that this entire function should

7220
04:36:10,561 --> 04:36:12,958
not be lined up with the while loop

7221
04:36:12,958 --> 04:36:16,080
sometimes it gets tricky with um

7222
04:36:16,080 --> 04:36:18,080
figuring out the exact right indentation

7223
04:36:18,080 --> 04:36:19,278
so if i

7224
04:36:19,278 --> 04:36:22,160
kind of go up straight up here

7225
04:36:22,160 --> 04:36:23,680
i should say see that this should be

7226
04:36:23,680 --> 04:36:26,958
lined up with this play function

7227
04:36:26,958 --> 04:36:29,039
so i'm going to come back down to this

7228
04:36:29,039 --> 04:36:30,160
function

7229
04:36:30,160 --> 04:36:31,520
i'm going to

7230
04:36:31,520 --> 04:36:33,840
copy this all

7231
04:36:33,840 --> 04:36:36,958
and i'm just going to do shift tab

7232
04:36:36,958 --> 04:36:40,639
to indent it all one less

7233
04:36:40,639 --> 04:36:42,000
this happens sometimes when running

7234
04:36:42,000 --> 04:36:44,320
python code sometimes the indentation

7235
04:36:44,320 --> 04:36:47,599
can get all mixed up but that should be

7236
04:36:47,599 --> 04:36:50,400
correct now and i think the red squiggly

7237
04:36:50,400 --> 04:36:52,958
lines here on the return true are not a

7238
04:36:52,958 --> 04:36:55,680
mistake in the code but a mistake in the

7239
04:36:55,680 --> 04:36:58,160
error checking because it comes after

7240
04:36:58,160 --> 04:36:59,919
that emoji and it doesn't know how to

7241
04:36:59,919 --> 04:37:02,400
handle the emoji but it's perfectly fine

7242
04:37:02,400 --> 04:37:05,680
for code to have emojis okay let's run

7243
04:37:05,680 --> 04:37:09,039
the program and try it out so i'll press

7244
04:37:09,039 --> 04:37:10,639
play how many games i want to play i'll

7245
04:37:10,639 --> 04:37:11,759
do three

7246
04:37:11,759 --> 04:37:14,160
so game of one of three so i can see i

7247
04:37:14,160 --> 04:37:16,879
have 17 i don't know what the dealer has

7248
04:37:16,879 --> 04:37:20,719
but i'm going to s for stand

7249
04:37:20,719 --> 04:37:23,520
okay it's always good to test so it says

7250
04:37:23,520 --> 04:37:26,639
deal is missing one required positional

7251
04:37:26,639 --> 04:37:29,039
argument so let's go up to

7252
04:37:29,039 --> 04:37:31,759
it says line 139 so this can kind of

7253
04:37:31,759 --> 04:37:34,240
help us know where to go so let's go up

7254
04:37:34,240 --> 04:37:37,279
to 139

7255
04:37:38,958 --> 04:37:42,480
and yeah i want to deal a single card so

7256
04:37:42,480 --> 04:37:44,799
i'm going to deal one card here

7257
04:37:44,799 --> 04:37:45,840
and

7258
04:37:45,840 --> 04:37:47,759
were there any other times i did use

7259
04:37:47,759 --> 04:37:50,079
deal

7260
04:37:50,240 --> 04:37:51,438
i want to

7261
04:37:51,438 --> 04:37:55,278
deal one card here

7262
04:37:55,520 --> 04:37:56,639
and

7263
04:37:56,639 --> 04:37:58,799
yeah i got the deal one up here so i

7264
04:37:58,799 --> 04:38:00,958
just think i just forgot the deal one in

7265
04:38:00,958 --> 04:38:02,639
those places

7266
04:38:02,639 --> 04:38:05,359
so uh thanks to these error messages

7267
04:38:05,359 --> 04:38:07,840
whenever you have a problem make sure to

7268
04:38:07,840 --> 04:38:10,320
read the error messages and it can often

7269
04:38:10,320 --> 04:38:12,879
give you a very good idea of what you

7270
04:38:12,879 --> 04:38:15,039
need to do wrong because even says deal

7271
04:38:15,039 --> 04:38:16,879
is missing one required positional

7272
04:38:16,879 --> 04:38:19,438
argument the number so that can really

7273
04:38:19,438 --> 04:38:20,958
help figure out what's wrong with your

7274
04:38:20,958 --> 04:38:23,680
code so let's try that again we'll do

7275
04:38:23,680 --> 04:38:25,039
three games

7276
04:38:25,039 --> 04:38:28,879
and then this time i will hit

7277
04:38:28,879 --> 04:38:30,879
and i'm going to stand

7278
04:38:30,879 --> 04:38:33,840
okay so now we have another error

7279
04:38:33,840 --> 04:38:36,240
so it says 173

7280
04:38:36,240 --> 04:38:38,480
and oh this i can already see this is

7281
04:38:38,480 --> 04:38:41,759
spelled wrong so let's go to

7282
04:38:41,759 --> 04:38:44,718
173

7283
04:38:45,599 --> 04:38:47,278
and

7284
04:38:47,278 --> 04:38:51,039
make sure i spell that correctly

7285
04:38:51,039 --> 04:38:53,919
and make sure i spell that correctly

7286
04:38:53,919 --> 04:38:56,000
okay let's try again

7287
04:38:56,000 --> 04:38:58,879
how many games you want to play three

7288
04:38:58,879 --> 04:39:01,199
i'm going to hit

7289
04:39:01,199 --> 04:39:03,759
and hit

7290
04:39:03,759 --> 04:39:06,480
okay so the first game

7291
04:39:06,480 --> 04:39:09,359
you busted dealer wins and now we're on

7292
04:39:09,359 --> 04:39:12,000
game number two i'll hit

7293
04:39:12,000 --> 04:39:15,039
and this time i will stand

7294
04:39:15,039 --> 04:39:18,320
okay dealer busted you win now we're on

7295
04:39:18,320 --> 04:39:20,561
game three of three

7296
04:39:20,561 --> 04:39:22,561
and i will hit

7297
04:39:22,561 --> 04:39:24,879
and i will stand

7298
04:39:24,879 --> 04:39:27,359
and final results your hand 20 dealer's

7299
04:39:27,359 --> 04:39:28,639
hand 19

7300
04:39:28,639 --> 04:39:29,759
you win

7301
04:39:29,759 --> 04:39:32,320
thanks for playing

7302
04:39:32,320 --> 04:39:36,400
we just completed this whole game

7303
04:39:36,400 --> 04:39:38,798
okay we've reached the end of the course

7304
04:39:38,798 --> 04:39:41,040
so you've learned the basics of python

7305
04:39:41,040 --> 04:39:43,120
and if you've been coding along you've

7306
04:39:43,120 --> 04:39:45,920
written two python programs good luck on

7307
04:39:45,920 --> 04:39:48,240
your programming journey thanks for

7308
04:39:48,240 --> 04:39:51,040
watching and remember use your code for

7309
04:39:51,040 --> 04:39:54,718
good bye bye bye

7310
04:39:54,718 --> 04:39:57,520
bye bye

7311
04:39:58,320 --> 04:40:01,040
okay

